// ‚úÖ SYST√àME D'OVERLAY PHASER ULTRA-OPTIMIS√â
// Performance maximale avec gestion intelligente des ressources

export class OptimizedPhaserOverlayManager {
  constructor(scene) {
    this.scene = scene;
    
    // ‚úÖ Overlays Phaser au lieu de HTML
    this.dayNightOverlay = null;
    this.weatherOverlay = null;
    
    // ‚úÖ Cache des couleurs pour √©viter les recalculs
    this.colorCache = new Map();
    
    // ‚úÖ √âtats pr√©c√©dents pour √©viter les updates inutiles
    this.lastDayNightState = null;
    this.lastWeatherState = null;
    
    // ‚úÖ Tweens actifs pour √©viter les conflits
    this.activeTweens = new Set();
    
    // ‚úÖ Performance monitoring
    this.performanceMode = this.detectPerformanceLevel();
    
    console.log(`üé® [PhaserOverlay] Initialis√© (Mode: ${this.performanceMode})`);
  }

  // ‚úÖ NOUVEAU: D√©tection automatique du niveau de performance
  detectPerformanceLevel() {
    const game = this.scene.sys.game;
    const renderer = game.renderer;
    
    // Facteurs de performance
    const factors = {
      webgl: renderer.type === Phaser.WEBGL ? 1.0 : 0.7, // WebGL vs Canvas
      memory: navigator.deviceMemory || 4, // GB de RAM
      cores: navigator.hardwareConcurrency || 4,
      mobile: /Mobi|Android/i.test(navigator.userAgent) ? 0.6 : 1.0
    };
    
    const score = factors.webgl * Math.min(factors.memory / 4, 2) * Math.min(factors.cores / 4, 2) * factors.mobile;
    
    if (score >= 1.5) return 'high';
    if (score >= 1.0) return 'medium';
    return 'low';
  }

  // ‚úÖ INITIALISATION: Cr√©er les overlays Phaser
  initialize() {
    console.log(`üé® [PhaserOverlay] Cr√©ation overlays Phaser...`);
    
    this.createDayNightOverlay();
    this.createWeatherOverlay();
    
    // ‚úÖ Pr√©-calculer les couleurs communes
    this.precacheCommonColors();
    
    console.log(`‚úÖ [PhaserOverlay] Overlays Phaser cr√©√©s`);
  }

  // ‚úÖ OVERLAY JOUR/NUIT optimis√©
  createDayNightOverlay() {
    const camera = this.scene.cameras.main;
    
    // ‚úÖ Rectangle simple et efficace
    this.dayNightOverlay = this.scene.add.rectangle(
      camera.centerX,
      camera.centerY,
      camera.width,
      camera.height,
      0x000044, // Bleu nuit par d√©faut
      0 // Transparent au d√©but
    );
    
    // ‚úÖ Param√®tres optimaux
    this.dayNightOverlay.setDepth(9998); // Juste sous les effets m√©t√©o
    this.dayNightOverlay.setScrollFactor(0); // Fixe √† l'√©cran
    this.dayNightOverlay.setOrigin(0.5, 0.5);
    
    // ‚úÖ D√©sactiver les interactions
    this.dayNightOverlay.setInteractive(false);
    
    console.log(`üåô [PhaserOverlay] Overlay jour/nuit cr√©√©`);
  }

  // ‚úÖ OVERLAY M√âT√âO optimis√©
  createWeatherOverlay() {
    const camera = this.scene.cameras.main;
    
    this.weatherOverlay = this.scene.add.rectangle(
      camera.centerX,
      camera.centerY,
      camera.width,
      camera.height,
      0x4488FF, // Bleu m√©t√©o par d√©faut
      0 // Transparent au d√©but
    );
    
    // ‚úÖ Param√®tres optimaux
    this.weatherOverlay.setDepth(9997); // Sous le jour/nuit
    this.weatherOverlay.setScrollFactor(0);
    this.weatherOverlay.setOrigin(0.5, 0.5);
    this.weatherOverlay.setInteractive(false);
    
    console.log(`üå¶Ô∏è [PhaserOverlay] Overlay m√©t√©o cr√©√©`);
  }

  // ‚úÖ PR√â-CACHE des couleurs pour performance maximale
  precacheCommonColors() {
    const commonColors = {
      // Jour/Nuit
      'day': { color: 0x000044, alpha: 0 },
      'night': { color: 0x000044, alpha: 0.4 },
      'dawn': { color: 0x442200, alpha: 0.2 },
      'dusk': { color: 0x220044, alpha: 0.3 },
      
      // M√©t√©o
      'clear': { color: 0x4488FF, alpha: 0 },
      'rain': { color: 0x4488FF, alpha: 0.15 },
      'storm': { color: 0x333366, alpha: 0.25 },
      'snow': { color: 0xFFFFFF, alpha: 0.10 },
      'fog': { color: 0xCCCCCC, alpha: 0.20 },
      
      // Environnements sp√©ciaux
      'cave': { color: 0x2D1B0E, alpha: 0.6 },
      'indoor': { color: 0x000044, alpha: 0 }
    };
    
    Object.entries(commonColors).forEach(([key, value]) => {
      this.colorCache.set(key, value);
    });
    
    console.log(`üé® [PhaserOverlay] ${this.colorCache.size} couleurs en cache`);
  }

  // ‚úÖ UPDATE JOUR/NUIT ultra-optimis√©
  updateDayNight(isDayTime, environment = 'outdoor', zoneName = null) {
    if (!this.dayNightOverlay) return;
    
    // ‚úÖ Cr√©er une cl√© d'√©tat unique
    const stateKey = `${isDayTime ? 'day' : 'night'}-${environment}-${zoneName}`;
    
    // ‚úÖ SKIP si √©tat identique
    if (this.lastDayNightState === stateKey) {
      return; // Pas de changement n√©cessaire
    }
    
    this.lastDayNightState = stateKey;
    
    // ‚úÖ D√©terminer la couleur et alpha selon l'environnement
    let targetColor, targetAlpha;
    
    if (environment === 'indoor') {
      // Int√©rieur - pas d'effet
      targetColor = 0x000044;
      targetAlpha = 0;
    } else if (environment === 'cave') {
      // Grotte - couleur sp√©ciale
      const cached = this.colorCache.get('cave');
      targetColor = cached.color;
      targetAlpha = cached.alpha;
    } else {
      // Ext√©rieur - cycle jour/nuit normal
      const timeKey = isDayTime ? 'day' : 'night';
      const cached = this.colorCache.get(timeKey);
      targetColor = cached.color;
      targetAlpha = cached.alpha;
    }
    
    console.log(`üåÖ [PhaserOverlay] Jour/Nuit: ${stateKey} ‚Üí alpha: ${targetAlpha}`);
    
    // ‚úÖ Animation optimis√©e selon le mode performance
    this.animateOverlay(this.dayNightOverlay, targetColor, targetAlpha, 'daynight');
  }

  // ‚úÖ UPDATE M√âT√âO ultra-optimis√©
  updateWeather(weather, environment = 'outdoor') {
    if (!this.weatherOverlay) return;
    
    // ‚úÖ Cr√©er une cl√© d'√©tat unique
    const stateKey = `${weather}-${environment}`;
    
    // ‚úÖ SKIP si √©tat identique
    if (this.lastWeatherState === stateKey) {
      return; // Pas de changement n√©cessaire
    }
    
    this.lastWeatherState = stateKey;
    
    // ‚úÖ D√©terminer la couleur selon l'environnement
    let targetColor, targetAlpha;
    
    if (environment === 'indoor' || environment === 'cave') {
      // Int√©rieur/Grotte - pas de m√©t√©o
      targetColor = 0x4488FF;
      targetAlpha = 0;
    } else {
      // Ext√©rieur - effet m√©t√©o
      const cached = this.colorCache.get(weather);
      if (cached) {
        targetColor = cached.color;
        targetAlpha = cached.alpha;
      } else {
        // M√©t√©o inconnue - d√©faut clear
        targetColor = 0x4488FF;
        targetAlpha = 0;
      }
    }
    
    console.log(`üå§Ô∏è [PhaserOverlay] M√©t√©o: ${stateKey} ‚Üí alpha: ${targetAlpha}`);
    
    // ‚úÖ Animation optimis√©e
    this.animateOverlay(this.weatherOverlay, targetColor, targetAlpha, 'weather');
  }

  // ‚úÖ ANIMATION INTELLIGENTE selon les performances
  animateOverlay(overlay, targetColor, targetAlpha, type) {
    // ‚úÖ Arr√™ter les tweens existants pour cet overlay
    this.stopOverlayTweens(overlay);
    
    // ‚úÖ Changer la couleur imm√©diatement (pas de transition couleur)
    overlay.setFillStyle(targetColor);
    
    // ‚úÖ Animer seulement l'alpha selon le mode performance
    const duration = this.getAnimationDuration(type);
    
    if (duration === 0 || this.performanceMode === 'low') {
      // ‚úÖ Mode performance bas - pas d'animation
      overlay.setAlpha(targetAlpha);
      console.log(`‚ö° [PhaserOverlay] ${type} instantan√© (perf: ${this.performanceMode})`);
    } else {
      // ‚úÖ Animation fluide
      const tween = this.scene.tweens.add({
        targets: overlay,
        alpha: targetAlpha,
        duration: duration,
        ease: 'Sine.easeInOut',
        onComplete: () => {
          this.activeTweens.delete(tween);
        }
      });
      
      this.activeTweens.add(tween);
      console.log(`üé¨ [PhaserOverlay] ${type} anim√© (${duration}ms)`);
    }
  }

  // ‚úÖ DUR√âE D'ANIMATION adaptative
  getAnimationDuration(type) {
    const baseDurations = {
      daynight: 3000, // 3 secondes pour jour/nuit
      weather: 2000   // 2 secondes pour m√©t√©o
    };
    
    const performanceMultipliers = {
      high: 1.0,     // Dur√©e compl√®te
      medium: 0.7,   // 30% plus rapide
      low: 0         // Pas d'animation
    };
    
    const baseDuration = baseDurations[type] || 2000;
    const multiplier = performanceMultipliers[this.performanceMode] || 1.0;
    
    return Math.round(baseDuration * multiplier);
  }

  // ‚úÖ ARR√äT OPTIMIS√â des animations
  stopOverlayTweens(overlay) {
    // Arr√™ter tous les tweens actifs pour cet overlay
    this.activeTweens.forEach(tween => {
      if (tween.targets && tween.targets.includes(overlay)) {
        tween.stop();
        this.activeTweens.delete(tween);
      }
    });
  }

  // ‚úÖ RESIZE automatique des overlays
  onCameraResize() {
    const camera = this.scene.cameras.main;
    
    if (this.dayNightOverlay) {
      this.dayNightOverlay.setPosition(camera.centerX, camera.centerY);
      this.dayNightOverlay.setSize(camera.width, camera.height);
    }
    
    if (this.weatherOverlay) {
      this.weatherOverlay.setPosition(camera.centerX, camera.centerY);
      this.weatherOverlay.setSize(camera.width, camera.height);
    }
    
    console.log(`üìê [PhaserOverlay] Overlays redimensionn√©s: ${camera.width}x${camera.height}`);
  }

  // ‚úÖ API SIMPLIFI√âE pour l'int√©gration
  setDayNight(isDayTime, environment = 'outdoor', zoneName = null) {
    this.updateDayNight(isDayTime, environment, zoneName);
  }

  setWeather(weather, environment = 'outdoor') {
    this.updateWeather(weather, environment);
  }

  // ‚úÖ FORCE UPDATE pour debug/tests
  forceUpdate(isDayTime, weather, environment = 'outdoor', zoneName = null) {
    console.log(`üîÑ [PhaserOverlay] Force update: ${isDayTime ? 'JOUR' : 'NUIT'}, ${weather}, ${environment}`);
    
    // Reset des √©tats pour forcer le changement
    this.lastDayNightState = null;
    this.lastWeatherState = null;
    
    this.updateDayNight(isDayTime, environment, zoneName);
    this.updateWeather(weather, environment);
  }

  // ‚úÖ STATS DE PERFORMANCE
  getPerformanceStats() {
    return {
      performanceMode: this.performanceMode,
      activeTweens: this.activeTweens.size,
      cachedColors: this.colorCache.size,
      lastDayNightState: this.lastDayNightState,
      lastWeatherState: this.lastWeatherState,
      overlaysCreated: !!(this.dayNightOverlay && this.weatherOverlay)
    };
  }

  // ‚úÖ DEBUG optimis√©
  debug() {
    const stats = this.getPerformanceStats();
    
    console.log(`üîç [PhaserOverlay] === DEBUG PERFORMANCE ===`);
    console.log(`‚ö° Mode: ${stats.performanceMode}`);
    console.log(`üé¨ Tweens actifs: ${stats.activeTweens}`);
    console.log(`üé® Couleurs en cache: ${stats.cachedColors}`);
    console.log(`üåÖ √âtat jour/nuit: ${stats.lastDayNightState}`);
    console.log(`üå§Ô∏è √âtat m√©t√©o: ${stats.lastWeatherState}`);
    console.log(`‚úÖ Overlays: ${stats.overlaysCreated ? 'OK' : 'MANQUANTS'}`);
    
    if (this.dayNightOverlay) {
      console.log(`üåô Overlay J/N: alpha=${this.dayNightOverlay.alpha.toFixed(2)}, visible=${this.dayNightOverlay.visible}`);
    }
    
    if (this.weatherOverlay) {
      console.log(`üå¶Ô∏è Overlay m√©t√©o: alpha=${this.weatherOverlay.alpha.toFixed(2)}, visible=${this.weatherOverlay.visible}`);
    }
  }

  // ‚úÖ NETTOYAGE COMPLET
  destroy() {
    console.log(`üßπ [PhaserOverlay] Destruction...`);
    
    // ‚úÖ Arr√™ter tous les tweens
    this.activeTweens.forEach(tween => {
      if (tween && tween.stop) {
        tween.stop();
      }
    });
    this.activeTweens.clear();
    
    // ‚úÖ D√©truire les overlays
    if (this.dayNightOverlay) {
      this.dayNightOverlay.destroy();
      this.dayNightOverlay = null;
    }
    
    if (this.weatherOverlay) {
      this.weatherOverlay.destroy();
      this.weatherOverlay = null;
    }
    
    // ‚úÖ Nettoyer les caches
    this.colorCache.clear();
    
    console.log(`‚úÖ [PhaserOverlay] D√©truit`);
  }
}

// ‚úÖ CLASSE D'INT√âGRATION pour remplacer les overlays HTML
export class DayNightWeatherManagerPhaser {
  constructor(scene) {
    this.scene = scene;
    this.overlayManager = null;
    this.timeWeatherManager = null;
    this.weatherEffects = null;
    this.isInitialized = false;
    
    console.log(`üåÖ [DayNightWeatherManagerPhaser] Cr√©√© (OVERLAYS PHASER)`);
  }

  initialize(networkManager) {
    if (this.isInitialized) return;

    console.log(`üåÖ [DayNightWeatherManagerPhaser] === INIT PHASER OVERLAYS ===`);
    
    try {
      // ‚úÖ Syst√®me de temps/m√©t√©o
      this.timeWeatherManager = new ClientTimeWeatherManager(this.scene);
      this.timeWeatherManager.initialize(networkManager);

      // ‚úÖ Overlays Phaser au lieu de HTML
      this.overlayManager = new OptimizedPhaserOverlayManager(this.scene);
      this.overlayManager.initialize();

      // ‚úÖ Effets m√©t√©o
      this.weatherEffects = new WeatherEffects(this.scene);

      this.setupCallbacks();
      
      this.isInitialized = true;
      console.log(`‚úÖ [DayNightWeatherManagerPhaser] Initialis√© (OVERLAYS PHASER)`);
      
    } catch (error) {
      console.error(`‚ùå [DayNightWeatherManagerPhaser] Erreur:`, error);
    }
  }

  setupCallbacks() {
    // ‚úÖ Callback temps optimis√©
    this.timeWeatherManager.onTimeChange((hour, isDayTime) => {
      const currentZone = this.getCurrentZone();
      const environment = zoneEnvironmentManager.getZoneEnvironment(currentZone);
      
      console.log(`üåÖ [DayNightWeatherManagerPhaser] Temps: ${hour}h ${isDayTime ? 'JOUR' : 'NUIT'} (${environment})`);
      
      this.overlayManager.setDayNight(isDayTime, environment, currentZone);
    });

    // ‚úÖ Callback m√©t√©o optimis√©
    this.timeWeatherManager.onWeatherChange((weather, displayName) => {
      const currentZone = this.getCurrentZone();
      const environment = zoneEnvironmentManager.getZoneEnvironment(currentZone);
      
      console.log(`üå§Ô∏è [DayNightWeatherManagerPhaser] M√©t√©o: ${displayName} (${environment})`);
      
      this.overlayManager.setWeather(weather, environment);
      
      // ‚úÖ Effets visuels
      if (this.weatherEffects) {
        this.weatherEffects.setEnvironmentType(environment);
        this.weatherEffects.setWeather(weather);
      }
    });
  }

  getCurrentZone() {
    return this.scene?.zoneName || this.scene?.scene?.key || 'unknown';
  }

  // ‚úÖ API publique simplifi√©e
  forceUpdate() {
    if (!this.isInitialized) return;

    const time = this.timeWeatherManager.getCurrentTime();
    const weather = this.timeWeatherManager.getCurrentWeather();
    const currentZone = this.getCurrentZone();
    const environment = zoneEnvironmentManager.getZoneEnvironment(currentZone);

    console.log(`üîÑ [DayNightWeatherManagerPhaser] Force update Phaser`);
    
    this.overlayManager.forceUpdate(time.isDayTime, weather.weather, environment, currentZone);
  }

  onZoneChanged(newZoneName) {
    console.log(`üåç [DayNightWeatherManagerPhaser] Zone chang√©e: ${newZoneName}`);
    
    // ‚úÖ Update imm√©diat avec les nouveaux param√®tres
    setTimeout(() => this.forceUpdate(), 100);
  }

  // ‚úÖ Resize automatique
  onCameraResize() {
    if (this.overlayManager) {
      this.overlayManager.onCameraResize();
    }
  }

  debug() {
    console.log(`üîç [DayNightWeatherManagerPhaser] === DEBUG PHASER ===`);
    
    if (this.overlayManager) {
      this.overlayManager.debug();
    }
    
    if (this.weatherEffects) {
      this.weatherEffects.debug();
    }
  }

  destroy() {
    console.log(`üßπ [DayNightWeatherManagerPhaser] Destruction Phaser...`);
    
    if (this.overlayManager) {
      this.overlayManager.destroy();
    }
    
    if (this.weatherEffects) {
      this.weatherEffects.destroy();
    }
    
    if (this.timeWeatherManager) {
      this.timeWeatherManager.destroy();
    }
    
    console.log(`‚úÖ [DayNightWeatherManagerPhaser] D√©truit (PHASER)`);
  }
}
// ‚úÖ √Ä la fin du fichier DayNightWeatherManager.js
export { DayNightWeatherManager };

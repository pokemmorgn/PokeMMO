// client/src/game/DayNightWeatherManager.js - VERSION AVEC SUPPORT INDOOR/OUTDOOR
import { ClientTimeWeatherManager } from '../managers/ClientTimeWeatherManager.js';
import { zoneEnvironmentManager } from '../managers/ZoneEnvironmentManager.js';

export class DayNightWeatherManager {
  constructor(scene) {
    this.scene = scene;
    this.htmlOverlay = null;
    this.weatherHtmlOverlay = null;
    this.timeWeatherManager = null;
    this.isInitialized = false;
    
    // ‚úÖ NOUVEAU: √âtat de synchronisation
    this.isServerSynced = false;
    
    // ‚úÖ NOUVEAU: Cache de l'environnement actuel
    this.currentEnvironment = null;
    this.lastZoneChecked = null;
    
    console.log(`üåÖ [DayNightWeatherManager] Cr√©√© pour ${scene.scene.key} (Mode HTML avec environnements)`);
  }

  initialize(networkManager) {
    if (this.isInitialized) {
      console.log(`‚ö†Ô∏è [DayNightWeatherManager] D√©j√† initialis√©`);
      return;
    }

    console.log(`üåÖ [DayNightWeatherManager] === INITIALISATION (MODE HTML + ENVIRONNEMENTS) ===`);
    
    try {
      // ‚úÖ Cr√©er le gestionnaire temps/m√©t√©o
      this.timeWeatherManager = new ClientTimeWeatherManager(this.scene);
      this.timeWeatherManager.initialize(networkManager);

      this.setupHtmlOverlays();
      this.setupCallbacks();
      
      // ‚úÖ V√©rifier la synchronisation apr√®s un d√©lai
      setTimeout(() => {
        this.checkSynchronization();
      }, 3000);
      
      this.isInitialized = true;
      console.log(`‚úÖ [DayNightWeatherManager] Initialis√© avec succ√®s (HTML + Environnements)`);
      
    } catch (error) {
      console.error(`‚ùå [DayNightWeatherManager] Erreur initialisation:`, error);
    }
  }

  setupHtmlOverlays() {
    console.log(`üé® [DayNightWeatherManager] Setup HTML overlays...`);
    
    // ‚úÖ Nettoyer les anciens overlays
    this.removeHtmlOverlays();
    
    // ‚úÖ Overlay jour/nuit
    this.htmlOverlay = document.createElement('div');
    this.htmlOverlay.id = 'day-night-overlay';
    this.htmlOverlay.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background-color: rgba(0, 0, 68, 0);
      z-index: 9998;
      pointer-events: none;
      transition: background-color 3s ease-in-out;
    `;
    document.body.appendChild(this.htmlOverlay);
    
    // ‚úÖ Overlay m√©t√©o
    this.weatherHtmlOverlay = document.createElement('div');
    this.weatherHtmlOverlay.id = 'weather-overlay';
    this.weatherHtmlOverlay.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background-color: rgba(68, 136, 255, 0);
      z-index: 9997;
      pointer-events: none;
      transition: background-color 2s ease-in-out;
    `;
    document.body.appendChild(this.weatherHtmlOverlay);
    
    console.log(`‚úÖ [DayNightWeatherManager] HTML overlays cr√©√©s`);
  }

  removeHtmlOverlays() {
    // Supprimer les anciens overlays s'ils existent
    const oldDayNight = document.getElementById('day-night-overlay');
    const oldWeather = document.getElementById('weather-overlay');
    
    if (oldDayNight) oldDayNight.remove();
    if (oldWeather) oldWeather.remove();
  }

  setupCallbacks() {
    // ‚úÖ Callback temps - AVEC GESTION DE SYNCHRONISATION ET ENVIRONNEMENT
    this.timeWeatherManager.onTimeChange((hour, isDayTime) => {
      console.log(`üåÖ [DayNightWeatherManager] ‚¨áÔ∏è SERVEUR: ${hour}h ${isDayTime ? 'JOUR' : 'NUIT'}`);
      
      // ‚úÖ MARQUER COMME SYNCHRONIS√â
      if (!this.isServerSynced) {
        this.isServerSynced = true;
        console.log(`üîÑ [DayNightWeatherManager] PREMI√àRE synchronisation serveur re√ßue`);
      }
      
      this.updateTimeOverlay(isDayTime);
    });

    // ‚úÖ Callback m√©t√©o - AVEC GESTION DE SYNCHRONISATION ET ENVIRONNEMENT
    this.timeWeatherManager.onWeatherChange((weather, displayName) => {
      console.log(`üå§Ô∏è [DayNightWeatherManager] ‚¨áÔ∏è SERVEUR: ${displayName}`);
      this.updateWeatherOverlay(weather);
    });
  }

  // ‚úÖ NOUVELLE M√âTHODE: Obtenir la zone actuelle
  getCurrentZone() {
    // Essayer plusieurs sources pour obtenir la zone actuelle
    return this.scene?.zoneName || 
           this.scene?.scene?.key || 
           this.scene?.mapKey || 
           this.scene?.normalizeZoneName?.(this.scene.scene.key) ||
           'unknown';
  }

  // ‚úÖ NOUVELLE M√âTHODE: V√©rifier et cacher l'environnement
  checkEnvironmentChange() {
    const currentZone = this.getCurrentZone();
    
    if (this.lastZoneChecked !== currentZone) {
      this.lastZoneChecked = currentZone;
      this.currentEnvironment = zoneEnvironmentManager.getZoneEnvironment(currentZone);
      
      console.log(`üåç [DayNightWeatherManager] Changement de zone: ${currentZone} (${this.currentEnvironment})`);
      
      // Afficher les d√©tails de l'environnement
      zoneEnvironmentManager.debugZoneEnvironment(currentZone);
      
      return true; // Changement d√©tect√©
    }
    
    return false; // Pas de changement
  }

  // ‚úÖ M√âTHODE MODIFI√âE: updateTimeOverlay avec support environnement
  updateTimeOverlay(isDayTime) {
    if (!this.htmlOverlay) {
      console.warn(`‚ö†Ô∏è [DayNightWeatherManager] Pas d'overlay HTML pour update temps`);
      return;
    }

    // ‚úÖ V√©rifier le changement d'environnement
    this.checkEnvironmentChange();
    
    const currentZone = this.getCurrentZone();
    const lighting = zoneEnvironmentManager.getRecommendedLighting(currentZone, { hour: 0, isDayTime });
    
    console.log(`üåÖ [DayNightWeatherManager] Zone "${currentZone}" - ${lighting.reason}`);
    
    if (!lighting.applyOverlay) {
      // ‚úÖ Zone int√©rieure ou grotte avec gestion sp√©ciale
      this.htmlOverlay.style.backgroundColor = 'rgba(0, 0, 68, 0)';
      console.log(`üè† [DayNightWeatherManager] Zone int√©rieure "${currentZone}" - overlay d√©sactiv√©`);
      
      // ‚úÖ Log de confirmation
      setTimeout(() => {
        console.log(`‚úÖ [DayNightWeatherManager] Transition temps HTML termin√©e (int√©rieur): alpha=0`);
      }, 3000);
      
      return;
    }

    // ‚úÖ Zone ext√©rieure - appliquer l'overlay normal ou sp√©cial
    let backgroundColor;
    
    if (lighting.type === 'cave') {
      // Grotte - couleur sp√©ciale
      backgroundColor = zoneEnvironmentManager.getOverlayColor(currentZone);
    } else {
      // Zone ext√©rieure normale
      backgroundColor = `rgba(0, 0, 68, ${lighting.alpha})`;
    }
    
    console.log(`üåç [DayNightWeatherManager] Transition HTML: ${isDayTime ? 'JOUR' : 'NUIT'} (${lighting.type}, alpha=${lighting.alpha})`);
    
    // ‚úÖ Animation CSS
    this.htmlOverlay.style.backgroundColor = backgroundColor;
    
    // ‚úÖ Log de confirmation apr√®s la transition
    setTimeout(() => {
      console.log(`‚úÖ [DayNightWeatherManager] Transition temps HTML termin√©e: ${lighting.type} alpha=${lighting.alpha}`);
    }, 3000);
  }

  // ‚úÖ M√âTHODE MODIFI√âE: updateWeatherOverlay avec support environnement
  updateWeatherOverlay(weather) {
    if (!this.weatherHtmlOverlay) {
      console.warn(`‚ö†Ô∏è [DayNightWeatherManager] Pas d'overlay m√©t√©o HTML`);
      return;
    }

    // ‚úÖ V√©rifier si la zone est affect√©e par la m√©t√©o
    const currentZone = this.getCurrentZone();
    
    if (!zoneEnvironmentManager.shouldApplyWeatherEffect(currentZone)) {
      this.weatherHtmlOverlay.style.backgroundColor = 'rgba(68, 136, 255, 0)';
      console.log(`üè† [DayNightWeatherManager] Zone int√©rieure "${currentZone}" - pas d'effet m√©t√©o`);
      
      setTimeout(() => {
        console.log(`‚úÖ [DayNightWeatherManager] Transition m√©t√©o HTML termin√©e (int√©rieur): pas d'effet`);
      }, 2000);
      
      return;
    }

    // ‚úÖ Zone ext√©rieure - appliquer les effets m√©t√©o normaux
    let backgroundColor = 'rgba(68, 136, 255, 0)'; // Transparent par d√©faut
    
    switch (weather) {
      case 'rain':
        backgroundColor = 'rgba(68, 136, 255, 0.15)'; // Bleu pour la pluie
        break;
      case 'storm':
        backgroundColor = 'rgba(51, 51, 102, 0.25)'; // Gris-bleu pour l'orage
        break;
      case 'snow':
        backgroundColor = 'rgba(255, 255, 255, 0.10)'; // Blanc pour la neige
        break;
      case 'fog':
        backgroundColor = 'rgba(204, 204, 204, 0.20)'; // Gris pour le brouillard
        break;
      default: // clear, sunny, etc.
        backgroundColor = 'rgba(68, 136, 255, 0)';
        break;
    }
    
    console.log(`üå§Ô∏è [DayNightWeatherManager] M√©t√©o HTML ext√©rieure: ${weather} (${backgroundColor})`);
    
    this.weatherHtmlOverlay.style.backgroundColor = backgroundColor;
    
    setTimeout(() => {
      console.log(`‚úÖ [DayNightWeatherManager] Transition m√©t√©o HTML termin√©e: ${weather}`);
    }, 2000);
  }

  // ‚úÖ V√©rification de synchronisation (inchang√©e)
  checkSynchronization() {
    if (!this.timeWeatherManager) {
      console.warn(`‚ö†Ô∏è [DayNightWeatherManager] TimeWeatherManager manquant lors de la v√©rification`);
      return;
    }
    
    const isSynced = this.timeWeatherManager.isSynchronized();
    
    if (!isSynced) {
      console.warn(`‚ö†Ô∏è [DayNightWeatherManager] PAS SYNCHRONIS√â avec le serveur apr√®s 3s !`);
      console.log(`üîÑ [DayNightWeatherManager] Tentative de re-synchronisation...`);
      
      if (this.scene?.networkManager) {
        this.timeWeatherManager.forceRefreshFromServer(this.scene.networkManager);
      }
    } else {
      console.log(`‚úÖ [DayNightWeatherManager] Compl√®tement synchronis√© avec le serveur`);
      this.isServerSynced = true;
    }
  }

  // ‚úÖ API PUBLIQUE - INCHANG√âE

  getCurrentTime() {
    return this.timeWeatherManager?.getCurrentTime() || { hour: 12, isDayTime: true };
  }

  getCurrentWeather() {
    return this.timeWeatherManager?.getCurrentWeather() || { weather: 'clear', displayName: 'Ciel d√©gag√©' };
  }

  forceUpdate() {
    if (!this.isInitialized) {
      console.warn(`‚ö†Ô∏è [DayNightWeatherManager] Pas initialis√©`);
      return;
    }

    const time = this.getCurrentTime();
    const weather = this.getCurrentWeather();
    
    console.log(`üîÑ [DayNightWeatherManager] Force update: ${time.hour}h ${weather.displayName}`);
    
    // ‚úÖ Forcer la v√©rification de l'environnement
    this.checkEnvironmentChange();
    
    this.updateTimeOverlay(time.isDayTime);
    this.updateWeatherOverlay(weather.weather);
  }

  // ‚úÖ NOUVELLE M√âTHODE: Forcer refresh depuis serveur
  forceServerRefresh() {
    if (!this.timeWeatherManager) {
      console.warn(`‚ö†Ô∏è [DayNightWeatherManager] TimeWeatherManager pas disponible`);
      return;
    }
    
    console.log(`üîÑ [DayNightWeatherManager] Force refresh depuis serveur...`);
    
    if (this.scene?.networkManager) {
      this.timeWeatherManager.forceRefreshFromServer(this.scene.networkManager);
    } else {
      console.warn(`‚ö†Ô∏è [DayNightWeatherManager] NetworkManager pas disponible pour refresh`);
    }
  }

  // ‚úÖ NOUVELLES M√âTHODES AVEC SUPPORT ENVIRONNEMENT

  // Test manuel des overlays avec environnement
  testOverlays() {
    console.log(`üß™ [DayNightWeatherManager] Test des overlays HTML avec environnements...`);
    
    const currentZone = this.getCurrentZone();
    console.log(`üåç Zone actuelle pour test: ${currentZone}`);
    
    // Debug environnement
    zoneEnvironmentManager.debugZoneEnvironment(currentZone);
    
    // Test nuit
    this.updateTimeOverlay(false);
    
    setTimeout(() => {
      // Test m√©t√©o pluie
      this.updateWeatherOverlay('rain');
      
      setTimeout(() => {
        // Remettre jour + temps clair
        this.updateTimeOverlay(true);
        this.updateWeatherOverlay('clear');
      }, 3000);
    }, 3000);
  }

  // Changer manuellement la transparence avec respect de l'environnement
  setNightAlpha(alpha) {
    if (!this.htmlOverlay) return;
    
    const currentZone = this.getCurrentZone();
    const lighting = zoneEnvironmentManager.getRecommendedLighting(currentZone);
    
    if (!lighting.applyOverlay) {
      console.log(`üè† [DayNightWeatherManager] Alpha ignor√© pour zone int√©rieure "${currentZone}"`);
      return;
    }
    
    this.htmlOverlay.style.backgroundColor = `rgba(0, 0, 68, ${alpha})`;
    console.log(`üåô [DayNightWeatherManager] Alpha nuit manuel: ${alpha} (zone: ${currentZone})`);
  }

  // ‚úÖ NOUVELLE M√âTHODE: Obtenir les informations d'environnement
  getEnvironmentInfo() {
    const currentZone = this.getCurrentZone();
    return {
      zone: currentZone,
      environment: zoneEnvironmentManager.getZoneEnvironment(currentZone),
      lighting: zoneEnvironmentManager.getRecommendedLighting(currentZone, this.getCurrentTime()),
      dayNightEnabled: zoneEnvironmentManager.shouldApplyDayNightCycle(currentZone),
      weatherEnabled: zoneEnvironmentManager.shouldApplyWeatherEffect(currentZone)
    };
  }

  // ‚úÖ NOUVELLE M√âTHODE: Debug sp√©cifique aux environnements
  debugEnvironment() {
    const currentZone = this.getCurrentZone();
    console.log(`üîç [DayNightWeatherManager] === DEBUG ENVIRONNEMENT ===`);
    console.log(`üåç Zone actuelle: ${currentZone}`);
    
    const envInfo = this.getEnvironmentInfo();
    console.log(`üìä Informations environnement:`, envInfo);
    
    const time = this.getCurrentTime();
    const weather = this.getCurrentWeather();
    console.log(`üïê Temps actuel: ${time.hour}h ${time.isDayTime ? '(JOUR)' : '(NUIT)'}`);
    console.log(`üå§Ô∏è M√©t√©o actuelle: ${weather.displayName}`);
    
    if (this.htmlOverlay) {
      console.log(`üåô Overlay temps:`, {
        backgroundColor: this.htmlOverlay.style.backgroundColor,
        display: this.htmlOverlay.style.display,
        opacity: this.htmlOverlay.style.opacity
      });
    }
    
    if (this.weatherHtmlOverlay) {
      console.log(`üå¶Ô∏è Overlay m√©t√©o:`, {
        backgroundColor: this.weatherHtmlOverlay.style.backgroundColor,
        display: this.weatherHtmlOverlay.style.display,
        opacity: this.weatherHtmlOverlay.style.opacity
      });
    }
    
    // Test des diff√©rents environnements
    console.log(`üß™ [TEST] Simulation des environnements:`);
    ['village', 'villagehouse1', 'nocthercave1'].forEach(testZone => {
      const testEnv = zoneEnvironmentManager.debugZoneEnvironment(testZone);
      console.log(`  ${testZone}: ${testEnv.environment} ‚Üí Jour/Nuit: ${testEnv.dayNightEffect}, M√©t√©o: ${testEnv.weatherEffect}`);
    });
  }

  // ‚úÖ DEBUG AM√âLIOR√â avec environnements

  debug() {
    console.log(`üîç [DayNightWeatherManager] === DEBUG (HTML + ENVIRONNEMENTS) ===`);
    console.log(`üéÆ Sc√®ne: ${this.scene.scene.key}`);
    console.log(`üé® HTML Overlays: temps=${!!this.htmlOverlay}, m√©t√©o=${!!this.weatherHtmlOverlay}`);
    console.log(`‚úÖ Initialis√©: ${this.isInitialized}`);
    console.log(`üì° Synchronis√© serveur: ${this.isServerSynced}`);
    
    // ‚úÖ Informations d'environnement
    const envInfo = this.getEnvironmentInfo();
    console.log(`üåç Environnement actuel:`, envInfo);
    
    if (this.htmlOverlay) {
      console.log(`üåô Overlay temps HTML:`, {
        id: this.htmlOverlay.id,
        backgroundColor: this.htmlOverlay.style.backgroundColor,
        zIndex: this.htmlOverlay.style.zIndex,
        transition: this.htmlOverlay.style.transition
      });
    }
    
    if (this.weatherHtmlOverlay) {
      console.log(`üå¶Ô∏è Overlay m√©t√©o HTML:`, {
        id: this.weatherHtmlOverlay.id,
        backgroundColor: this.weatherHtmlOverlay.style.backgroundColor,
        zIndex: this.weatherHtmlOverlay.style.zIndex
      });
    }
    
    if (this.timeWeatherManager) {
      this.timeWeatherManager.debug();
    } else {
      console.warn(`‚ö†Ô∏è [DayNightWeatherManager] TimeWeatherManager manquant !`);
    }
    
    // ‚úÖ √âtat actuel
    const time = this.getCurrentTime();
    const weather = this.getCurrentWeather();
    console.log(`üïê √âtat actuel: ${time.hour}h ${time.isDayTime ? '(JOUR)' : '(NUIT)'}`);
    console.log(`üå§Ô∏è M√©t√©o actuelle: ${weather.displayName} (${weather.weather})`);
    
    // ‚úÖ Debug des zones environnantes
    console.log(`üìã [ZONES] Exemples d'environnements:`);
    const examples = ['beach', 'village', 'villagehouse1', 'lavandiashop', 'nocthercave1'];
    examples.forEach(zone => {
      const env = zoneEnvironmentManager.getZoneEnvironment(zone);
      const dayNight = zoneEnvironmentManager.shouldApplyDayNightCycle(zone);
      const weather = zoneEnvironmentManager.shouldApplyWeatherEffect(zone);
      console.log(`  üìç ${zone}: ${env} (Jour/Nuit: ${dayNight}, M√©t√©o: ${weather})`);
    });
  }

  // ‚úÖ M√âTHODES UTILITAIRES POUR ZONES SP√âCIFIQUES

  // Forcer le changement d'environnement (pour les tests)
  testEnvironmentChange(zoneName) {
    console.log(`üß™ [DayNightWeatherManager] Test changement vers zone: ${zoneName}`);
    
    // Simuler le changement de zone
    this.lastZoneChecked = null; // Forcer la d√©tection
    
    // Override temporaire pour le test
    const originalGetCurrentZone = this.getCurrentZone;
    this.getCurrentZone = () => zoneName;
    
    // Forcer la mise √† jour
    this.forceUpdate();
    
    // Restaurer la m√©thode originale apr√®s 5 secondes
    setTimeout(() => {
      this.getCurrentZone = originalGetCurrentZone;
      this.forceUpdate();
      console.log(`üîÑ [DayNightWeatherManager] Test termin√©, retour √† la zone normale`);
    }, 5000);
  }

  // ‚úÖ M√âTHODES POUR L'INT√âGRATION AVEC BaseZoneScene

  // M√©thode appel√©e quand la sc√®ne change de zone
  onZoneChanged(newZoneName) {
    console.log(`üåç [DayNightWeatherManager] Zone chang√©e: ${this.lastZoneChecked} ‚Üí ${newZoneName}`);
    
    // Forcer la v√©rification du nouvel environnement
    this.lastZoneChecked = null;
    this.checkEnvironmentChange();
    
    // Forcer une mise √† jour compl√®te
    this.forceUpdate();
    
    console.log(`‚úÖ [DayNightWeatherManager] Adaptation √† la nouvelle zone termin√©e`);
  }

  // ‚úÖ GETTER POUR LA SYNCHRONISATION (inchang√©)
  isSynchronized() {
    return this.isServerSynced && this.timeWeatherManager?.isSynchronized();
  }

  // ‚úÖ NETTOYAGE COMPLET (inchang√©)

  destroy() {
    console.log(`üßπ [DayNightWeatherManager] Destruction (HTML + Environnements)...`);
    
    // ‚úÖ Supprimer les overlays HTML
    this.removeHtmlOverlays();
    
    if (this.timeWeatherManager) {
      this.timeWeatherManager.destroy();
      this.timeWeatherManager = null;
    }
    
    this.htmlOverlay = null;
    this.weatherHtmlOverlay = null;
    this.isInitialized = false;
    this.isServerSynced = false;
    
    // ‚úÖ Nettoyer le cache environnement
    this.currentEnvironment = null;
    this.lastZoneChecked = null;
    
    console.log(`‚úÖ [DayNightWeatherManager] D√©truit (HTML + Environnements)`);
  }

  // ‚úÖ NOUVELLES M√âTHODES DE CONFIGURATION DYNAMIQUE

  // Ajouter une zone √† la configuration
  addZoneEnvironment(zoneName, environment) {
    const success = zoneEnvironmentManager.setZoneEnvironment(zoneName, environment);
    if (success) {
      console.log(`‚úÖ [DayNightWeatherManager] Zone "${zoneName}" configur√©e comme ${environment}`);
      
      // Si c'est la zone actuelle, forcer la mise √† jour
      if (this.getCurrentZone() === zoneName) {
        this.onZoneChanged(zoneName);
      }
    }
    return success;
  }

  // Obtenir toutes les zones par environnement
  getAllZonesByEnvironment() {
    return zoneEnvironmentManager.getAllZonesByEnvironment();
  }

  // Valider la configuration des zones
  validateEnvironmentConfiguration() {
    return zoneEnvironmentManager.validateAllZones();
  }

  // ‚úÖ COMMANDES DE DEBUG POUR LA CONSOLE

  // M√©thodes accessibles via la console du navigateur
  static setupConsoleCommands() {
    if (typeof window !== 'undefined') {
      // Commande pour debug l'environnement
      window.debugDayNight = (manager) => {
        if (manager && manager.debug) {
          manager.debug();
          manager.debugEnvironment();
        } else {
          console.warn('‚ùå Manager non fourni ou invalide');
        }
      };

      // Commande pour tester un environnement
      window.testEnvironment = (manager, zoneName) => {
        if (manager && manager.testEnvironmentChange) {
          manager.testEnvironmentChange(zoneName);
        } else {
          console.warn('‚ùå Manager non fourni ou invalide');
        }
      };

      // Commande pour lister les zones
      window.listZoneEnvironments = () => {
        const zones = zoneEnvironmentManager.getAllZonesByEnvironment();
        console.log('üåç === ZONES PAR ENVIRONNEMENT ===');
        Object.entries(zones).forEach(([env, zoneList]) => {
          console.log(`${env.toUpperCase()}: ${zoneList.join(', ')}`);
        });
      };

      console.log(`üéÆ [DayNightWeatherManager] Commandes console disponibles:`);
      console.log(`  - window.debugDayNight(manager)`);
      console.log(`  - window.testEnvironment(manager, 'zoneName')`);
      console.log(`  - window.listZoneEnvironments()`);
    }
  }
}

// ‚úÖ Initialiser les commandes console au chargement
if (typeof window !== 'undefined') {
  DayNightWeatherManager.setupConsoleCommands();
}

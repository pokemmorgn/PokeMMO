// client/src/game/ShopIntegration.js - Module d'int√©gration shop pour BaseZoneScene
// ‚úÖ Centralise toute la logique shop en un seul module

import { ShopSystem } from './ShopSystem.js';

export class ShopIntegration {
  constructor(scene) {
    this.scene = scene;
    this.shopSystem = null;
    this.isInitialized = false;
    
    // ‚úÖ NOUVEAUX VERROUS ANTI-DOUBLON
    this.shopHandlersSetup = false;
    this.isHandlingShopInteraction = false;
    this.isHandlingCatalog = false;
    
    console.log(`üè™ [${scene.scene.key}] ShopIntegration cr√©√©`);
  }

  // ‚úÖ M√âTHODE PRINCIPALE : Initialisation compl√®te du syst√®me shop
  initialize(networkManager) {
    if (this.isInitialized || !networkManager) {
      console.log(`üè™ [${this.scene.scene.key}] Shop d√©j√† initialis√© ou pas de NetworkManager`);
      return;
    }

    try {
      console.log(`üè™ [${this.scene.scene.key}] === INITIALISATION SHOP SYSTEM ===`);

      // 1. ‚úÖ R√©utiliser l'instance globale si elle existe ET qu'elle fonctionne
      if (window.shopSystem && this.validateExistingShopSystem(window.shopSystem)) {
        console.log(`üîÑ [${this.scene.scene.key}] R√©utilisation du ShopSystem global existant`);
        this.shopSystem = window.shopSystem;
        this.updateShopSystemScene(networkManager);
      } else {
        // 2. ‚úÖ Cr√©er une nouvelle instance
        console.log(`üÜï [${this.scene.scene.key}] Cr√©ation d'un nouveau ShopSystem`);
        this.shopSystem = new ShopSystem(this.scene, networkManager.room);
        window.shopSystem = this.shopSystem;
      }

      // 3. ‚úÖ Setup des √©v√©nements et raccourcis
      this.setupShopEventHandlers();
      this.setupShopNetworkHandlers(networkManager);

      // 4. ‚úÖ Marquer comme initialis√©
      this.isInitialized = true;
      console.log(`‚úÖ [${this.scene.scene.key}] ShopIntegration initialis√© avec succ√®s`);

      // 5. ‚úÖ Test optionnel apr√®s initialisation
      this.testShopIntegration();

    } catch (error) {
      console.error(`‚ùå [${this.scene.scene.key}] Erreur initialisation ShopIntegration:`, error);
    }
  }

  // ‚úÖ Valider un ShopSystem existant
  validateExistingShopSystem(existingShopSystem) {
    try {
      // V√©rifier que les composants essentiels existent
      const hasShopUI = existingShopSystem.shopUI && typeof existingShopSystem.shopUI.show === 'function';
      const hasGameRoom = existingShopSystem.gameRoom;
      const isInitialized = existingShopSystem.isInitialized;

      const isValid = hasShopUI && hasGameRoom && isInitialized;
      
      console.log(`üîç [${this.scene.scene.key}] Validation ShopSystem existant:`, {
        hasShopUI,
        hasGameRoom,
        isInitialized,
        isValid
      });

      return isValid;
    } catch (error) {
      console.warn(`‚ö†Ô∏è [${this.scene.scene.key}] Erreur validation ShopSystem existant:`, error);
      return false;
    }
  }

  // ‚úÖ Mettre √† jour un ShopSystem existant avec la nouvelle sc√®ne
  updateShopSystemScene(networkManager) {
    if (!this.shopSystem) return;

    try {
      // Mettre √† jour les r√©f√©rences
      this.shopSystem.scene = this.scene;
      this.shopSystem.gameRoom = networkManager.room;

      // Reconnecter les listeners r√©seau si n√©cessaire
      if (this.shopSystem.setupServerListeners && typeof this.shopSystem.setupServerListeners === 'function') {
        this.shopSystem.setupServerListeners();
      }

      console.log(`üîÑ [${this.scene.scene.key}] ShopSystem mis √† jour pour la nouvelle sc√®ne`);
    } catch (error) {
      console.error(`‚ùå [${this.scene.scene.key}] Erreur mise √† jour ShopSystem:`, error);
    }
  }

  // ‚úÖ Setup des √©v√©nements shop sp√©cifiques √† la sc√®ne
  setupShopEventHandlers() {
    if (!this.scene.events) return;

    // √âv√©nement quand la sc√®ne est ferm√©e
    this.scene.events.on('shutdown', () => {
      console.log(`üè™ [${this.scene.scene.key}] Sc√®ne ferm√©e, pr√©servation du ShopSystem`);
      this.handleSceneShutdown();
    });

    // √âv√©nement de destruction de la sc√®ne
    this.scene.events.on('destroy', () => {
      console.log(`üè™ [${this.scene.scene.key}] Sc√®ne d√©truite`);
      this.handleSceneDestroy();
    });

    console.log(`‚úÖ [${this.scene.scene.key}] √âv√©nements shop configur√©s`);
  }

  // ‚úÖ Setup des handlers r√©seau pour le shop
  setupShopNetworkHandlers(networkManager) {
    if (!networkManager || !networkManager.room) return;

    // ‚úÖ CORRECTION: √âviter les listeners multiples
    if (this.shopHandlersSetup) {
      console.log(`üì° [${this.scene.scene.key}] Handlers shop d√©j√† configur√©s, ignor√©`);
      return;
    }
    this.shopHandlersSetup = true;

    try {
      const room = networkManager.room;

      // ‚úÖ Handler pour les interactions NPC de type shop
      room.onMessage("npcInteractionResult", (data) => {
        if (data.type === "shop") {
          console.log(`üè™ [${this.scene.scene.key}] Interaction shop re√ßue:`, data);
          
          // ‚úÖ √âviter les traitements multiples
          if (this.isHandlingShopInteraction) {
            console.log(`‚ö†Ô∏è [${this.scene.scene.key}] Interaction shop d√©j√† en cours, ignor√©`);
            return;
          }
          this.isHandlingShopInteraction = true;
          
          this.handleShopNpcInteraction(data);
          
          // Lib√©rer apr√®s un d√©lai
          setTimeout(() => {
            this.isHandlingShopInteraction = false;
          }, 1000);
        }
      });

      // ‚úÖ Handler pour les r√©sultats de transaction shop
      room.onMessage("shopTransactionResult", (data) => {
        console.log(`üí∞ [${this.scene.scene.key}] R√©sultat transaction shop:`, data);
        if (this.shopSystem) {
          this.shopSystem.handleTransactionResult(data);
        }
      });

      // ‚úÖ Handler pour le catalogue shop
      room.onMessage("shopCatalogResult", (data) => {
        console.log(`üìã [${this.scene.scene.key}] Catalogue shop re√ßu:`, data);
        
        // √âviter les traitements multiples
        if (this.isHandlingCatalog) {
          console.log(`‚ö†Ô∏è [${this.scene.scene.key}] Catalogue d√©j√† en cours, ignor√©`);
          return;
        }
        this.isHandlingCatalog = true;
        
        if (this.shopSystem && this.shopSystem.shopUI) {
          this.shopSystem.shopUI.handleShopCatalog(data);
        }
        
        setTimeout(() => {
          this.isHandlingCatalog = false;
        }, 500);
      });

      // ‚úÖ Handler pour les mises √† jour d'or
      room.onMessage("goldUpdate", (data) => {
        console.log(`üí∞ [${this.scene.scene.key}] Mise √† jour or:`, data);
        if (this.shopSystem) {
          this.shopSystem.updatePlayerGold(data.newGold, data.oldGold);
        }
      });

      // ‚úÖ Handler pour le refresh de shop
      room.onMessage("shopRefreshResult", (data) => {
        console.log(`üîÑ [${this.scene.scene.key}] Refresh shop:`, data);
        if (this.shopSystem && this.shopSystem.shopUI) {
          this.shopSystem.shopUI.handleRefreshResult(data);
        }
      });

      console.log(`üì° [${this.scene.scene.key}] Handlers r√©seau shop configur√©s`);
    } catch (error) {
      console.error(`‚ùå [${this.scene.scene.key}] Erreur setup handlers shop:`, error);
    }
  }

  // ‚úÖ M√âTHODE MANQUANTE - G√©rer les interactions NPC de type shop
  handleShopNpcInteraction(data) {
    console.log(`üè™ [${this.scene.scene.key}] Interaction NPC shop:`, data);
    
    if (!this.shopSystem) {
      console.error(`‚ùå [${this.scene.scene.key}] Pas de ShopSystem pour g√©rer l'interaction shop`);
      
      // Fallback: essayer d'afficher un dialogue
      if (window.showNpcDialogue) {
        window.showNpcDialogue({
          name: data.npcName || "Marchand",
          portrait: null,
          lines: ["Ce marchand n'est pas disponible actuellement."]
        });
      }
      return;
    }

    try {
      // D√©l√©guer au ShopSystem avec toutes les donn√©es
      this.shopSystem.handleShopNpcInteraction(data);
      console.log(`‚úÖ [${this.scene.scene.key}] Interaction shop d√©l√©gu√©e au ShopSystem`);
    } catch (error) {
      console.error(`‚ùå [${this.scene.scene.key}] Erreur gestion interaction shop:`, error);
      
      // Fallback en cas d'erreur
      if (window.showNpcDialogue) {
        window.showNpcDialogue({
          name: data.npcName || "Marchand", 
          portrait: null,
          lines: [`Erreur shop: ${error.message}`]
        });
      }
    }
  }

  // ‚úÖ G√©rer le raccourci clavier S
  handleShopShortcut() {
    // V√©rifier que le joueur peut interagir
    if (!this.canPlayerInteractWithShop()) {
      return;
    }

    if (this.shopSystem && this.shopSystem.isShopOpen()) {
      // Fermer le shop si ouvert
      this.shopSystem.closeShop();
    } else {
      // Essayer d'ouvrir un shop √† proximit√©
      this.tryOpenNearbyShop();
    }
  }

  // ‚úÖ Essayer d'ouvrir un shop √† proximit√©
  tryOpenNearbyShop() {
    if (!this.scene.playerManager || !this.scene.npcManager) {
      console.log(`üè™ [${this.scene.scene.key}] PlayerManager ou NpcManager manquant`);
      return;
    }

    const myPlayer = this.scene.playerManager.getMyPlayer();
    if (!myPlayer) {
      console.log(`üè™ [${this.scene.scene.key}] Joueur local introuvable`);
      return;
    }

    // Chercher un NPC marchand √† proximit√©
    const npc = this.scene.npcManager.getClosestNpc(myPlayer.x, myPlayer.y, 64);
    if (!npc) {
      this.showMessage("Aucun marchand √† proximit√©", 'info');
      return;
    }

    // V√©rifier si c'est un marchand
    if (!this.isNpcMerchant(npc)) {
      this.showMessage("Ce NPC n'est pas un marchand", 'warning');
      return;
    }

    // D√©clencher l'interaction avec le marchand
    console.log(`üè™ [${this.scene.scene.key}] Ouverture shop via raccourci avec NPC: ${npc.name}`);
    if (this.scene.networkManager) {
      this.scene.networkManager.sendNpcInteract(npc.id);
    }
  }

  // ‚úÖ V√©rifier si un NPC est un marchand
  isNpcMerchant(npc) {
    if (!npc || !npc.properties) return false;
    
    return !!(
      npc.properties.npcType === 'merchant' ||
      npc.properties.shopId ||
      npc.properties.shop
    );
  }

  // ‚úÖ V√©rifier si le joueur peut interagir avec le shop
  canPlayerInteractWithShop() {
    // V√©rifications communes
    const questDialogOpen = window._questDialogActive || false;
    const chatOpen = typeof window.isChatFocused === "function" && window.isChatFocused();
    const inventoryOpen = window.inventorySystem?.isInventoryOpen() || false;
    const dialogueOpen = document.getElementById('dialogue-box')?.style.display !== 'none';
    
    const canInteract = !questDialogOpen && !chatOpen && !inventoryOpen && !dialogueOpen;
    
    if (!canInteract) {
      console.log(`üè™ [${this.scene.scene.key}] Interaction bloqu√©e:`, {
        questDialogOpen,
        chatOpen,
        inventoryOpen,
        dialogueOpen
      });
    }
    
    return canInteract;
  }

  // ‚úÖ Afficher un message dans la sc√®ne
  showMessage(message, type = 'info') {
    if (this.shopSystem && typeof this.shopSystem.showNotification === 'function') {
      this.shopSystem.showNotification(message, type);
    } else if (this.scene.showNotification && typeof this.scene.showNotification === 'function') {
      this.scene.showNotification(message, type);
    } else {
      console.log(`üì¢ [${this.scene.scene.key}] ${type.toUpperCase()}: ${message}`);
    }
  }

  // ‚úÖ Test d'int√©gration shop
  testShopIntegration() {
    if (!this.shopSystem) return;

    this.scene.time.delayedCall(1000, () => {
      try {
        console.log(`üß™ [${this.scene.scene.key}] Test d'int√©gration shop...`);
        
        const tests = [
          () => this.shopSystem.isShopOpen() !== undefined,
          () => this.shopSystem.canPlayerInteract() !== undefined,
          () => this.shopSystem.shopUI !== null,
          () => this.shopSystem.gameRoom !== null
        ];

        const results = tests.map((test, index) => {
          try {
            return test();
          } catch (error) {
            console.warn(`‚ö†Ô∏è Test ${index + 1} √©chou√©:`, error);
            return false;
          }
        });

        const passedTests = results.filter(Boolean).length;
        const totalTests = tests.length;

        console.log(`üß™ [${this.scene.scene.key}] Tests shop: ${passedTests}/${totalTests} r√©ussis`);

        if (passedTests === totalTests) {
          console.log(`‚úÖ [${this.scene.scene.key}] Int√©gration shop valid√©e`);
        } else {
          console.warn(`‚ö†Ô∏è [${this.scene.scene.key}] Int√©gration shop partiellement fonctionnelle`);
        }

      } catch (error) {
        console.error(`‚ùå [${this.scene.scene.key}] Erreur test int√©gration shop:`, error);
      }
    });
  }

  // ‚úÖ Gestion de la fermeture de sc√®ne (pr√©servation du shop)
  handleSceneShutdown() {
    // ‚úÖ NE PAS d√©truire le ShopSystem, juste noter le changement de sc√®ne
    if (this.shopSystem && this.shopSystem.isShopOpen()) {
      console.log(`üè™ [${this.scene.scene.key}] Shop ouvert pendant changement de sc√®ne, pr√©servation`);
      // On peut √©ventuellement sauvegarder l'√©tat ici
    }
    
    this.isInitialized = false;
  }

  // ‚úÖ Gestion de la destruction de sc√®ne
  handleSceneDestroy() {
    // ‚úÖ Cleanup l√©ger seulement
    this.scene = null;
    this.isInitialized = false;
    
    // ‚úÖ NE PAS toucher au ShopSystem global
    console.log(`üè™ [ShopIntegration] R√©f√©rences de sc√®ne nettoy√©es`);
  }

  // ‚úÖ M√âTHODES UTILITAIRES PUBLIQUES

  // Obtenir le ShopSystem actuel
  getShopSystem() {
    return this.shopSystem;
  }

  // V√©rifier si le shop est initialis√©
  isShopInitialized() {
    return this.isInitialized && this.shopSystem !== null;
  }

  // Forcer une r√©initialisation
  forceReinitialize(networkManager) {
    console.log(`üîÑ [${this.scene.scene.key}] R√©initialisation forc√©e du shop`);
    this.isInitialized = false;
    this.shopSystem = null;
    this.shopHandlersSetup = false;
    this.isHandlingShopInteraction = false;
    this.isHandlingCatalog = false;
    this.initialize(networkManager);
  }

  // ‚úÖ M√âTHODES DE DEBUG

  // Debug de l'√©tat du shop
  debugShopState() {
    console.log(`üîç [${this.scene.scene.key}] === DEBUG SHOP INTEGRATION ===`);
    console.log(`- Initialis√©:`, this.isInitialized);
    console.log(`- ShopSystem:`, !!this.shopSystem);
    console.log(`- Handlers setup:`, this.shopHandlersSetup);
    console.log(`- Handling interaction:`, this.isHandlingShopInteraction);
    console.log(`- Handling catalog:`, this.isHandlingCatalog);
    console.log(`- Shop ouvert:`, this.shopSystem?.isShopOpen());
    console.log(`- ShopUI:`, !!this.shopSystem?.shopUI);
    console.log(`- GameRoom:`, !!this.shopSystem?.gameRoom);
    
    if (this.shopSystem && typeof this.shopSystem.debugShopState === 'function') {
      this.shopSystem.debugShopState();
    }
  }

  // Stats de l'int√©gration
  getIntegrationStats() {
    return {
      sceneKey: this.scene.scene.key,
      isInitialized: this.isInitialized,
      hasShopSystem: !!this.shopSystem,
      shopOpen: this.shopSystem?.isShopOpen() || false,
      canInteract: this.canPlayerInteractWithShop(),
      handlersSetup: this.shopHandlersSetup,
      handlingInteraction: this.isHandlingShopInteraction,
      handlingCatalog: this.isHandlingCatalog
    };
  }
}

// ‚úÖ M√âTHODE STATIQUE POUR INT√âGRATION EN UNE LIGNE
export function integrateShopToScene(scene, networkManager) {
  if (!scene.shopIntegration) {
    scene.shopIntegration = new ShopIntegration(scene);
  }
  
  scene.shopIntegration.initialize(networkManager);
  
  console.log(`üè™ [${scene.scene.key}] Shop int√©gr√© en une ligne`);
  return scene.shopIntegration;
}

// ‚úÖ EXPORT PAR D√âFAUT
export default ShopIntegration;

// client/src/game/ShopIntegration.js - AM√âLIORATIONS POUR INT√âGRATION

// ‚úÖ AM√âLIORER handleShopNpcInteraction
handleShopNpcInteraction(data) {
  console.log(`üè™ [ShopIntegration] === GESTION INTERACTION SHOP ===`);
  console.log(`üìä Data re√ßue:`, data);
  console.log(`üéØ Scene: ${this.scene.scene.key}`);
  console.log(`üõ†Ô∏è ShopSystem existe: ${!!this.shopSystem}`);
  
  if (!this.shopSystem) {
    console.error(`‚ùå [${this.scene.scene.key}] Pas de ShopSystem pour g√©rer l'interaction shop`);
    this.showMessage("Syst√®me de shop non disponible", 'error');
    return;
  }

  try {
    // ‚úÖ Validation et enrichissement des donn√©es
    const enrichedData = this.enrichShopData(data);
    console.log(`üì¶ [ShopIntegration] Donn√©es enrichies:`, enrichedData);
    
    // ‚úÖ D√©l√©guer au ShopSystem
    this.shopSystem.handleShopNpcInteraction(enrichedData);
    
    console.log(`‚úÖ [ShopIntegration] Shop delegu√© avec succ√®s`);
    
  } catch (error) {
    console.error(`‚ùå [${this.scene.scene.key}] Erreur gestion interaction shop:`, error);
    this.showMessage(`Erreur shop: ${error.message}`, 'error');
  }
}

// ‚úÖ NOUVELLE M√âTHODE: Enrichir les donn√©es de shop
enrichShopData(data) {
  console.log(`üîß [ShopIntegration] Enrichissement des donn√©es shop...`);
  
  // ‚úÖ Donn√©es de base garanties
  const enriched = {
    type: "shop",
    npcId: data.npcId || data.id,
    npcName: data.npcName || data.name || "Marchand",
    shopId: data.shopId || data.npcId || data.id || 'general_shop',
    ...data // Pr√©server toutes les donn√©es originales
  };
  
  // ‚úÖ Enrichir shopData si manquant
  if (!enriched.shopData) {
    enriched.shopData = {
      shopInfo: {
        id: enriched.shopId,
        name: enriched.npcName,
        description: "Articles pour dresseurs"
      },
      availableItems: data.availableItems || data.items || [],
      playerGold: data.playerGold || 0
    };
  }
  
  // ‚úÖ S'assurer que shopInfo existe
  if (enriched.shopData && !enriched.shopData.shopInfo) {
    enriched.shopData.shopInfo = {
      id: enriched.shopId,
      name: enriched.npcName,
      description: "Articles pour dresseurs"
    };
  }
  
  console.log(`‚úÖ [ShopIntegration] Donn√©es enrichies:`, {
    shopId: enriched.shopId,
    npcName: enriched.npcName,
    hasShopData: !!enriched.shopData,
    itemsCount: enriched.shopData?.availableItems?.length || 0
  });
  
  return enriched;
}

// ‚úÖ NOUVELLE M√âTHODE: V√©rifier l'√©tat de l'int√©gration shop
validateShopIntegration() {
  console.log(`üîç [ShopIntegration] === VALIDATION INT√âGRATION ===`);
  
  const checks = {
    hasShopSystem: !!this.shopSystem,
    shopSystemInitialized: this.shopSystem?.isInitialized || false,
    hasShopUI: !!this.shopSystem?.shopUI,
    hasGameRoom: !!this.shopSystem?.gameRoom,
    isInitialized: this.isInitialized,
    sceneKey: this.scene.scene.key
  };
  
  console.log(`üìä [ShopIntegration] √âtat de l'int√©gration:`, checks);
  
  const isValid = checks.hasShopSystem && 
                 checks.shopSystemInitialized && 
                 checks.hasShopUI && 
                 checks.hasGameRoom && 
                 checks.isInitialized;
  
  if (!isValid) {
    console.error(`‚ùå [ShopIntegration] Int√©gration invalide:`, checks);
    return false;
  }
  
  console.log(`‚úÖ [ShopIntegration] Int√©gration valide`);
  return true;
}

// ‚úÖ AM√âLIORER initialize pour plus de robustesse
initialize(networkManager) {
  if (this.isInitialized || !networkManager) {
    console.log(`üè™ [${this.scene.scene.key}] Shop d√©j√† initialis√© ou pas de NetworkManager`);
    return;
  }

  try {
    console.log(`üè™ [${this.scene.scene.key}] === INITIALISATION SHOP SYSTEM ===`);

    // 1. ‚úÖ V√©rifier et r√©utiliser l'instance globale
    if (window.shopSystem && this.validateExistingShopSystem(window.shopSystem)) {
      console.log(`üîÑ [${this.scene.scene.key}] R√©utilisation du ShopSystem global existant`);
      this.shopSystem = window.shopSystem;
      this.updateShopSystemScene(networkManager);
    } else {
      // 2. ‚úÖ Cr√©er une nouvelle instance
      console.log(`üÜï [${this.scene.scene.key}] Cr√©ation d'un nouveau ShopSystem`);
      this.shopSystem = new ShopSystem(this.scene, networkManager.room);
      window.shopSystem = this.shopSystem;
    }

    // 3. ‚úÖ Setup des √©v√©nements et raccourcis
    this.setupShopEventHandlers();
    this.setupShopNetworkHandlers(networkManager);

    // 4. ‚úÖ Marquer comme initialis√©
    this.isInitialized = true;
    
    // 5. ‚úÖ Validation finale
    if (this.validateShopIntegration()) {
      console.log(`‚úÖ [${this.scene.scene.key}] ShopIntegration initialis√© avec succ√®s`);
    } else {
      throw new Error("Validation de l'int√©gration √©chou√©e");
    }

    // 6. ‚úÖ Test optionnel apr√®s initialisation
    this.testShopIntegration();

  } catch (error) {
    console.error(`‚ùå [${this.scene.scene.key}] Erreur initialisation ShopIntegration:`, error);
    this.isInitialized = false;
  }
}

// ‚úÖ AM√âLIORER setupShopNetworkHandlers avec plus de handlers
setupShopNetworkHandlers(networkManager) {
  if (!networkManager || !networkManager.room) return;

  try {
    const room = networkManager.room;

    // ‚úÖ Handler principal pour les interactions NPC de type shop
    room.onMessage("npcInteractionResult", (data) => {
      if (data.type === "shop" || data.shopId || (data.npcType && data.npcType === "merchant")) {
        console.log(`üè™ [${this.scene.scene.key}] Interaction shop re√ßue:`, data);
        this.handleShopNpcInteraction(data);
      }
    });

    // ‚úÖ Handler pour les r√©sultats de transaction shop
    room.onMessage("shopTransactionResult", (data) => {
      console.log(`üí∞ [${this.scene.scene.key}] R√©sultat transaction shop:`, data);
      if (this.shopSystem && this.shopSystem.handleTransactionResult) {
        this.shopSystem.handleTransactionResult(data);
      }
    });

    // ‚úÖ Handler pour le catalogue shop
    room.onMessage("shopCatalogResult", (data) => {
      console.log(`üìã [${this.scene.scene.key}] Catalogue shop re√ßu:`, data);
      if (this.shopSystem && this.shopSystem.shopUI && this.shopSystem.shopUI.handleShopCatalog) {
        this.shopSystem.shopUI.handleShopCatalog(data);
      }
    });

    // ‚úÖ Handler pour les mises √† jour d'or
    room.onMessage("goldUpdate", (data) => {
      console.log(`üí∞ [${this.scene.scene.key}] Mise √† jour or:`, data);
      if (this.shopSystem && this.shopSystem.updatePlayerGold) {
        this.shopSystem.updatePlayerGold(data.newGold, data.oldGold);
      }
    });

    // ‚úÖ Handler pour le refresh de shop
    room.onMessage("shopRefreshResult", (data) => {
      console.log(`üîÑ [${this.scene.scene.key}] Refresh shop:`, data);
      if (this.shopSystem && this.shopSystem.shopUI && this.shopSystem.shopUI.handleRefreshResult) {
        this.shopSystem.shopUI.handleRefreshResult(data);
      }
    });

    console.log(`üì° [${this.scene.scene.key}] Handlers r√©seau shop configur√©s`);
    
  } catch (error) {
    console.error(`‚ùå [${this.scene.scene.key}] Erreur setup handlers shop:`, error);
  }
}

// ‚úÖ AM√âLIORER testShopIntegration pour plus de tests
testShopIntegration() {
  if (!this.shopSystem) return;

  this.scene.time.delayedCall(1000, () => {
    try {
      console.log(`üß™ [${this.scene.scene.key}] === TEST INT√âGRATION SHOP ===`);
      
      const tests = [
        {
          name: "ShopSystem exists",
          test: () => !!this.shopSystem
        },
        {
          name: "ShopSystem initialized", 
          test: () => this.shopSystem.isInitialized
        },
        {
          name: "ShopUI exists",
          test: () => !!this.shopSystem.shopUI
        },
        {
          name: "GameRoom connection",
          test: () => !!this.shopSystem.gameRoom
        },
        {
          name: "Integration initialized",
          test: () => this.isInitialized
        },
        {
          name: "CanPlayerInteract works",
          test: () => typeof this.shopSystem.canPlayerInteract === 'function'
        },
        {
          name: "HandleShopNpcInteraction works",
          test: () => typeof this.shopSystem.handleShopNpcInteraction === 'function'
        }
      ];

      const results = tests.map(test => {
        try {
          const result = test.test();
          console.log(`  ‚úÖ ${test.name}: ${result ? 'PASS' : 'FAIL'}`);
          return result;
        } catch (error) {
          console.log(`  ‚ùå ${test.name}: ERROR - ${error.message}`);
          return false;
        }
      });

      const passedTests = results.filter(Boolean).length;
      const totalTests = tests.length;

      console.log(`üß™ [${this.scene.scene.key}] Tests shop: ${passedTests}/${totalTests} r√©ussis`);

      if (passedTests === totalTests) {
        console.log(`‚úÖ [${this.scene.scene.key}] Int√©gration shop compl√®tement valid√©e`);
        
        // ‚úÖ Test bonus: essayer une interaction factice
        this.testMockShopInteraction();
      } else {
        console.warn(`‚ö†Ô∏è [${this.scene.scene.key}] Int√©gration shop partiellement fonctionnelle (${passedTests}/${totalTests})`);
      }

    } catch (error) {
      console.error(`‚ùå [${this.scene.scene.key}] Erreur test int√©gration shop:`, error);
    }
  });
}

// ‚úÖ NOUVELLE M√âTHODE: Test d'interaction factice
testMockShopInteraction() {
  if (!this.shopSystem || !this.validateShopIntegration()) {
    console.log(`‚ö†Ô∏è [${this.scene.scene.key}] Skip test mock - int√©gration non valide`);
    return;
  }
  
  console.log(`üß™ [${this.scene.scene.key}] Test interaction shop factice...`);
  
  // ‚úÖ Cr√©er des donn√©es d'interaction factices
  const mockData = {
    type: "shop",
    npcId: "test_merchant",
    npcName: "Marchand Test",
    shopId: "test_shop",
    shopData: {
      shopInfo: {
        id: "test_shop",
        name: "Marchand Test",
        description: "Shop de test"
      },
      availableItems: [],
      playerGold: 1000
    }
  };
  
  try {
    // ‚úÖ Tester l'enrichissement des donn√©es
    const enriched = this.enrichShopData(mockData);
    console.log(`  ‚úÖ Enrichissement: OK`);
    
    // ‚úÖ Tester canPlayerInteract
    const canInteract = this.shopSystem.canPlayerInteract();
    console.log(`  ‚úÖ CanPlayerInteract: ${canInteract}`);
    
    console.log(`‚úÖ [${this.scene.scene.key}] Test mock shop r√©ussi`);
    
  } catch (error) {
    console.error(`‚ùå [${this.scene.scene.key}] Test mock shop √©chou√©:`, error);
  }
}

// ‚úÖ NOUVELLE M√âTHODE: Debug complet de l'√©tat
debugShopState() {
  console.log(`üîç [${this.scene.scene.key}] === DEBUG SHOP INTEGRATION ===`);
  console.log(`- Scene Key: ${this.scene.scene.key}`);
  console.log(`- Initialis√©: ${this.isInitialized}`);
  console.log(`- ShopSystem: ${!!this.shopSystem}`);
  console.log(`- Shop ouvert: ${this.shopSystem?.isShopOpen()}`);
  console.log(`- ShopUI: ${!!this.shopSystem?.shopUI}`);
  console.log(`- GameRoom: ${!!this.shopSystem?.gameRoom}`);
  console.log(`- CanInteract: ${this.shopSystem?.canPlayerInteract()}`);
  
  if (this.shopSystem && typeof this.shopSystem.debugShopState === 'function') {
    this.shopSystem.debugShopState();
  }
  
  console.log(`=== FIN DEBUG SHOP INTEGRATION ===`);
}

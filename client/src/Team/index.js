// Team/index.js - Module Team Unifi√© CORRIG√â avec Singleton
// üéØ √âVITE LA DOUBLE INITIALISATION avec pattern Singleton
// üìç INT√âGR√â avec UIManager pour positionnement automatique

import { TeamManager } from './TeamManager.js';
import { TeamIcon } from './TeamIcon.js';
import { TeamUI } from './TeamUI.js';
console.trace('üîç TEAM MODULE CHARG√â - Trace:');
/**
 * Module Team Unifi√© avec Singleton Pattern
 * Compatible avec UIManager simplifi√©
 * API simple: show(), hide(), setEnabled()
 */
export class TeamModule {
  constructor(gameRoom, scene) {
    // üÜï SINGLETON PATTERN - √âVITER DOUBLE INITIALISATION
    if (TeamModule.instance) {
      console.log('‚ôªÔ∏è [TeamModule] Instance existante d√©tect√©e, r√©utilisation');
      return TeamModule.instance;
    }
    
    this.gameRoom = gameRoom;
    this.scene = scene;
    
    // === INSTANCES DES COMPOSANTS ===
    this.manager = null;
    this.icon = null;
    this.ui = null;
    
    // === √âTAT UIManager ===
    this.uiManagerState = {
      visible: true,        // Ic√¥ne visible par d√©faut
      enabled: true,        // Module activ√©
      initialized: false    // Non encore initialis√©
    };
    
    // üÜï SINGLETON - STOCKER L'INSTANCE
    TeamModule.instance = this;
    
    console.log('‚öîÔ∏è [TeamModule] Nouvelle instance cr√©√©e (singleton)');
  }
  
  // üÜï M√âTHODES STATIQUES SINGLETON
  static getInstance() {
    return TeamModule.instance || null;
  }
  
  static reset() {
    if (TeamModule.instance) {
      TeamModule.instance.destroy();
      TeamModule.instance = null;
    }
  }
  
  static hasInstance() {
    return TeamModule.instance !== null;
  }
  
  // === üöÄ INITIALISATION PROT√âG√âE ===
  
  async init() {
    try {
      // üÜï √âVITER DOUBLE INITIALISATION
      if (this.uiManagerState.initialized) {
        console.log('‚ÑπÔ∏è [TeamModule] D√©j√† initialis√©, retour instance existante');
        return this;
      }
      
      console.log('üöÄ [TeamModule] Initialisation (singleton protection)...');
      
      // 1. Cr√©er le manager (business logic)
      this.manager = new TeamManager(this.gameRoom);
      await this.manager.init();
      
      // 2. Cr√©er l'ic√¥ne
      this.icon = new TeamIcon(this.manager);
      this.icon.init();
      
      // 3. Cr√©er l'interface
      this.ui = new TeamUI(this.manager, this.gameRoom);
      await this.ui.init();
      
      // 4. Connecter les composants
      this.connectComponents();
      
      // üÜï 5. MARQUER COMME INITIALIS√â (PROTECTION)
      this.uiManagerState.initialized = true;
      
      // üÜï 6. FERMER L'UI PAR D√âFAUT (√©viter ouverture automatique)
      this.forceCloseUI();
      
      console.log('‚úÖ [TeamModule] Initialis√© avec protection singleton');
      return this;
      
    } catch (error) {
      console.error('‚ùå [TeamModule] Erreur initialisation:', error);
      throw error;
    }
  }
  
  // === üìç CONNEXION UIMANAGER S√âCURIS√âE ===
  
  connectUIManager(uiManager) {
    console.log('üìç [TeamModule] Connexion UIManager S√âCURIS√âE...');
    
    if (!uiManager || !uiManager.registerIconPosition) {
      console.warn('‚ö†Ô∏è [TeamModule] UIManager incompatible');
      return false;
    }
    
    if (!this.icon || !this.icon.iconElement) {
      console.warn('‚ö†Ô∏è [TeamModule] Ic√¥ne non disponible pour UIManager');
      return false;
    }
    
    // üÜï V√âRIFIER SI D√âJ√Ä CONNECT√â (√©viter double connexion)
    if (this.icon.iconElement.hasAttribute('data-positioned-by-uimanager')) {
      console.log('‚ÑπÔ∏è [TeamModule] D√©j√† connect√© √† UIManager, skip');
      return true;
    }
    
    // Configuration pour UIManager
    const iconConfig = {
      anchor: 'bottom-right',
      order: 2,           // Apr√®s inventory (0) et quest (1)
      group: 'ui-icons',
      spacing: 10,
      size: { width: 70, height: 80 }
    };
    
    try {
      // Enregistrer l'ic√¥ne pour positionnement automatique
      uiManager.registerIconPosition('team', this.icon.iconElement, iconConfig);
      
      // üÜï MARQUER COMME CONNECT√â
      this.icon.iconElement.setAttribute('data-positioned-by-uimanager', 'true');
      
      console.log('‚úÖ [TeamModule] Connect√© √† UIManager avec succ√®s');
      return true;
      
    } catch (error) {
      console.error('‚ùå [TeamModule] Erreur connexion UIManager:', error);
      return false;
    }
  }
  
  // üÜï M√âTHODE POUR ASSURER LA CR√âATION D'IC√îNE
  ensureIconForUIManager() {
    console.log('üîß [TeamModule] V√©rification ic√¥ne pour UIManager...');
    
    if (!this.icon) {
      console.log('üÜï [TeamModule] Cr√©ation ic√¥ne manquante...');
      this.icon = new TeamIcon(this.manager);
      this.icon.init();
      
      // Reconnecter les √©v√©nements
      this.connectComponents();
    }
    
    if (!this.icon.iconElement) {
      console.warn('‚ùå [TeamModule] Impossible de cr√©er iconElement');
      return false;
    }
    
    // Reset l'√©tat de positionnement
    this.icon.iconElement.removeAttribute('data-positioned-by-uimanager');
    
    console.log('‚úÖ [TeamModule] Ic√¥ne pr√™te pour UIManager');
    return true;
  }
  
  // üÜï M√âTHODE POUR FORCER FERMETURE UI
  forceCloseUI() {
    console.log('üîí [TeamModule] Force fermeture UI...');
    
    try {
      // M√©thode 1: Via le module UI
      if (this.ui && this.ui.hide) {
        this.ui.hide();
        console.log('  ‚úÖ UI ferm√©e via module');
      }
      
      // M√©thode 2: Fermeture brutale overlay
      const teamOverlay = document.querySelector('#team-overlay');
      if (teamOverlay) {
        teamOverlay.classList.add('hidden');
        teamOverlay.style.display = 'none';
        teamOverlay.style.opacity = '0';
        teamOverlay.style.pointerEvents = 'none';
        console.log('  ‚úÖ Overlay ferm√© brutalement');
      }
      
      // M√©thode 3: Tous les √©l√©ments team potentiels
      const teamElements = document.querySelectorAll(
        '.team-overlay, .team-modal, .team-interface, [id*="team-"]'
      );
      teamElements.forEach(el => {
        if (el.style) {
          el.style.display = 'none';
        }
      });
      
      if (teamElements.length > 0) {
        console.log(`  ‚úÖ ${teamElements.length} √©l√©ments Team ferm√©s`);
      }
      
      // üÜï Marquer UI comme ferm√©e
      if (this.ui) {
        this.ui.isVisible = false;
      }
      
      console.log('‚úÖ [TeamModule] UI ferm√©e avec succ√®s (force)');
      
    } catch (error) {
      console.error('‚ùå [TeamModule] Erreur force fermeture:', error);
    }
  }
  
  // === üîó CONNEXION DES COMPOSANTS ===
  
  connectComponents() {
    // Ic√¥ne ‚Üí Interface (clic ouvre l'interface)
    this.icon.onClick = () => {
      if (this.canOpenTeamUI()) {
        this.ui.toggle();
      } else {
        this.showCannotOpenMessage();
      }
    };
    
    // Manager ‚Üí Ic√¥ne (mise √† jour des stats)
    this.manager.onStatsUpdate = (stats) => {
      this.icon.updateStats(stats);
    };
    
    // Manager ‚Üí Interface (mise √† jour des donn√©es)
    this.manager.onTeamDataUpdate = (data) => {
      this.ui.updateTeamData(data);
      
      // Si l'UI est visible, forcer un refresh
      if (this.ui.isVisible) {
        setTimeout(() => {
          this.ui.refreshCompleteDisplay();
          this.ui.updateCompleteStats();
        }, 100);
      }
    };
    
    // Interface ‚Üí Manager (actions utilisateur)
    this.ui.onAction = (action, data) => {
      this.manager.handleAction(action, data);
    };
  }
  
  // === üéõÔ∏è M√âTHODES UIMANAGER (INTERFACE PRINCIPALE) ===
  
  /**
   * UIManager appelle cette m√©thode pour afficher le module
   */
  show() {
    this.uiManagerState.visible = true;
    
    // Afficher l'ic√¥ne
    if (this.icon) {
      this.icon.show();
    }
    
    // Demander une mise √† jour des donn√©es
    if (this.manager) {
      setTimeout(() => {
        this.manager.requestTeamData();
      }, 200);
    }
    
    return true;
  }
  
  /**
   * UIManager appelle cette m√©thode pour cacher le module
   */
  hide() {
    this.uiManagerState.visible = false;
    
    // Cacher l'ic√¥ne
    if (this.icon) {
      this.icon.hide();
    }
    
    // Cacher l'interface si ouverte
    if (this.ui && this.ui.isVisible) {
      this.ui.hide();
    }
    
    return true;
  }
  
  /**
   * UIManager appelle cette m√©thode pour activer/d√©sactiver
   */
  setEnabled(enabled) {
    this.uiManagerState.enabled = enabled;
    
    // Appliquer aux composants
    if (this.icon) {
      this.icon.setEnabled(enabled);
    }
    
    if (this.ui) {
      this.ui.setEnabled(enabled);
    }
    
    return true;
  }
  
  /**
   * UIManager peut appeler cette m√©thode pour obtenir l'√©tat
   */
  getUIManagerState() {
    return {
      ...this.uiManagerState,
      iconVisible: this.icon ? this.icon.isVisible : false,
      interfaceVisible: this.ui ? this.ui.isVisible : false,
      teamCount: this.manager ? this.manager.getTeamCount() : 0,
      canBattle: this.manager ? this.manager.canBattle() : false,
      singleton: true,
      instanceId: this.constructor.name + '_' + (this.gameRoom?.id || 'unknown')
    };
  }
  
  // === üîß GESTION √âTAT INTERNE ===
  
  applyUIManagerState() {
    if (!this.uiManagerState.initialized) return;
    
    // Appliquer visibilit√©
    if (this.uiManagerState.visible) {
      this.icon?.show();
    } else {
      this.icon?.hide();
      this.ui?.hide();
    }
    
    // Appliquer √©tat enabled
    this.icon?.setEnabled(this.uiManagerState.enabled);
    this.ui?.setEnabled(this.uiManagerState.enabled);
  }
  
  canOpenTeamUI() {
    // V√©rifier si on peut ouvrir l'interface
    const blockers = [
      document.querySelector('.quest-dialog-overlay'),
      document.querySelector('#dialogue-box:not([style*="display: none"])'),
      document.querySelector('#shop-overlay:not(.hidden)')
    ];
    
    const hasBlocker = blockers.some(el => el !== null);
    const chatFocused = typeof window.isChatFocused === 'function' ? window.isChatFocused() : false;
    const inventoryOpen = typeof window.isInventoryOpen === 'function' ? window.isInventoryOpen() : false;
    
    return !hasBlocker && !chatFocused && !inventoryOpen && this.uiManagerState.enabled;
  }
  
  showCannotOpenMessage() {
    if (typeof window.showGameNotification === 'function') {
      window.showGameNotification('Cannot open team right now', 'warning', {
        duration: 2000,
        position: 'bottom-center'
      });
    }
  }
  
  // === üìä API PUBLIQUE POUR COMPATIBILIT√â ===
  
  /**
   * Ouvrir/fermer l'interface Team
   */
  toggleTeamUI() {
    if (this.ui) {
      this.ui.toggle();
    }
  }
  
  /**
   * Ouvrir l'interface Team
   */
  openTeam() {
    if (this.ui && this.canOpenTeamUI()) {
      this.ui.show();
    }
  }
  
  /**
   * Fermer l'interface Team
   */
  closeTeam() {
    if (this.ui) {
      this.ui.hide();
    }
  }
  
  /**
   * Obtenir les donn√©es d'√©quipe
   */
  getTeamData() {
    return this.manager ? this.manager.getTeamData() : [];
  }
  
  /**
   * Obtenir les statistiques d'√©quipe
   */
  getTeamStats() {
    return this.manager ? this.manager.getTeamStats() : null;
  }
  
  /**
   * V√©rifier si l'√©quipe peut combattre
   */
  canBattle() {
    return this.manager ? this.manager.canBattle() : false;
  }
  
  /**
   * Soigner toute l'√©quipe
   */
  healTeam() {
    if (this.manager) {
      this.manager.healTeam();
    }
  }
  
  // === üßπ NETTOYAGE SINGLETON ===
  
  destroy() {
    try {
      console.log('üßπ [TeamModule] Destruction avec nettoyage singleton...');
      
      // D√©truire les composants dans l'ordre inverse
      if (this.ui) {
        this.ui.destroy();
        this.ui = null;
      }
      
      if (this.icon) {
        this.icon.destroy();
        this.icon = null;
      }
      
      if (this.manager) {
        this.manager.destroy();
        this.manager = null;
      }
      
      // Reset √©tat
      this.uiManagerState.initialized = false;
      
      // üÜï RESET SINGLETON
      if (TeamModule.instance === this) {
        TeamModule.instance = null;
        console.log('üßπ [TeamModule] Singleton reset√©');
      }
      
      console.log('‚úÖ [TeamModule] Destruction termin√©e');
      
    } catch (error) {
      console.error('‚ùå [TeamModule] Erreur destruction:', error);
    }
  }
}

// üÜï VARIABLE STATIQUE POUR SINGLETON
TeamModule.instance = null;

// === üè≠ FACTORY CORRIG√âE AVEC GESTION UIMANAGER ===

/**
 * Factory function pour cr√©er le module Team
 * Compatible avec UIManager et Singleton
 */
export async function createTeamModule(gameRoom, scene) {
  try {
    console.log('üè≠ [TeamFactory] Cr√©ation/r√©cup√©ration module Team...');
    
    // üÜï V√âRIFIER SI INSTANCE SINGLETON EXISTE
    let existingInstance = TeamModule.getInstance();
    
    if (existingInstance && existingInstance.uiManagerState.initialized) {
      console.log('‚ôªÔ∏è [TeamFactory] Instance singleton trouv√©e, pr√©paration pour UIManager...');
      
      // üÜï FERMER L'UI SI ELLE EST OUVERTE (√©viter conflit)
      existingInstance.forceCloseUI();
      
      // üÜï ASSURER QUE L'IC√îNE EST DISPONIBLE POUR UIMANAGER
      if (existingInstance.icon && existingInstance.icon.iconElement) {
        console.log('‚úÖ [TeamFactory] Ic√¥ne disponible pour UIManager');
        
        // R√©initialiser l'√©tat de positionnement pour UIManager
        existingInstance.icon.iconElement.removeAttribute('data-positioned-by-uimanager');
        
        // V√©rifier la compatibilit√© gameRoom
        if (existingInstance.gameRoom !== gameRoom) {
          console.log('üîÑ [TeamFactory] GameRoom diff√©rent, mise √† jour...');
          existingInstance.gameRoom = gameRoom;
          existingInstance.scene = scene;
          
          // Reconnecter le manager si n√©cessaire
          if (existingInstance.manager) {
            existingInstance.manager.gameRoom = gameRoom;
          }
        }
        
        return existingInstance;
      } else {
        console.warn('‚ö†Ô∏è [TeamFactory] Instance sans ic√¥ne, recr√©ation...');
        // Reset singleton si ic√¥ne manquante
        TeamModule.reset();
      }
    }
    
    // üÜï CR√âER NOUVELLE INSTANCE
    console.log('üÜï [TeamFactory] Cr√©ation nouvelle instance singleton...');
    const teamModule = new TeamModule(gameRoom, scene);
    await teamModule.init();
    
    console.log('‚úÖ [TeamFactory] Module Team cr√©√© avec succ√®s (singleton)');
    return teamModule;
    
  } catch (error) {
    console.error('‚ùå [TeamFactory] Erreur cr√©ation module Team:', error);
    throw error;
  }
}

// === üìã CONFIGURATION POUR UIMANAGER MISE √Ä JOUR ===

export const TEAM_MODULE_CONFIG = {
  id: 'team',
  factory: () => createTeamModule(window.currentGameRoom, window.game?.scene?.getScenes(true)[0]),
  
  defaultState: {
    visible: true,     // Ic√¥ne visible par d√©faut
    enabled: true,     // Module activ√©
    initialized: false
  },
  
  priority: 100,
  critical: false,
  
  layout: {
    type: 'icon',
    anchor: 'bottom-right',
    order: 2,           // Apr√®s inventory (0) et quest (1)
    spacing: 10
  },
  
  responsive: {
    mobile: { 
      scale: 0.8,
      position: { right: '15px', bottom: '15px' }
    },
    tablet: { 
      scale: 0.9 
    },
    desktop: { 
      scale: 1.0 
    }
  },
  
  groups: ['ui-icons', 'pokemon-management'],
  
  animations: {
    show: { type: 'fadeIn', duration: 300, easing: 'ease-out' },
    hide: { type: 'fadeOut', duration: 200, easing: 'ease-in' },
    enable: { type: 'pulse', duration: 150 },
    disable: { type: 'grayscale', duration: 200 }
  },
  
  metadata: {
    name: 'Team Manager',
    description: 'Complete Pokemon team management system (Singleton)',
    version: '1.1.1',
    category: 'Pokemon Management',
    singleton: true
  }
};

// === üîó INT√âGRATION AVEC UIMANAGER AM√âLIOR√âE ===

/**
 * Enregistrer le module Team dans UIManager avec protection singleton
 */
export async function registerTeamModule(uiManager) {
  try {
    console.log('üìù [TeamIntegration] Enregistrement avec protection singleton...');
    
    // üÜï V√âRIFIER SI D√âJ√Ä ENREGISTR√â
    if (uiManager.modules && uiManager.modules.has('team')) {
      console.log('‚ÑπÔ∏è [TeamIntegration] Module d√©j√† enregistr√©');
      return true;
    }
    
    await uiManager.registerModule('team', TEAM_MODULE_CONFIG);
    console.log('‚úÖ [TeamIntegration] Module enregistr√©');
    
    return true;
  } catch (error) {
    console.error('‚ùå [TeamIntegration] Erreur enregistrement:', error);
    throw error;
  }
}

/**
 * Initialiser et connecter le module Team avec protection
 */
export async function initializeTeamModule(uiManager) {
  try {
    console.log('üöÄ [TeamIntegration] Initialisation avec protection...');
    
    // Enregistrer le module
    await registerTeamModule(uiManager);
    
    // üÜï V√âRIFIER SI D√âJ√Ä INITIALIS√â
    let teamInstance = TeamModule.getInstance();
    
    if (!teamInstance || !teamInstance.uiManagerState.initialized) {
      // Initialiser le module
      teamInstance = await uiManager.initializeModule('team');
    } else {
      console.log('‚ÑπÔ∏è [TeamIntegration] Instance d√©j√† initialis√©e');
      
      // Connecter √† UIManager si pas encore fait
      if (teamInstance.connectUIManager) {
        teamInstance.connectUIManager(uiManager);
      }
    }
    
    // Setup des raccourcis clavier
    setupTeamKeyboardShortcuts(teamInstance);
    
    // Setup des √©v√©nements globaux
    setupTeamGlobalEvents(teamInstance);
    
    console.log('‚úÖ [TeamIntegration] Initialisation termin√©e');
    return teamInstance;
    
  } catch (error) {
    console.error('‚ùå [TeamIntegration] Erreur initialisation:', error);
    throw error;
  }
}

// === ‚å®Ô∏è RACCOURCIS CLAVIER ===

function setupTeamKeyboardShortcuts(teamInstance) {
  // √âviter double setup
  if (window._teamKeyboardSetup) {
    console.log('‚ÑπÔ∏è [TeamKeyboard] Raccourcis d√©j√† configur√©s');
    return;
  }
  
  document.addEventListener('keydown', (e) => {
    // Touche T pour ouvrir/fermer Team
    if (e.key.toLowerCase() === 't' && 
        !e.target.matches('input, textarea, [contenteditable]') &&
        !e.ctrlKey && !e.altKey && !e.metaKey) {
      
      e.preventDefault();
      
      if (teamInstance.canOpenTeamUI()) {
        teamInstance.toggleTeamUI();
      }
    }
  });
  
  window._teamKeyboardSetup = true;
  console.log('‚å®Ô∏è [TeamKeyboard] Raccourcis configur√©s');
}

// === üåê √âV√âNEMENTS GLOBAUX ===

function setupTeamGlobalEvents(teamInstance) {
  // √âviter double setup
  if (window._teamEventsSetup) {
    console.log('‚ÑπÔ∏è [TeamEvents] √âv√©nements d√©j√† configur√©s');
    return;
  }
  
  // √âv√©nement: Pok√©mon captur√©
  window.addEventListener('pokemonCaught', (event) => {
    if (teamInstance.manager) {
      teamInstance.manager.handlePokemonCaught(event.detail);
    }
  });
  
  // √âv√©nement: Combat commenc√©
  window.addEventListener('battleStarted', () => {
    if (teamInstance.ui && teamInstance.ui.isVisible) {
      teamInstance.ui.hide();
    }
  });
  
  // √âv√©nement: Centre Pok√©mon
  window.addEventListener('pokemonCenterEntered', () => {
    if (teamInstance.manager) {
      teamInstance.manager.requestTeamData(); // Refresh data
    }
  });
  
  window._teamEventsSetup = true;
  console.log('üåê [TeamEvents] √âv√©nements configur√©s');
}

// === üí° UTILISATION SIMPLE MISE √Ä JOUR ===

/**
 * Fonction d'utilisation simple pour int√©grer Team dans un projet
 */
export async function setupTeamSystem(uiManager) {
  try {
    console.log('üîß [TeamSetup] Configuration syst√®me Team...');
    
    // Initialiser le module
    const teamInstance = await initializeTeamModule(uiManager);
    
    // Exposer globalement pour compatibilit√© (√©viter double)
    if (!window.teamSystem) {
      window.teamSystem = teamInstance;
      window.teamSystemGlobal = teamInstance;
      window.toggleTeam = () => teamInstance.toggleTeamUI();
      window.openTeam = () => teamInstance.openTeam();
      window.closeTeam = () => teamInstance.closeTeam();
      
      // üÜï FONCTION DE FORCE FERMETURE
      window.forceCloseTeam = () => teamInstance.forceCloseUI();
      
      console.log('üåê [TeamSetup] Fonctions globales expos√©es');
    }
    
    console.log('‚úÖ [TeamSetup] Syst√®me Team configur√© (singleton)');
    return teamInstance;
    
  } catch (error) {
    console.error('‚ùå [TeamSetup] Erreur configuration:', error);
    throw error;
  }
}

// === üìã EXPORT PAR D√âFAUT ===

export default TeamModule;

// === üîç UTILIT√âS DE DEBUG SINGLETON ===

export function debugTeamSingleton() {
  const instance = TeamModule.getInstance();
  
  const info = {
    hasSingleton: !!instance,
    isInitialized: instance ? instance.uiManagerState.initialized : false,
    hasIcon: instance ? !!instance.icon : false,
    hasUI: instance ? !!instance.ui : false,
    uiVisible: instance ? instance.ui?.isVisible : false,
    iconVisible: instance ? instance.icon?.isVisible : false,
    gameRoom: instance ? !!instance.gameRoom : false,
    
    state: instance ? instance.getUIManagerState() : null,
    
    solutions: instance ? [
      '‚úÖ Singleton OK - utilisez forceCloseUI()',
      'üîí window.forceCloseTeam() pour fermer UI',
      'üîÑ window.teamSystemGlobal pour acc√®s direct'
    ] : [
      'üöÄ Cr√©ez avec createTeamModule()',
      'üîß Initialisez avec setupTeamSystem()'
    ]
  };
  
  console.log('üîç === DEBUG TEAM SINGLETON ===');
  console.table(info);
  
  if (instance && instance.ui?.isVisible) {
    console.log('üí° SOLUTION: UI ouverte - utilisez forceCloseUI()');
    console.log('üîí Commande: window.teamSystemGlobal.forceCloseUI()');
  }
  
  return info;
}

// === üîß FONCTION DE R√âPARATION ===

export function fixTeamModule() {
  console.log('üîß [TeamFix] R√©paration module Team...');
  
  try {
    const instance = TeamModule.getInstance();
    
    if (instance) {
      // Force fermeture UI
      instance.forceCloseUI();
      
      // R√©initialiser √©tat si n√©cessaire
      if (instance.ui) {
        instance.ui.isVisible = false;
      }
      
      console.log('‚úÖ [TeamFix] Module r√©par√©');
      return true;
    } else {
      console.log('‚ÑπÔ∏è [TeamFix] Aucune instance √† r√©parer');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå [TeamFix] Erreur r√©paration:', error);
    return false;
  }
}

console.log(`
‚öîÔ∏è === TEAM MODULE SINGLETON CORRIG√â ===

üÜï NOUVELLES FONCTIONNALIT√âS:
‚Ä¢ Singleton Pattern - √©vite double initialisation
‚Ä¢ forceCloseUI() - fermeture forc√©e de l'interface
‚Ä¢ Protection UIManager - connexion s√©curis√©e
‚Ä¢ √âtat persistant - r√©utilise instance existante

üìç INT√âGRATION UIMANAGER:
‚Ä¢ connectUIManager() s√©curis√©
‚Ä¢ Position: bottom-right, order: 2
‚Ä¢ Protection double connexion

üîß FONCTIONS DE DEBUG:
‚Ä¢ debugTeamSingleton() - diagnostique complet
‚Ä¢ fixTeamModule() - r√©paration automatique
‚Ä¢ TeamModule.getInstance() - acc√®s singleton

üîí R√âSOLUTION PROBL√àME:
‚Ä¢ Plus de double initialisation
‚Ä¢ UI ferm√©e par d√©faut
‚Ä¢ Force fermeture disponible

üéØ COMMANDES UTILES:
‚Ä¢ window.forceCloseTeam() - fermer UI
‚Ä¢ window.teamSystemGlobal.forceCloseUI() - force
‚Ä¢ debugTeamSingleton() - debug
‚Ä¢ fixTeamModule() - r√©parer

‚úÖ PROBL√àME DOUBLE INITIALISATION R√âSOLU !
`);

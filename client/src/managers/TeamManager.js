// client/src/managers/TeamManager.js - Version compl√®te corrig√©e avec stabilit√© renforc√©e

import { TeamUI } from '../components/TeamUI.js';
import { TeamIcon } from '../components/TeamIcon.js';

export class TeamManager {
  constructor(gameRoom) {
    this.gameRoom = gameRoom;
    this.teamData = [];
    this.teamStats = {
      totalPokemon: 0,
      alivePokemon: 0,
      faintedPokemon: 0,
      averageLevel: 0,
      canBattle: false
    };
    
    // Composants UI
    this.teamUI = null;
    this.teamIcon = null;
    
    // √âtat
    this.isInitialized = false;
    this.isInBattle = false;
    this.listenerKeys = [];
    this.initializationTimeout = null;
    
    // ‚úÖ AM√âLIORATION: Protection renforc√©e contre les d√©connexions
    this.connectionProtection = true;
    this.maxRetries = 5;
    this.currentRetries = 0;
    this.initializationDelay = 5000;
    this.connectionCheckInterval = null;
    
    // ‚úÖ NOUVEAU: √âtat de la connexion
    this.connectionState = 'checking';
    this.stabilityChecks = 0;
    this.requiredStabilityChecks = 10;
    
    this.init();
  }

  async init() {
    try {
      console.log('‚öîÔ∏è TeamManager: Initialisation am√©lior√©e...');
      
      // ‚úÖ √âTAPE 1: V√©rification de connexion approfondie
      const connectionReady = await this.verifyConnectionStability();
      if (!connectionReady) {
        throw new Error('Connexion room instable');
      }

      // ‚úÖ √âTAPE 2: Attendre la stabilit√© compl√®te
      await this.waitForCompleteStability();
      
      // ‚úÖ √âTAPE 3: Cr√©er les composants UI avec protection
      await this.createUIComponentsSafely();
      
      // ‚úÖ √âTAPE 4: Configurer les listeners avec v√©rifications renforc√©es
      this.setupStabilizedServerListeners();
      
      // ‚úÖ √âTAPE 5: Configurer la surveillance continue
      this.setupContinuousMonitoring();
      
      // ‚úÖ √âTAPE 6: Raccourcis globaux
      this.setupGlobalShortcuts();
      
      this.isInitialized = true;
      console.log('‚úÖ TeamManager initialis√© avec protection renforc√©e');
      
      // ‚úÖ √âTAPE 7: Demande de donn√©es apr√®s stabilisation compl√®te
      this.scheduleStabilizedDataRequest();
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation du TeamManager:', error);
      this.handleInitializationError(error);
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: V√©rification de stabilit√© de connexion approfondie
  async verifyConnectionStability() {
    console.log('üîç TeamManager: V√©rification stabilit√© connexion...');
    
    if (!this.gameRoom || !this.gameRoom.connection) {
      console.error('‚ùå TeamManager: Pas de connexion room valide');
      return false;
    }

    if (this.gameRoom.connection.readyState !== 1) {
      console.warn('‚ö†Ô∏è TeamManager: WebSocket pas en √©tat OPEN');
      return false;
    }

    return new Promise((resolve) => {
      let checks = 0;
      const maxChecks = 20;
      
      const checkStability = () => {
        if (!this.gameRoom || !this.gameRoom.connection) {
          resolve(false);
          return;
        }
        
        if (this.gameRoom.connection.readyState === 1) {
          checks++;
          if (checks >= 10) {
            console.log('‚úÖ TeamManager: Connexion v√©rifi√©e stable');
            resolve(true);
            return;
          }
        } else {
          checks = 0;
        }
        
        if (checks < maxChecks) {
          setTimeout(checkStability, 100);
        } else {
          console.warn('‚ö†Ô∏è TeamManager: Timeout v√©rification stabilit√©');
          resolve(false);
        }
      };
      
      checkStability();
    });
  }

  // ‚úÖ NOUVELLE M√âTHODE: Attendre la stabilit√© compl√®te
  async waitForCompleteStability() {
    console.log('‚è≥ TeamManager: Attente stabilit√© compl√®te...');
    
    return new Promise((resolve) => {
      setTimeout(() => {
        if (window.globalNetworkManager?.isConnected && 
            window.globalNetworkManager.room?.connection?.readyState === 1) {
          console.log('‚úÖ TeamManager: Stabilit√© compl√®te atteinte');
          resolve();
        } else {
          console.warn('‚ö†Ô∏è TeamManager: Stabilit√© incompl√®te, mais continuation...');
          resolve();
        }
      }, this.initializationDelay);
    });
  }

  // ‚úÖ M√âTHODE AM√âLIOR√âE: Cr√©ation s√©curis√©e des composants UI
  async createUIComponentsSafely() {
    try {
      console.log('üé® TeamManager: Cr√©ation composants UI s√©curis√©e...');
      
      if (document.readyState !== 'complete') {
        await new Promise(resolve => {
          if (document.readyState === 'complete') {
            resolve();
          } else {
            window.addEventListener('load', resolve, { once: true });
          }
        });
      }
      
      if (!this.teamUI) {
        try {
          this.teamUI = new TeamUI(this.gameRoom);
          console.log('‚úÖ TeamUI cr√©√© avec succ√®s');
          
          if (!this.teamUI.overlay) {
            throw new Error('TeamUI overlay manquant');
          }
          
        } catch (error) {
          console.error('‚ùå Erreur cr√©ation TeamUI:', error);
          throw error;
        }
      }
      
      await new Promise(resolve => setTimeout(resolve, 500));
      
      if (!this.teamIcon && this.teamUI) {
        try {
          this.teamIcon = new TeamIcon(this.teamUI);
          console.log('‚úÖ TeamIcon cr√©√© avec succ√®s');
          
          if (!this.teamIcon.iconElement) {
            throw new Error('TeamIcon element manquant');
          }
          
          setTimeout(() => {
            if (this.teamIcon && this.isInitialized) {
              try {
                this.teamIcon.show();
                console.log('‚úÖ TeamIcon affich√©');
              } catch (error) {
                console.error('‚ùå Erreur affichage TeamIcon:', error);
              }
            }
          }, 1000);
          
        } catch (error) {
          console.error('‚ùå Erreur cr√©ation TeamIcon:', error);
        }
      }
      
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation composants UI:', error);
      throw error;
    }
  }

  // ‚úÖ M√âTHODE AM√âLIOR√âE: Setup listeners avec stabilit√© renforc√©e
  setupStabilizedServerListeners() {
    if (!this.gameRoom) {
      console.error('‚ùå TeamManager: Pas de gameRoom pour les listeners');
      return;
    }

    console.log('üîß TeamManager: Configuration listeners stabilis√©s...');

    try {
      if (this.gameRoom.connection.readyState !== 1) {
        console.warn('‚ö†Ô∏è TeamManager: Room pas connect√©e, skip listeners');
        setTimeout(() => {
          if (this.gameRoom && this.gameRoom.connection.readyState === 1) {
            this.setupStabilizedServerListeners();
          }
        }, 2000);
        return;
      }

      const ultraSafeListener = (eventName, callback) => {
        const wrappedCallback = (...args) => {
          try {
            if (!this.gameRoom || !this.gameRoom.connection) {
              console.warn(`‚ö†Ô∏è TeamManager: Listener ${eventName} - room manquante`);
              return;
            }
            
            if (this.gameRoom.connection.readyState !== 1) {
              console.warn(`‚ö†Ô∏è TeamManager: Listener ${eventName} - connexion ferm√©e`);
              return;
            }
            
            if (!this.isInitialized) {
              console.warn(`‚ö†Ô∏è TeamManager: Listener ${eventName} - manager non initialis√©`);
              return;
            }
            
            callback(...args);
            
          } catch (error) {
            console.error(`‚ùå TeamManager: Erreur dans listener ${eventName}:`, error);
            this.handleListenerError(eventName, error);
          }
        };

        try {
          this.gameRoom.onMessage(eventName, wrappedCallback);
          this.listenerKeys.push(eventName);
          console.log(`üì° Listener ultra-s√©curis√© ajout√©: ${eventName}`);
        } catch (error) {
          console.error(`‚ùå Erreur ajout listener ${eventName}:`, error);
        }
      };

      const listenerConfigs = [
        { name: "teamData", handler: (data) => this.handleTeamData(data), delay: 200 },
        { name: "teamStats", handler: (data) => this.handleTeamStats(data), delay: 400 },
        { name: "pokemonAddedToTeam", handler: (data) => this.handlePokemonAdded(data), delay: 600 },
        { name: "pokemonRemovedFromTeam", handler: (data) => this.handlePokemonRemoved(data), delay: 800 },
        { name: "pokemonUpdated", handler: (data) => this.handlePokemonUpdate(data), delay: 1000 },
        { name: "teamHealed", handler: (data) => this.handleTeamHealed(data), delay: 1200 },
        { name: "teamActionResult", handler: (data) => this.handleTeamActionResult(data), delay: 1400 },
        { name: "battleStart", handler: (data) => this.handleBattleStart(data), delay: 1600 },
        { name: "battleEnd", handler: (data) => this.handleBattleEnd(data), delay: 1800 },
        { name: "pokemonCaught", handler: (data) => this.handlePokemonCaught(data), delay: 2000 }
      ];

      listenerConfigs.forEach(config => {
        setTimeout(() => {
          if (this.isInitialized && this.gameRoom?.connection?.readyState === 1) {
            ultraSafeListener(config.name, config.handler);
          }
        }, config.delay);
      });

      console.log('‚úÖ TeamManager: Tous les listeners stabilis√©s programm√©s');

    } catch (error) {
      console.error('‚ùå TeamManager: Erreur setup listeners:', error);
      this.handleListenerError('setup', error);
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Surveillance continue de la connexion
  setupContinuousMonitoring() {
    if (this.connectionCheckInterval) {
      clearInterval(this.connectionCheckInterval);
    }

    this.connectionCheckInterval = setInterval(() => {
      this.checkConnectionHealth();
    }, 5000);

    console.log('üëÅÔ∏è TeamManager: Surveillance continue activ√©e');
  }

  // ‚úÖ NOUVELLE M√âTHODE: V√©rification de sant√© de connexion
  checkConnectionHealth() {
    if (!this.gameRoom || !this.gameRoom.connection) {
      console.warn('‚ö†Ô∏è TeamManager: Connexion perdue lors de la surveillance');
      this.handleConnectionLoss();
      return;
    }

    if (this.gameRoom.connection.readyState !== 1) {
      console.warn('‚ö†Ô∏è TeamManager: Connexion instable d√©tect√©e');
      this.handleConnectionInstability();
      return;
    }

    if (this.currentRetries > 0) {
      console.log('‚úÖ TeamManager: Connexion r√©cup√©r√©e, reset compteurs');
      this.currentRetries = 0;
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Gestion de perte de connexion
  handleConnectionLoss() {
    console.error('üí• TeamManager: Perte de connexion d√©tect√©e');
    this.gracefulShutdown();
  }

  // ‚úÖ NOUVELLE M√âTHODE: Gestion d'instabilit√© de connexion
  handleConnectionInstability() {
    console.warn('‚ö†Ô∏è TeamManager: Instabilit√© de connexion');
    
    if (this.teamIcon) {
      this.teamIcon.setEnabled(false);
    }
    
    setTimeout(() => {
      if (this.gameRoom?.connection?.readyState === 1 && this.teamIcon) {
        this.teamIcon.setEnabled(true);
        console.log('‚úÖ TeamManager: Interactions r√©activ√©es');
      }
    }, 3000);
  }

  // ‚úÖ M√âTHODE AM√âLIOR√âE: Demande de donn√©es stabilis√©e
  scheduleStabilizedDataRequest() {
    if (this.initializationTimeout) {
      clearTimeout(this.initializationTimeout);
    }

    this.initializationTimeout = setTimeout(() => {
      if (this.isInitialized && 
          this.gameRoom && 
          this.gameRoom.connection && 
          this.gameRoom.connection.readyState === 1) {
        
        console.log('üì° TeamManager: Demande de donn√©es d\'√©quipe stabilis√©e...');
        this.requestTeamDataSafely();
        
      } else {
        console.warn('‚ö†Ô∏è TeamManager: Pas pr√™t pour demander les donn√©es, nouvelle tentative...');
        this.scheduleStabilizedDataRequest();
      }
    }, 3000);
  }

  // ‚úÖ NOUVELLE M√âTHODE: Demande de donn√©es ultra-s√©curis√©e
  requestTeamDataSafely() {
    if (!this.gameRoom || this.gameRoom.connection.readyState !== 1) {
      console.warn('‚ö†Ô∏è TeamManager: Impossible de demander donn√©es (connexion instable)');
      return;
    }

    try {
      console.log('üì° TeamManager: Envoi getTeam s√©curis√©...');
      
      const requestTimeout = setTimeout(() => {
        console.warn('‚ö†Ô∏è TeamManager: Timeout demande team data');
      }, 10000);

      this.gameRoom.send("getTeam");
      
      const originalHandler = this.handleTeamData.bind(this);
      this.handleTeamData = (data) => {
        clearTimeout(requestTimeout);
        this.handleTeamData = originalHandler;
        originalHandler(data);
      };
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur demande donn√©es:', error);
      
      setTimeout(() => {
        if (this.gameRoom && this.gameRoom.connection.readyState === 1) {
          this.requestTeamDataSafely();
        }
      }, 10000);
    }
  }

  // ‚úÖ M√âTHODE AM√âLIOR√âE: Gestion des erreurs de listeners
  handleListenerError(eventName, error) {
    console.error(`‚ùå TeamManager: Erreur listener ${eventName}:`, error);
    
    this.currentRetries++;
    if (this.currentRetries < this.maxRetries) {
      console.log(`üîÑ TeamManager: Tentative de r√©cup√©ration ${this.currentRetries}/${this.maxRetries}`);
      
      const retryDelay = Math.min(2000 * Math.pow(2, this.currentRetries - 1), 30000);
      
      setTimeout(() => {
        this.reinitializeIfNeeded();
      }, retryDelay);
    } else {
      console.error('‚ùå TeamManager: Trop d\'erreurs, arr√™t du syst√®me');
      this.gracefulShutdown();
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: R√©initialisation si n√©cessaire
  reinitializeIfNeeded() {
    if (!this.gameRoom || this.gameRoom.connection.readyState !== 1) {
      console.log('üîÑ TeamManager: Connexion ferm√©e, impossible de r√©initialiser');
      return;
    }

    console.log('üîÑ TeamManager: R√©initialisation...');
    
    this.cleanupListeners();
    
    setTimeout(() => {
      this.setupStabilizedServerListeners();
    }, 1000);
  }

  // ‚úÖ NOUVELLE M√âTHODE: Nettoyage des listeners
  cleanupListeners() {
    if (this.gameRoom && this.listenerKeys.length > 0) {
      console.log('üßπ TeamManager: Nettoyage des listeners...');
      
      this.listenerKeys.forEach(eventName => {
        try {
          console.log(`üóëÔ∏è Marquage listener inactif: ${eventName}`);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erreur nettoyage listener ${eventName}:`, error);
        }
      });
      
      this.listenerKeys = [];
    }
  }

  // ‚úÖ M√âTHODES HANDLE* AM√âLIOR√âES avec protection d'erreur
  handleTeamData(data) {
    try {
      console.log('‚öîÔ∏è Donn√©es d\'√©quipe re√ßues:', data);
      
      if (!data || typeof data !== 'object') {
        console.warn('‚ö†Ô∏è TeamManager: Donn√©es d\'√©quipe invalides');
        return;
      }
      
      this.teamData = Array.isArray(data.team) ? data.team : [];
      this.calculateStats();
      
      if (this.teamUI && typeof this.teamUI.updateTeamData === 'function') {
        this.teamUI.updateTeamData(data);
      }
      
      if (this.teamIcon && typeof this.teamIcon.updateTeamStats === 'function') {
        this.teamIcon.updateTeamStats(this.teamStats);
      }
      
      console.log('‚úÖ TeamManager: Donn√©es d\'√©quipe trait√©es avec succ√®s');
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handleTeamData:', error);
    }
  }

  handleTeamStats(data) {
    try {
      console.log('‚öîÔ∏è Statistiques d\'√©quipe re√ßues:', data);
      
      if (!data || typeof data !== 'object') {
        console.warn('‚ö†Ô∏è TeamManager: Statistiques d\'√©quipe invalides');
        return;
      }
      
      this.teamStats = { ...this.teamStats, ...data };
      
      if (this.teamIcon && typeof this.teamIcon.updateTeamStats === 'function') {
        this.teamIcon.updateTeamStats(this.teamStats);
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handleTeamStats:', error);
    }
  }

  handlePokemonAdded(data) {
    try {
      console.log('‚öîÔ∏è Pok√©mon ajout√© √† l\'√©quipe:', data);
      
      if (!data || !data.pokemon) {
        console.warn('‚ö†Ô∏è TeamManager: Donn√©es pokemon ajout√© invalides');
        return;
      }
      
      this.teamData.push(data.pokemon);
      this.calculateStats();
      
      if (this.teamIcon) {
        if (typeof this.teamIcon.onPokemonAdded === 'function') {
          this.teamIcon.onPokemonAdded(data.pokemon);
        }
        if (typeof this.teamIcon.updateTeamStats === 'function') {
          this.teamIcon.updateTeamStats(this.teamStats);
        }
      }
      
      if (this.teamUI && this.teamUI.isOpen && this.teamUI.isOpen()) {
        if (typeof this.teamUI.requestTeamData === 'function') {
          this.teamUI.requestTeamData();
        }
      }
      
      this.showNotification(`${data.pokemon.nickname || data.pokemon.name} ajout√© √† l'√©quipe!`, 'success');
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handlePokemonAdded:', error);
    }
  }

  handlePokemonRemoved(data) {
    try {
      console.log('‚öîÔ∏è Pok√©mon retir√© de l\'√©quipe:', data);
      
      if (!data || !data.pokemonId) {
        console.warn('‚ö†Ô∏è TeamManager: Donn√©es pokemon retir√© invalides');
        return;
      }
      
      this.teamData = this.teamData.filter(p => p._id !== data.pokemonId);
      this.calculateStats();
      
      if (this.teamIcon) {
        if (typeof this.teamIcon.onPokemonRemoved === 'function') {
          this.teamIcon.onPokemonRemoved();
        }
        if (typeof this.teamIcon.updateTeamStats === 'function') {
          this.teamIcon.updateTeamStats(this.teamStats);
        }
      }
      
      if (this.teamUI && this.teamUI.isOpen && this.teamUI.isOpen()) {
        if (typeof this.teamUI.requestTeamData === 'function') {
          this.teamUI.requestTeamData();
        }
      }
      
      this.showNotification('Pok√©mon retir√© de l\'√©quipe', 'info');
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handlePokemonRemoved:', error);
    }
  }

  handlePokemonUpdate(data) {
    try {
      console.log('‚öîÔ∏è Pok√©mon mis √† jour:', data);
      
      if (!data || !data.pokemonId) {
        console.warn('‚ö†Ô∏è TeamManager: Donn√©es pokemon update invalides');
        return;
      }
      
      const pokemonIndex = this.teamData.findIndex(p => p._id === data.pokemonId);
      if (pokemonIndex !== -1) {
        this.teamData[pokemonIndex] = { ...this.teamData[pokemonIndex], ...data.updates };
        this.calculateStats();
        
        if (this.teamIcon && typeof this.teamIcon.updateTeamStats === 'function') {
          this.teamIcon.updateTeamStats(this.teamStats);
        }
        
        if (this.teamUI && this.teamUI.isOpen && this.teamUI.isOpen()) {
          if (typeof this.teamUI.handlePokemonUpdate === 'function') {
            this.teamUI.handlePokemonUpdate(data);
          }
        }
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handlePokemonUpdate:', error);
    }
  }

  handleTeamHealed(data) {
    try {
      console.log('‚öîÔ∏è √âquipe soign√©e:', data);
      
      this.showNotification('√âquipe soign√©e avec succ√®s!', 'success');
      
      if (this.teamUI && this.teamUI.isOpen && this.teamUI.isOpen()) {
        if (typeof this.teamUI.requestTeamData === 'function') {
          this.teamUI.requestTeamData();
        }
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handleTeamHealed:', error);
    }
  }

  handleTeamActionResult(data) {
    try {
      console.log('‚öîÔ∏è R√©sultat action √©quipe:', data);
      
      if (data.success) {
        this.showNotification(data.message || 'Action r√©ussie', 'success');
        
        if (this.teamUI && this.teamUI.isOpen && this.teamUI.isOpen()) {
          if (typeof this.teamUI.requestTeamData === 'function') {
            this.teamUI.requestTeamData();
          }
        }
      } else {
        this.showNotification(data.message || 'Action √©chou√©e', 'error');
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handleTeamActionResult:', error);
    }
  }

  handleBattleStart(data) {
    try {
      console.log('‚öîÔ∏è Combat d√©marr√©:', data);
      
      this.isInBattle = true;
      
      if (this.teamIcon && typeof this.teamIcon.onBattleStart === 'function') {
        this.teamIcon.onBattleStart();
      }
      
      if (this.teamUI && this.teamUI.isOpen && this.teamUI.isOpen()) {
        if (typeof this.teamUI.hide === 'function') {
          this.teamUI.hide();
        }
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handleBattleStart:', error);
    }
  }

  handleBattleEnd(data) {
    try {
      console.log('‚öîÔ∏è Combat termin√©:', data);
      
      this.isInBattle = false;
      
      if (this.teamIcon && typeof this.teamIcon.onBattleEnd === 'function') {
        this.teamIcon.onBattleEnd();
      }
      
      if (this.teamUI && this.teamUI.isOpen && this.teamUI.isOpen()) {
        if (typeof this.teamUI.requestTeamData === 'function') {
          this.teamUI.requestTeamData();
        }
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handleBattleEnd:', error);
    }
  }

  handlePokemonCaught(data) {
    try {
      console.log('‚öîÔ∏è Pok√©mon captur√©:', data);
      
      if (data.addedToTeam) {
        this.showNotification(`${data.pokemon.name} ajout√© √† l'√©quipe!`, 'success');
        
        if (this.teamUI && typeof this.teamUI.onPokemonCaught === 'function') {
          this.teamUI.onPokemonCaught(data.pokemon);
        }
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handlePokemonCaught:', error);
    }
  }

  // ‚úÖ M√âTHODE MODIFI√âE: Setup raccourcis avec protection
  setupGlobalShortcuts() {
    const keyHandler = (e) => {
      if (e.key.toLowerCase() === 't' && 
          !e.target.matches('input, textarea, [contenteditable]') &&
          this.canInteract()) {
        e.preventDefault();
        this.toggleTeamUI();
      }
    };

    document.addEventListener('keydown', keyHandler);
    this.keyboardHandler = keyHandler;

    window.isTeamOpen = () => this.teamUI?.isOpen() || false;
    window.TeamManager = this;
  }

  // ‚úÖ M√âTHODE AM√âLIOR√âE: Arr√™t gracieux
  gracefulShutdown() {
    console.log('üõë TeamManager: Arr√™t gracieux am√©lior√©...');
    
    this.isInitialized = false;
    
    if (this.connectionCheckInterval) {
      clearInterval(this.connectionCheckInterval);
      this.connectionCheckInterval = null;
    }
    
    if (this.initializationTimeout) {
      clearTimeout(this.initializationTimeout);
      this.initializationTimeout = null;
    }

    if (this.keyboardHandler) {
      document.removeEventListener('keydown', this.keyboardHandler);
      this.keyboardHandler = null;
    }

    if (this.teamUI) {
      try {
        if (typeof this.teamUI.hide === 'function') {
          this.teamUI.hide();
        }
        if (typeof this.teamUI.destroy === 'function') {
          this.teamUI.destroy();
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Erreur nettoyage TeamUI:', error);
      }
      this.teamUI = null;
    }

    if (this.teamIcon) {
      try {
        if (typeof this.teamIcon.hide === 'function') {
          this.teamIcon.hide();
        }
        if (typeof this.teamIcon.destroy === 'function') {
          this.teamIcon.destroy();
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Erreur nettoyage TeamIcon:', error);
      }
      this.teamIcon = null;
    }

    this.teamData = [];
    this.listenerKeys = [];
    this.currentRetries = 0;

    console.log('‚úÖ TeamManager: Arr√™t gracieux termin√©');
  }

  // ‚úÖ M√âTHODE AM√âLIOR√âE: Gestion des erreurs d'initialisation
  handleInitializationError(error) {
    console.error('‚ùå TeamManager: Erreur d\'initialisation:', error);
    
    this.currentRetries++;
    if (this.currentRetries < this.maxRetries) {
      console.log(`üîÑ TeamManager: Nouvelle tentative ${this.currentRetries}/${this.maxRetries} dans 5s...`);
      
      setTimeout(() => {
        this.init();
      }, 5000);
    } else {
      console.error('‚ùå TeamManager: √âchec complet de l\'initialisation');
      this.gracefulShutdown();
    }
  }

  // ‚úÖ M√âTHODES PUBLIQUES AM√âLIOR√âES
  toggleTeamUI() {
    if (!this.isInitialized) {
      this.showNotification('Syst√®me d\'√©quipe en cours d\'initialisation...', 'warning');
      return;
    }

    if (!this.canInteract()) {
      this.showNotification('Impossible d\'ouvrir l\'√©quipe maintenant', 'warning');
      return;
    }
    
    if (this.teamUI && typeof this.teamUI.toggle === 'function') {
      try {
        this.teamUI.toggle();
      } catch (error) {
        console.error('‚ùå Erreur toggle TeamUI:', error);
        this.showNotification('Erreur lors de l\'ouverture de l\'√©quipe', 'error');
      }
    } else {
      console.warn('‚ö†Ô∏è TeamManager: TeamUI pas disponible');
      this.showNotification('Interface d\'√©quipe non disponible', 'warning');
    }
  }

  openTeamUI() {
    if (!this.isInitialized) {
      this.showNotification('Syst√®me d\'√©quipe en cours d\'initialisation...', 'warning');
      return;
    }

    if (!this.canInteract()) {
      this.showNotification('Impossible d\'ouvrir l\'√©quipe maintenant', 'warning');
      return;
    }
    
    if (this.teamUI && typeof this.teamUI.show === 'function') {
      try {
        this.teamUI.show();
      } catch (error) {
        console.error('‚ùå Erreur ouverture TeamUI:', error);
        this.showNotification('Erreur lors de l\'ouverture de l\'√©quipe', 'error');
      }
    } else {
      console.warn('‚ö†Ô∏è TeamManager: TeamUI pas disponible');
      this.showNotification('Interface d\'√©quipe non disponible', 'warning');
    }
  }

  closeTeamUI() {
    if (this.teamUI && typeof this.teamUI.hide === 'function') {
      try {
        this.teamUI.hide();
      } catch (error) {
        console.error('‚ùå Erreur fermeture TeamUI:', error);
      }
    }
  }

  healTeam() {
    if (!this.gameRoom || this.gameRoom.connection.readyState !== 1) {
      this.showNotification('Connexion instable, impossible de soigner l\'√©quipe', 'error');
      return;
    }

    try {
      this.gameRoom.send("healTeam");
      this.showNotification('Demande de soin envoy√©e...', 'info');
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur healTeam:', error);
      this.showNotification('Erreur lors du soin de l\'√©quipe', 'error');
    }
  }

  healPokemon(pokemonId) {
    if (!this.gameRoom || this.gameRoom.connection.readyState !== 1) {
      this.showNotification('Connexion instable, impossible de soigner le Pok√©mon', 'error');
      return;
    }

    try {
      this.gameRoom.send("healPokemon", { pokemonId });
      this.showNotification('Demande de soin envoy√©e...', 'info');
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur healPokemon:', error);
      this.showNotification('Erreur lors du soin du Pok√©mon', 'error');
    }
  }

  removePokemon(pokemonId) {
    if (!this.gameRoom || this.gameRoom.connection.readyState !== 1) {
      this.showNotification('Connexion instable, impossible de retirer le Pok√©mon', 'error');
      return;
    }

    try {
      this.gameRoom.send("removeFromTeam", { pokemonId });
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur removePokemon:', error);
      this.showNotification('Erreur lors du retrait du Pok√©mon', 'error');
    }
  }

  swapPokemon(fromSlot, toSlot) {
    if (!this.gameRoom || this.gameRoom.connection.readyState !== 1) {
      this.showNotification('Connexion instable, impossible d\'√©changer les Pok√©mon', 'error');
      return;
    }

    try {
      this.gameRoom.send("swapTeamSlots", { slotA: fromSlot, slotB: toSlot });
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur swapPokemon:', error);
      this.showNotification('Erreur lors de l\'√©change des Pok√©mon', 'error');
    }
  }

  autoArrangeTeam() {
    if (!this.gameRoom || this.gameRoom.connection.readyState !== 1) {
      this.showNotification('Connexion instable, impossible d\'arranger l\'√©quipe', 'error');
      return;
    }

    try {
      this.gameRoom.send("autoArrangeTeam");
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur autoArrangeTeam:', error);
      this.showNotification('Erreur lors de l\'arrangement de l\'√©quipe', 'error');
    }
  }

  requestTeamData() {
    this.requestTeamDataSafely();
  }

  // ‚úÖ M√âTHODES UTILITAIRES AM√âLIOR√âES
  calculateStats() {
    try {
      if (!Array.isArray(this.teamData)) {
        console.warn('‚ö†Ô∏è TeamManager: teamData n\'est pas un array');
        this.teamData = [];
      }

      this.teamStats.totalPokemon = this.teamData.length;
      this.teamStats.alivePokemon = this.teamData.filter(p => p && p.currentHp > 0).length;
      this.teamStats.faintedPokemon = this.teamData.filter(p => p && p.currentHp === 0).length;
      this.teamStats.canBattle = this.teamStats.alivePokemon > 0;
      
      if (this.teamData.length > 0) {
        const totalLevel = this.teamData.reduce((sum, p) => sum + (p?.level || 1), 0);
        this.teamStats.averageLevel = Math.round(totalLevel / this.teamData.length);
      } else {
        this.teamStats.averageLevel = 0;
      }
      
      console.log('‚öîÔ∏è Stats calcul√©es:', this.teamStats);
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur calculateStats:', error);
      this.teamStats = {
        totalPokemon: 0,
        alivePokemon: 0,
        faintedPokemon: 0,
        averageLevel: 0,
        canBattle: false
      };
    }
  }

  canInteract() {
    if (!this.isInitialized) return false;
    
    try {
      const questDialogOpen = document.querySelector('.quest-dialog-overlay') !== null;
      const chatOpen = typeof window.isChatFocused === 'function' ? window.isChatFocused() : false;
      const inventoryOpen = typeof window.isInventoryOpen === 'function' ? window.isInventoryOpen() : false;
      const shopOpen = document.querySelector('#shop-overlay') && !document.querySelector('#shop-overlay').classList.contains('hidden');
      const dialogueOpen = document.querySelector('#dialogue-box')?.style.display !== 'none';
      
      return !this.isInBattle && !questDialogOpen && !chatOpen && !inventoryOpen && !shopOpen && !dialogueOpen;
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur canInteract:', error);
      return false;
    }
  }

  canBattle() {
    return this.teamStats.canBattle;
  }

  isTeamFull() {
    return this.teamData.length >= 6;
  }

  showNotification(message, type = 'info') {
    try {
      if (typeof window.showNotification === 'function') {
        window.showNotification(message, type);
      } else if (typeof window.showGameNotification === 'function') {
        window.showGameNotification(message, type);
      } else {
        console.log(`üì¢ TeamManager [${type}]: ${message}`);
      }
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur notification:', error);
    }
  }

  // ‚úÖ M√âTHODE AM√âLIOR√âE: Destroy s√©curis√©
  destroy() {
    console.log('‚öîÔ∏è Destruction s√©curis√©e du TeamManager');
    
    this.gracefulShutdown();
    
    if (window.isTeamOpen) {
      delete window.isTeamOpen;
    }
    
    if (window.TeamManager === this) {
      delete window.TeamManager;
    }
    
    if (window.teamManagerGlobal === this) {
      delete window.teamManagerGlobal;
    }
    
    this.teamData = [];
    this.gameRoom = null;
    
    console.log('‚úÖ TeamManager d√©truit proprement');
  }

  // ‚úÖ GETTERS ET M√âTHODES UTILITAIRES S√âCURIS√âES
  getTeamData() {
    return Array.isArray(this.teamData) ? [...this.teamData] : [];
  }

  getTeamStats() {
    return { ...this.teamStats };
  }

  getPokemonBySlot(slot) {
    if (slot >= 0 && slot < this.teamData.length) {
      return this.teamData[slot];
    }
    return null;
  }

  getAlivePokemon() {
    return this.teamData.filter(p => p && p.currentHp > 0);
  }

  getFaintedPokemon() {
    return this.teamData.filter(p => p && p.currentHp === 0);
  }

  // ‚úÖ M√âTHODES D'√âV√âNEMENTS POUR L'INT√âGRATION
  on(eventName, callback) {
    if (!this.eventCallbacks) {
      this.eventCallbacks = {};
    }
    
    if (!this.eventCallbacks[eventName]) {
      this.eventCallbacks[eventName] = [];
    }
    
    this.eventCallbacks[eventName].push(callback);
  }

  emit(eventName, data) {
    if (this.eventCallbacks && this.eventCallbacks[eventName]) {
      this.eventCallbacks[eventName].forEach(callback => {
        try {
          callback(data);
        } catch (error) {
          console.error(`‚ùå TeamManager: Erreur callback ${eventName}:`, error);
        }
      });
    }
  }

  // ‚úÖ M√âTHODES DE DEBUG
  debugState() {
    console.log('üîç TeamManager Debug State:', {
      isInitialized: this.isInitialized,
      connectionState: this.connectionState,
      currentRetries: this.currentRetries,
      teamData: this.teamData.length,
      teamStats: this.teamStats,
      hasTeamUI: !!this.teamUI,
      hasTeamIcon: !!this.teamIcon,
      gameRoomConnected: this.gameRoom?.connection?.readyState === 1,
      listenerCount: this.listenerKeys.length
    });
  }

  // ‚úÖ M√âTHODES D'EXPORT/IMPORT POUR LA SAUVEGARDE
  exportData() {
    return {
      teamData: this.teamData,
      teamStats: this.teamStats,
      isInBattle: this.isInBattle
    };
  }

  importData(data) {
    if (data.teamData && Array.isArray(data.teamData)) {
      this.teamData = data.teamData;
    }
    
    if (data.teamStats && typeof data.teamStats === 'object') {
      this.teamStats = { ...this.teamStats, ...data.teamStats };
    }
    
    if (typeof data.isInBattle === 'boolean') {
      this.isInBattle = data.isInBattle;
    }
    
    this.calculateStats();
    
    if (this.teamIcon && typeof this.teamIcon.updateTeamStats === 'function') {
      this.teamIcon.updateTeamStats(this.teamStats);
    }
  }

  // ‚úÖ M√âTHODES DE GESTION DES √âV√âNEMENTS BATTLE
  onBattleStartRequested() {
    if (!this.canBattle()) {
      this.showNotification('Aucun Pok√©mon en √©tat de combattre!', 'error');
      return false;
    }
    
    return true;
  }

  onBattleStart() {
    this.handleBattleStart({});
  }

  onBattleEnd() {
    this.handleBattleEnd({});
  }

  // ‚úÖ M√âTHODES DE TEST ET DEBUG
  testConnection() {
    try {
      if (!this.gameRoom || this.gameRoom.connection.readyState !== 1) {
        console.log('‚ùå TeamManager: Connexion non disponible');
        return false;
      }
      
      this.gameRoom.send("ping");
      console.log('‚úÖ TeamManager: Test connexion envoy√©');
      return true;
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur test connexion:', error);
      return false;
    }
  }

  forceRefresh() {
    console.log('üîÑ TeamManager: Force refresh...');
    
    if (this.teamUI && typeof this.teamUI.requestTeamData === 'function') {
      this.teamUI.requestTeamData();
    }
    
    this.requestTeamDataSafely();
  }

  // ‚úÖ M√âTHODES DE R√âCUP√âRATION D'ERREURS
  attemptRecovery() {
    console.log('üîÑ TeamManager: Tentative de r√©cup√©ration...');
    
    if (!this.gameRoom || this.gameRoom.connection.readyState !== 1) {
      console.log('‚ùå TeamManager: Impossible de r√©cup√©rer sans connexion');
      return false;
    }
    
    try {
      // R√©initialiser les listeners
      this.cleanupListeners();
      setTimeout(() => {
        this.setupStabilizedServerListeners();
      }, 1000);
      
      // Redemander les donn√©es
      setTimeout(() => {
        this.requestTeamDataSafely();
      }, 2000);
      
      console.log('‚úÖ TeamManager: R√©cup√©ration initi√©e');
      return true;
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur r√©cup√©ration:', error);
      return false;
    }
  }
}

// ‚úÖ FONCTION D'INITIALISATION S√âCURIS√âE
export function initializeTeamSystem(gameRoom) {
  if (window.TeamManager && window.TeamManager.isInitialized) {
    console.warn('‚ö†Ô∏è TeamManager d√©j√† initialis√©');
    return window.TeamManager;
  }
  
  if (!gameRoom) {
    console.error('‚ùå initializeTeamSystem: Pas de gameRoom fournie');
    return null;
  }

  if (!gameRoom.connection || gameRoom.connection.readyState !== 1) {
    console.error('‚ùå initializeTeamSystem: gameRoom pas connect√©e');
    return null;
  }

  console.log('üîß Initialisation s√©curis√©e du syst√®me d\'√©quipe...');
  
  try {
    const teamManager = new TeamManager(gameRoom);
    window.TeamManager = teamManager;
    window.teamManagerGlobal = teamManager;
    
    console.log('‚úÖ Syst√®me d\'√©quipe initialis√© avec protection');
    return teamManager;
  } catch (error) {
    console.error('‚ùå Erreur initialisation TeamManager:', error);
    return null;
  }
}

export default TeamManager;

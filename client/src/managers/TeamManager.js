// client/src/managers/TeamManager.js - VERSION CORRIG√âE COMPL√àTE
// ‚úÖ Correction probl√®mes de timing et disparition apr√®s transition

import { TeamUI } from '../components/TeamUI.js';
import { TeamIcon } from '../components/TeamIcon.js';

export class TeamManager {
  constructor(gameRoom) {
    this.gameRoom = gameRoom;
    this.teamData = [];
    this.teamStats = {
      totalPokemon: 0,
      alivePokemon: 0,
      faintedPokemon: 0,
      averageLevel: 0,
      canBattle: false
    };
    
    // Composants UI
    this.teamUI = null;
    this.teamIcon = null;
    
    // √âtat
    this.isInitialized = false;
    this.isInBattle = false;
    this.isDestroyed = false;
    
    // ‚úÖ NOUVEAU: Protection contre les initialisations multiples
    this.initializationPromise = null;
    this.iconRetryCount = 0;
    this.maxIconRetries = 5;
    
    // Callbacks simples
    this.callbacks = {
      onPokemonAdded: null,
      onPokemonRemoved: null,
      onTeamHealed: null,
      onBattleStart: null,
      onBattleEnd: null
    };
    
    console.log('‚öîÔ∏è TeamManager: Instance cr√©√©e');
  }

  // ‚úÖ NOUVELLE M√âTHODE: Initialisation avec protection contre double init
  async init() {
    if (this.isDestroyed) {
      console.warn('‚ö†Ô∏è TeamManager: Tentative d\'init sur instance d√©truite');
      return false;
    }

    if (this.initializationPromise) {
      console.log('‚è≥ TeamManager: Initialisation d√©j√† en cours, attente...');
      return await this.initializationPromise;
    }

    if (this.isInitialized) {
      console.log('‚ÑπÔ∏è TeamManager: D√©j√† initialis√©');
      return true;
    }

    console.log('‚öîÔ∏è TeamManager: === INITIALISATION S√âCURIS√âE ===');

    this.initializationPromise = this.performInitialization();
    
    try {
      const success = await this.initializationPromise;
      this.initializationPromise = null;
      return success;
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur initialisation:', error);
      this.initializationPromise = null;
      return false;
    }
  }

  // ‚úÖ M√âTHODE PRIV√âE: Vraie initialisation
  async performInitialization() {
    try {
      console.log('üîß TeamManager: D√©but initialisation...');
      
      // 1. V√©rifier la connexion
      if (!this.gameRoom) {
        throw new Error('Pas de gameRoom fournie');
      }

      // 2. Cr√©er les composants UI avec retry automatique
      await this.createUIComponentsWithRetry();
      
      // 3. Setup des listeners serveur
      this.setupServerListeners();
      
      // 4. Setup des raccourcis globaux
      this.setupGlobalShortcuts();
      
      // 5. Setup des handlers de connexion
      this.setupBasicConnectionHandling();
      
      this.isInitialized = true;
      console.log('‚úÖ TeamManager: Initialis√© avec succ√®s');
      
      // 6. Demander les donn√©es initiales avec d√©lai
      setTimeout(() => {
        if (!this.isDestroyed && this.isInitialized) {
          this.requestTeamData();
        }
      }, 1000);
      
      // 7. Notifier l'initialisation
      if (typeof window.onSystemInitialized === 'function') {
        window.onSystemInitialized('team');
      }
      
      return true;
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur performInitialization:', error);
      return false;
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Cr√©ation UI avec retry automatique
  async createUIComponentsWithRetry() {
    const maxRetries = 3;
    let attempt = 0;
    
    while (attempt < maxRetries && !this.isDestroyed) {
      try {
        attempt++;
        console.log(`üîß TeamManager: Tentative cr√©ation UI ${attempt}/${maxRetries}`);
        
        // Cr√©er TeamUI
        if (!this.teamUI) {
          this.teamUI = new TeamUI(this.gameRoom);
          console.log('‚úÖ TeamUI cr√©√©');
        }
        
        // Cr√©er TeamIcon avec v√©rification
        if (!this.teamIcon) {
          this.teamIcon = new TeamIcon(this.teamUI);
          console.log('‚úÖ TeamIcon cr√©√©');
          
          // ‚úÖ V√âRIFIER QUE L'IC√îNE EST VRAIMENT DANS LE DOM
          await this.waitForIconInDOM();
        }
        
        // ‚úÖ AFFICHER L'IC√îNE avec d√©lai progressif
        const showDelay = attempt * 500; // 500ms, 1s, 1.5s
        setTimeout(() => {
          if (this.teamIcon && !this.isDestroyed) {
            console.log(`üéØ TeamManager: Affichage ic√¥ne (tentative ${attempt})`);
            this.teamIcon.show();
            
            // ‚úÖ V√©rifier l'affichage apr√®s 200ms
            setTimeout(() => {
              this.verifyIconVisibility();
            }, 200);
          }
        }, showDelay);
        
        console.log('‚úÖ TeamManager: Composants UI cr√©√©s avec succ√®s');
        return; // Succ√®s, sortir de la boucle
        
      } catch (error) {
        console.error(`‚ùå TeamManager: Erreur cr√©ation UI (tentative ${attempt}):`, error);
        
        // Nettoyer avant de retry
        if (this.teamUI) {
          try { this.teamUI.destroy?.(); } catch (e) {}
          this.teamUI = null;
        }
        if (this.teamIcon) {
          try { this.teamIcon.destroy?.(); } catch (e) {}
          this.teamIcon = null;
        }
        
        if (attempt >= maxRetries) {
          throw new Error(`√âchec cr√©ation UI apr√®s ${maxRetries} tentatives`);
        }
        
        // Attendre avant retry
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
      }
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Attendre que l'ic√¥ne soit dans le DOM
  async waitForIconInDOM(timeout = 5000) {
    const startTime = Date.now();
    
    while (Date.now() - startTime < timeout) {
      const iconElement = document.querySelector('#team-icon');
      if (iconElement) {
        console.log('‚úÖ TeamManager: Ic√¥ne trouv√©e dans le DOM');
        return true;
      }
      
      // Attendre 100ms avant v√©rifier √† nouveau
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.warn('‚ö†Ô∏è TeamManager: Timeout attente ic√¥ne dans DOM');
    return false;
  }

  // ‚úÖ NOUVELLE M√âTHODE: V√©rifier visibilit√© de l'ic√¥ne
  verifyIconVisibility() {
    const iconElement = document.querySelector('#team-icon');
    if (!iconElement) {
      console.error('‚ùå TeamManager: Ic√¥ne team manquante dans le DOM !');
      this.handleMissingIcon();
      return false;
    }
    
    const isVisible = iconElement.style.display !== 'none' && 
                     !iconElement.classList.contains('hidden') &&
                     iconElement.offsetParent !== null;
    
    if (!isVisible) {
      console.warn('‚ö†Ô∏è TeamManager: Ic√¥ne team pr√©sente mais invisible');
      this.handleInvisibleIcon(iconElement);
      return false;
    }
    
    console.log('‚úÖ TeamManager: Ic√¥ne team visible et OK');
    return true;
  }

  // ‚úÖ NOUVELLE M√âTHODE: G√©rer ic√¥ne manquante
  handleMissingIcon() {
    if (this.iconRetryCount >= this.maxIconRetries) {
      console.error('‚ùå TeamManager: Trop de tentatives de r√©cup√©ration d\'ic√¥ne');
      return;
    }
    
    this.iconRetryCount++;
    console.log(`üîÑ TeamManager: Tentative r√©cup√©ration ic√¥ne ${this.iconRetryCount}/${this.maxIconRetries}`);
    
    // Tenter de recr√©er l'ic√¥ne
    setTimeout(() => {
      if (!this.isDestroyed && this.teamUI) {
        try {
          // Nettoyer l'ancienne ic√¥ne
          if (this.teamIcon) {
            this.teamIcon.destroy?.();
          }
          
          // Cr√©er une nouvelle ic√¥ne
          this.teamIcon = new TeamIcon(this.teamUI);
          
          setTimeout(() => {
            if (this.teamIcon) {
              this.teamIcon.show();
            }
          }, 300);
          
        } catch (error) {
          console.error('‚ùå TeamManager: Erreur recr√©ation ic√¥ne:', error);
        }
      }
    }, 1000 * this.iconRetryCount); // D√©lai progressif
  }

  // ‚úÖ NOUVELLE M√âTHODE: G√©rer ic√¥ne invisible
  handleInvisibleIcon(iconElement) {
    console.log('üîß TeamManager: Correction visibilit√© ic√¥ne...');
    
    // Forcer la visibilit√©
    iconElement.style.display = '';
    iconElement.classList.remove('hidden');
    
    // R√©appliquer les styles si n√©cessaire
    if (this.teamIcon && this.teamIcon.show) {
      this.teamIcon.show();
    }
  }

  // ‚úÖ M√âTHODE INCHANG√âE: Setup des listeners serveur
  setupServerListeners() {
    if (!this.gameRoom) {
      console.error('‚ùå TeamManager: Pas de gameRoom pour les listeners');
      return;
    }

    console.log('üîß TeamManager: Configuration listeners...');

    try {
      this.gameRoom.onMessage("teamData", (data) => {
        this.handleTeamData(data);
      });

      this.gameRoom.onMessage("teamStats", (data) => {
        this.handleTeamStats(data);
      });

      this.gameRoom.onMessage("pokemonAddedToTeam", (data) => {
        this.handlePokemonAdded(data);
      });

      this.gameRoom.onMessage("pokemonRemovedFromTeam", (data) => {
        this.handlePokemonRemoved(data);
      });

      this.gameRoom.onMessage("pokemonUpdated", (data) => {
        this.handlePokemonUpdate(data);
      });

      this.gameRoom.onMessage("teamHealed", (data) => {
        this.handleTeamHealed(data);
      });

      this.gameRoom.onMessage("teamActionResult", (data) => {
        this.handleTeamActionResult(data);
      });

      this.gameRoom.onMessage("battleStart", (data) => {
        this.handleBattleStart(data);
      });

      this.gameRoom.onMessage("battleEnd", (data) => {
        this.handleBattleEnd(data);
      });

      this.gameRoom.onMessage("pokemonCaught", (data) => {
        this.handlePokemonCaught(data);
      });

      console.log('‚úÖ TeamManager: Listeners configur√©s');

    } catch (error) {
      console.error('‚ùå TeamManager: Erreur setup listeners:', error);
    }
  }

  // ‚úÖ M√âTHODES INCHANG√âES: Handlers simples
  setupBasicConnectionHandling() {
    if (!this.gameRoom) return;
    console.log('‚úÖ TeamManager: Gestion connexion basique configur√©e');
  }

  safeSend(messageType, data = {}) {
    if (this.isDestroyed) return false;
    
    if (this.gameRoom && this.gameRoom.connection && this.gameRoom.connection.readyState === 1) {
      try {
        this.gameRoom.send(messageType, data);
        return true;
      } catch (error) {
        console.error(`‚ùå Erreur envoi ${messageType}:`, error);
        return false;
      }
    } else {
      console.warn(`‚ö†Ô∏è Cannot send ${messageType}: connection not ready`);
      return false;
    }
  }

  requestTeamData() {
    if (this.isDestroyed) return;
    
    console.log('üì° TeamManager: Demande donn√©es √©quipe...');
    this.safeSend("getTeam");
  }

  // ‚úÖ HANDLERS INCHANG√âS
  handleTeamData(data) {
    if (this.isDestroyed) return;
    
    try {
      console.log('‚öîÔ∏è Donn√©es d\'√©quipe re√ßues:', data);
      
      this.teamData = Array.isArray(data.team) ? data.team : [];
      this.calculateStats();
      
      if (this.teamUI && this.teamUI.updateTeamData) {
        this.teamUI.updateTeamData(data);
      }
      
      if (this.teamIcon && this.teamIcon.updateTeamStats) {
        this.teamIcon.updateTeamStats(this.teamStats);
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handleTeamData:', error);
    }
  }

  handleTeamStats(data) {
    if (this.isDestroyed) return;
    
    try {
      console.log('‚öîÔ∏è Statistiques d\'√©quipe re√ßues:', data);
      
      this.teamStats = { ...this.teamStats, ...data };
      
      if (this.teamIcon && this.teamIcon.updateTeamStats) {
        this.teamIcon.updateTeamStats(this.teamStats);
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handleTeamStats:', error);
    }
  }

  handlePokemonAdded(data) {
    if (this.isDestroyed) return;
    
    try {
      console.log('‚öîÔ∏è Pok√©mon ajout√©:', data);
      
      if (data.pokemon) {
        this.teamData.push(data.pokemon);
        this.calculateStats();
        
        if (this.callbacks.onPokemonAdded) {
          this.callbacks.onPokemonAdded(data.pokemon);
        }
        
        if (this.teamIcon && this.teamIcon.onPokemonAdded) {
          this.teamIcon.onPokemonAdded(data.pokemon);
        }
        
        const name = data.pokemon.nickname || data.pokemon.name;
        this.showNotification(`${name} ajout√© √† l'√©quipe!`, 'success');
        
        if (this.teamUI && this.teamUI.isOpen()) {
          this.requestTeamData();
        }
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handlePokemonAdded:', error);
    }
  }

  handlePokemonRemoved(data) {
    if (this.isDestroyed) return;
    
    try {
      console.log('‚öîÔ∏è Pok√©mon retir√©:', data);
      
      if (data.pokemonId) {
        this.teamData = this.teamData.filter(p => p._id !== data.pokemonId);
        this.calculateStats();
        
        if (this.callbacks.onPokemonRemoved) {
          this.callbacks.onPokemonRemoved(data);
        }
        
        if (this.teamIcon && this.teamIcon.onPokemonRemoved) {
          this.teamIcon.onPokemonRemoved();
        }
        
        this.showNotification('Pok√©mon retir√© de l\'√©quipe', 'info');
        
        if (this.teamUI && this.teamUI.isOpen()) {
          this.requestTeamData();
        }
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handlePokemonRemoved:', error);
    }
  }

  handlePokemonUpdate(data) {
    if (this.isDestroyed) return;
    
    try {
      console.log('‚öîÔ∏è Pok√©mon mis √† jour:', data);
      
      if (data.pokemonId) {
        const pokemonIndex = this.teamData.findIndex(p => p._id === data.pokemonId);
        if (pokemonIndex !== -1) {
          this.teamData[pokemonIndex] = { ...this.teamData[pokemonIndex], ...data.updates };
          this.calculateStats();
          
          if (this.teamUI && this.teamUI.handlePokemonUpdate) {
            this.teamUI.handlePokemonUpdate(data);
          }
        }
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handlePokemonUpdate:', error);
    }
  }

  handleTeamHealed(data) {
    if (this.isDestroyed) return;
    
    try {
      console.log('‚öîÔ∏è √âquipe soign√©e:', data);
      
      if (this.callbacks.onTeamHealed) {
        this.callbacks.onTeamHealed(data);
      }
      
      this.showNotification('√âquipe soign√©e avec succ√®s!', 'success');
      this.requestTeamData();
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handleTeamHealed:', error);
    }
  }

  handleTeamActionResult(data) {
    if (this.isDestroyed) return;
    
    try {
      console.log('‚öîÔ∏è R√©sultat action √©quipe:', data);
      
      if (data.success) {
        this.showNotification(data.message || 'Action r√©ussie', 'success');
        this.requestTeamData();
      } else {
        this.showNotification(data.message || 'Action √©chou√©e', 'error');
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handleTeamActionResult:', error);
    }
  }

  handleBattleStart(data) {
    if (this.isDestroyed) return;
    
    try {
      console.log('‚öîÔ∏è Combat d√©marr√©:', data);
      
      this.isInBattle = true;
      
      if (this.callbacks.onBattleStart) {
        this.callbacks.onBattleStart(data);
      }
      
      if (this.teamIcon && this.teamIcon.onBattleStart) {
        this.teamIcon.onBattleStart();
      }
      
      if (this.teamUI && this.teamUI.isOpen()) {
        this.teamUI.hide();
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handleBattleStart:', error);
    }
  }

  handleBattleEnd(data) {
    if (this.isDestroyed) return;
    
    try {
      console.log('‚öîÔ∏è Combat termin√©:', data);
      
      this.isInBattle = false;
      
      if (this.callbacks.onBattleEnd) {
        this.callbacks.onBattleEnd(data);
      }
      
      if (this.teamIcon && this.teamIcon.onBattleEnd) {
        this.teamIcon.onBattleEnd();
      }
      
      this.requestTeamData();
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handleBattleEnd:', error);
    }
  }

  handlePokemonCaught(data) {
    if (this.isDestroyed) return;
    
    try {
      console.log('‚öîÔ∏è Pok√©mon captur√©:', data);
      
      if (data.addedToTeam && data.pokemon) {
        const name = data.pokemon.nickname || data.pokemon.name;
        this.showNotification(`${name} ajout√© √† l'√©quipe!`, 'success');
        
        if (this.teamUI && this.teamUI.onPokemonCaught) {
          this.teamUI.onPokemonCaught(data.pokemon);
        }
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur handlePokemonCaught:', error);
    }
  }

  // ‚úÖ M√âTHODES PUBLIQUES AVEC PROTECTION
  toggleTeamUI() {
    if (this.isDestroyed || !this.isInitialized) {
      console.warn('‚ö†Ô∏è TeamManager: Syst√®me non pr√™t pour toggle');
      return;
    }

    if (!this.canInteract()) {
      this.showNotification('Impossible d\'ouvrir l\'√©quipe maintenant', 'warning');
      return;
    }
    
    if (this.teamUI) {
      this.teamUI.toggle();
    } else {
      console.warn('‚ö†Ô∏è TeamManager: TeamUI non disponible');
    }
  }

  openTeamUI() {
    if (this.teamUI && this.canInteract()) {
      this.teamUI.show();
    }
  }

  closeTeamUI() {
    if (this.teamUI) {
      this.teamUI.hide();
    }
  }

  // ‚úÖ ACTIONS DE BASE INCHANG√âES
  healTeam() {
    if (this.safeSend("healTeam")) {
      this.showNotification('Demande de soin envoy√©e...', 'info');
    } else {
      this.showNotification('Impossible de soigner l\'√©quipe', 'error');
    }
  }

  healPokemon(pokemonId) {
    if (this.safeSend("healPokemon", { pokemonId })) {
      this.showNotification('Demande de soin envoy√©e...', 'info');
    } else {
      this.showNotification('Impossible de soigner le Pok√©mon', 'error');
    }
  }

  removePokemon(pokemonId) {
    this.safeSend("removeFromTeam", { pokemonId });
  }

  swapPokemon(fromSlot, toSlot) {
    this.safeSend("swapTeamSlots", { slotA: fromSlot, slotB: toSlot });
  }

  autoArrangeTeam() {
    this.safeSend("autoArrangeTeam");
  }

  // ‚úÖ CALLBACKS INCHANG√âS
  onPokemonAdded(callback) {
    this.callbacks.onPokemonAdded = callback;
  }

  onPokemonRemoved(callback) {
    this.callbacks.onPokemonRemoved = callback;
  }

  onTeamHealed(callback) {
    this.callbacks.onTeamHealed = callback;
  }

  onBattleStart(callback) {
    this.callbacks.onBattleStart = callback;
  }

  onBattleEnd(callback) {
    this.callbacks.onBattleEnd = callback;
  }

  // ‚úÖ M√âTHODES UTILITAIRES INCHANG√âES
  calculateStats() {
    if (this.isDestroyed) return;
    
    try {
      this.teamStats.totalPokemon = this.teamData.length;
      this.teamStats.alivePokemon = this.teamData.filter(p => p && p.currentHp > 0).length;
      this.teamStats.faintedPokemon = this.teamData.filter(p => p && p.currentHp === 0).length;
      this.teamStats.canBattle = this.teamStats.alivePokemon > 0;
      
      if (this.teamData.length > 0) {
        const totalLevel = this.teamData.reduce((sum, p) => sum + (p?.level || 1), 0);
        this.teamStats.averageLevel = Math.round(totalLevel / this.teamData.length);
      } else {
        this.teamStats.averageLevel = 0;
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur calculateStats:', error);
    }
  }

  canInteract() {
    if (!this.isInitialized || this.isDestroyed) return false;
    
    try {
      const questDialogOpen = document.querySelector('.quest-dialog-overlay') !== null;
      const chatOpen = typeof window.isChatFocused === 'function' ? window.isChatFocused() : false;
      const inventoryOpen = typeof window.isInventoryOpen === 'function' ? window.isInventoryOpen() : false;
      const shopOpen = document.querySelector('#shop-overlay') && !document.querySelector('#shop-overlay').classList.contains('hidden');
      const dialogueOpen = document.querySelector('#dialogue-box')?.style.display !== 'none';
      
      return !this.isInBattle && !questDialogOpen && !chatOpen && !inventoryOpen && !shopOpen && !dialogueOpen;
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur canInteract:', error);
      return false;
    }
  }

  showNotification(message, type = 'info') {
    try {
      if (typeof window.showNotification === 'function') {
        window.showNotification(message, type);
      } else if (typeof window.showGameNotification === 'function') {
        window.showGameNotification(message, type);
      } else {
        console.log(`üì¢ TeamManager [${type}]: ${message}`);
      }
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur notification:', error);
    }
  }

  setupGlobalShortcuts() {
    // Raccourci global T
    document.addEventListener('keydown', (e) => {
      if (e.key.toLowerCase() === 't' && 
          !e.target.matches('input, textarea, [contenteditable]') &&
          this.canInteract()) {
        e.preventDefault();
        this.toggleTeamUI();
      }
    });

    // Int√©gration globale
    window.isTeamOpen = () => this.teamUI?.isOpen() || false;
    window.TeamManager = this;
  }

  // ‚úÖ GETTERS INCHANG√âS
  getTeamData() {
    return [...this.teamData];
  }

  getTeamStats() {
    return { ...this.teamStats };
  }

  canBattle() {
    return this.teamStats.canBattle;
  }

  isTeamFull() {
    return this.teamData.length >= 6;
  }

  getPokemonBySlot(slot) {
    return this.teamData[slot] || null;
  }

  getAlivePokemon() {
    return this.teamData.filter(p => p && p.currentHp > 0);
  }

  // ‚úÖ DEBUG AM√âLIOR√â
  debugState() {
    console.log('üîç TeamManager Debug:', {
      isInitialized: this.isInitialized,
      isDestroyed: this.isDestroyed,
      teamCount: this.teamData.length,
      teamStats: this.teamStats,
      hasTeamUI: !!this.teamUI,
      hasTeamIcon: !!this.teamIcon,
      iconInDOM: !!document.querySelector('#team-icon'),
      iconVisible: this.verifyIconVisibility(),
      canInteract: this.canInteract(),
      isInBattle: this.isInBattle,
      iconRetryCount: this.iconRetryCount
    });
  }

  // ‚úÖ NOUVELLE M√âTHODE: V√©rification sant√©
  healthCheck() {
    const health = {
      healthy: true,
      issues: []
    };

    if (this.isDestroyed) {
      health.healthy = false;
      health.issues.push('Instance d√©truite');
    }

    if (!this.isInitialized) {
      health.healthy = false;
      health.issues.push('Non initialis√©');
    }

    if (!this.gameRoom) {
      health.healthy = false;
      health.issues.push('Pas de gameRoom');
    }

    if (!this.teamUI) {
      health.healthy = false;
      health.issues.push('TeamUI manquant');
    }

    if (!this.teamIcon) {
      health.healthy = false;
      health.issues.push('TeamIcon manquant');
    }

    const iconInDOM = !!document.querySelector('#team-icon');
    if (!iconInDOM) {
      health.healthy = false;
      health.issues.push('Ic√¥ne pas dans le DOM');
    }

    return health;
  }

  // ‚úÖ NOUVELLE M√âTHODE: Forcer r√©paration
  async forceRepair() {
    console.log('üîß TeamManager: === R√âPARATION FORC√âE ===');
    
    if (this.isDestroyed) {
      console.error('‚ùå Cannot repair destroyed instance');
      return false;
    }

    try {
      // 1. V√©rifier et r√©parer l'ic√¥ne
      if (!document.querySelector('#team-icon')) {
        console.log('üîß R√©paration: Recr√©ation ic√¥ne...');
        await this.recreateIcon();
      }

      // 2. V√©rifier la visibilit√©
      if (!this.verifyIconVisibility()) {
        console.log('üîß R√©paration: Correction visibilit√©...');
        this.forceIconVisibility();
      }

      // 3. Re-demander les donn√©es
      console.log('üîß R√©paration: Resync donn√©es...');
      this.requestTeamData();

      // 4. Reset les compteurs d'erreur
      this.iconRetryCount = 0;

      console.log('‚úÖ TeamManager: R√©paration termin√©e');
      return true;

    } catch (error) {
      console.error('‚ùå TeamManager: Erreur r√©paration:', error);
      return false;
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Recr√©er ic√¥ne
  async recreateIcon() {
    try {
      console.log('üîß TeamManager: Recr√©ation ic√¥ne...');
      
      // Nettoyer l'ancienne ic√¥ne
      if (this.teamIcon) {
        try {
          this.teamIcon.destroy?.();
        } catch (e) {
          console.warn('‚ö†Ô∏è Erreur destruction ancienne ic√¥ne:', e);
        }
        this.teamIcon = null;
      }

      // Supprimer du DOM si pr√©sent
      const oldIcon = document.querySelector('#team-icon');
      if (oldIcon) {
        oldIcon.remove();
      }

      // Attendre un peu
      await new Promise(resolve => setTimeout(resolve, 200));

      // Recr√©er
      if (this.teamUI) {
        this.teamIcon = new TeamIcon(this.teamUI);
        
        // Attendre que ce soit dans le DOM
        await this.waitForIconInDOM();
        
        // Afficher
        setTimeout(() => {
          if (this.teamIcon && !this.isDestroyed) {
            this.teamIcon.show();
          }
        }, 300);
        
        console.log('‚úÖ TeamManager: Ic√¥ne recr√©√©e');
        return true;
      }
      
    } catch (error) {
      console.error('‚ùå TeamManager: Erreur recr√©ation ic√¥ne:', error);
      return false;
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Forcer visibilit√© ic√¥ne
  forceIconVisibility() {
    const iconElement = document.querySelector('#team-icon');
    if (iconElement) {
      console.log('üîß TeamManager: Force visibilit√© ic√¥ne...');
      
      // Supprimer tous les styles qui pourraient cacher
      iconElement.style.display = '';
      iconElement.style.visibility = '';
      iconElement.style.opacity = '';
      iconElement.classList.remove('hidden');
      
      // R√©appliquer la m√©thode show si disponible
      if (this.teamIcon && this.teamIcon.show) {
        this.teamIcon.show();
      }
      
      console.log('‚úÖ TeamManager: Visibilit√© forc√©e');
    }
  }

  // ‚úÖ DESTROY AM√âLIOR√â avec protection
  destroy() {
    if (this.isDestroyed) {
      console.log('‚ÑπÔ∏è TeamManager: D√©j√† d√©truit');
      return;
    }

    console.log('‚öîÔ∏è TeamManager: === DESTRUCTION S√âCURIS√âE ===');
    
    this.isDestroyed = true;
    this.isInitialized = false;
    
    // Annuler l'initialisation en cours si pr√©sente
    if (this.initializationPromise) {
      this.initializationPromise = null;
    }

    // Nettoyer les composants UI
    try {
      if (this.teamUI) {
        this.teamUI.destroy?.();
        this.teamUI = null;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur destruction TeamUI:', error);
    }
    
    try {
      if (this.teamIcon) {
        this.teamIcon.destroy?.();
        this.teamIcon = null;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur destruction TeamIcon:', error);
    }
    
    // Nettoyer le DOM
    try {
      const iconElement = document.querySelector('#team-icon');
      if (iconElement) {
        iconElement.remove();
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur suppression DOM:', error);
    }
    
    // Nettoyer les callbacks
    this.callbacks = {
      onPokemonAdded: null,
      onPokemonRemoved: null,
      onTeamHealed: null,
      onBattleStart: null,
      onBattleEnd: null
    };
    
    // Nettoyer les r√©f√©rences globales
    try {
      if (window.isTeamOpen) {
        delete window.isTeamOpen;
      }
      
      if (window.TeamManager === this) {
        window.TeamManager = null;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur nettoyage globals:', error);
    }
    
    // Nettoyer les donn√©es
    this.teamData = [];
    this.gameRoom = null;
    this.iconRetryCount = 0;
    
    console.log('‚úÖ TeamManager: Destruction termin√©e');
  }

  // ‚úÖ NOUVELLE M√âTHODE: V√©rification p√©riodique
  startHealthMonitoring() {
    if (this.healthMonitorInterval) {
      clearInterval(this.healthMonitorInterval);
    }

    this.healthMonitorInterval = setInterval(() => {
      if (this.isDestroyed) {
        clearInterval(this.healthMonitorInterval);
        return;
      }

      const health = this.healthCheck();
      if (!health.healthy) {
        console.warn('‚ö†Ô∏è TeamManager: Probl√®mes d√©tect√©s:', health.issues);
        
        // Tentative de r√©paration automatique pour certains probl√®mes
        if (health.issues.includes('Ic√¥ne pas dans le DOM') && this.iconRetryCount < this.maxIconRetries) {
          console.log('üîß TeamManager: R√©paration automatique ic√¥ne...');
          this.handleMissingIcon();
        }
      }
    }, 10000); // V√©rification toutes les 10 secondes
  }

  stopHealthMonitoring() {
    if (this.healthMonitorInterval) {
      clearInterval(this.healthMonitorInterval);
      this.healthMonitorInterval = null;
    }
  }
}

// ‚úÖ FONCTION D'INITIALISATION AM√âLIOR√âE
export async function initializeTeamSystem(gameRoom) {
  console.log('üîß === INITIALISATION TEAM SYSTEM S√âCURIS√âE ===');
  
  // V√©rifier si d√©j√† initialis√©
  if (window.TeamManager && window.TeamManager.isInitialized && !window.TeamManager.isDestroyed) {
    console.log('‚ÑπÔ∏è TeamManager d√©j√† initialis√© et fonctionnel');
    
    // V√©rifier la sant√©
    const health = window.TeamManager.healthCheck();
    if (health.healthy) {
      return window.TeamManager;
    } else {
      console.log('‚ö†Ô∏è TeamManager existe mais probl√©matique, tentative r√©paration...');
      const repaired = await window.TeamManager.forceRepair();
      if (repaired) {
        return window.TeamManager;
      }
    }
  }
  
  // Nettoyer l'ancien s'il existe
  if (window.TeamManager) {
    console.log('üßπ Nettoyage ancien TeamManager...');
    try {
      window.TeamManager.destroy();
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur destruction ancien TeamManager:', error);
    }
    window.TeamManager = null;
  }
  
  if (!gameRoom) {
    console.error('‚ùå initializeTeamSystem: Pas de gameRoom fournie');
    return null;
  }

  try {
    console.log('üöÄ Cr√©ation nouveau TeamManager...');
    
    const teamManager = new TeamManager(gameRoom);
    
    // Initialiser de mani√®re asynchrone
    const success = await teamManager.init();
    
    if (success) {
      // Enregistrer globalement
      window.TeamManager = teamManager;
      window.teamManagerGlobal = teamManager;
      
      // D√©marrer la surveillance de sant√©
      teamManager.startHealthMonitoring();
      
      console.log('‚úÖ TeamManager initialis√© avec succ√®s');
      return teamManager;
    } else {
      console.error('‚ùå √âchec initialisation TeamManager');
      teamManager.destroy();
      return null;
    }
    
  } catch (error) {
    console.error('‚ùå Erreur initializeTeamSystem:', error);
    return null;
  }
}

// ‚úÖ FONCTION DE R√âPARATION GLOBALE
window.repairTeamSystem = async function() {
  console.log('üîß === R√âPARATION GLOBALE TEAM SYSTEM ===');
  
  if (window.TeamManager && !window.TeamManager.isDestroyed) {
    const success = await window.TeamManager.forceRepair();
    if (success) {
      console.log('‚úÖ R√©paration r√©ussie');
      return true;
    }
  }
  
  // Si r√©paration √©choue, r√©initialiser compl√®tement
  console.log('üîÑ R√©initialisation compl√®te...');
  
  const gameRoom = window.globalNetworkManager?.room;
  if (gameRoom) {
    const newTeamManager = await initializeTeamSystem(gameRoom);
    return !!newTeamManager;
  }
  
  console.error('‚ùå Impossible de r√©parer: pas de gameRoom');
  return false;
};

// ‚úÖ FONCTIONS DE DEBUG GLOBALES AM√âLIOR√âES
window.debugTeamSystemComplete = function() {
  console.log('üîç === DEBUG TEAM SYSTEM COMPLET ===');
  
  const status = {
    // Manager global
    hasGlobalManager: !!window.TeamManager,
    managerInitialized: window.TeamManager?.isInitialized || false,
    managerDestroyed: window.TeamManager?.isDestroyed || false,
    
    // UI Elements
    teamIconInDOM: !!document.querySelector('#team-icon'),
    teamIconVisible: false,
    teamOverlayInDOM: !!document.querySelector('#team-overlay'),
    
    // Health check
    healthCheck: null,
    
    // Network
    hasGameRoom: !!window.globalNetworkManager?.room,
    networkConnected: window.globalNetworkManager?.isConnected || false
  };
  
  // V√©rifier visibilit√© ic√¥ne
  if (status.teamIconInDOM) {
    const icon = document.querySelector('#team-icon');
    status.teamIconVisible = icon.offsetParent !== null && 
                            icon.style.display !== 'none' &&
                            !icon.classList.contains('hidden');
  }
  
  // Health check si manager existe
  if (window.TeamManager && !window.TeamManager.isDestroyed) {
    status.healthCheck = window.TeamManager.healthCheck();
  }
  
  console.log('üìä Status:', status);
  
  // Recommandations
  if (!status.hasGlobalManager) {
    console.log('üí° Recommandation: Ex√©cuter window.initTeamSystem()');
  } else if (!status.managerInitialized) {
    console.log('üí° Recommandation: Manager pas initialis√©');
  } else if (status.healthCheck && !status.healthCheck.healthy) {
    console.log('üí° Recommandation: Ex√©cuter window.repairTeamSystem()');
    console.log('‚ùå Probl√®mes:', status.healthCheck.issues);
  } else if (!status.teamIconVisible) {
    console.log('üí° Recommandation: Ic√¥ne invisible, v√©rifier CSS');
  } else {
    console.log('‚úÖ Syst√®me Team semble fonctionnel');
  }
  
  return status;
};

// ‚úÖ TEST RAPIDE
window.testTeamSystemQuick = function() {
  console.log('üß™ === TEST RAPIDE TEAM SYSTEM ===');
  
  if (!window.TeamManager) {
    console.log('‚ùå Pas de TeamManager');
    return false;
  }
  
  if (window.TeamManager.isDestroyed) {
    console.log('‚ùå TeamManager d√©truit');
    return false;
  }
  
  if (!window.TeamManager.isInitialized) {
    console.log('‚ùå TeamManager pas initialis√©');
    return false;
  }
  
  const iconExists = !!document.querySelector('#team-icon');
  console.log(`üéØ Ic√¥ne dans DOM: ${iconExists}`);
  
  if (iconExists) {
    try {
      window.TeamManager.toggleTeamUI();
      console.log('‚úÖ Toggle test r√©ussi');
      
      setTimeout(() => {
        window.TeamManager.toggleTeamUI();
        console.log('‚úÖ Test complet r√©ussi');
      }, 1000);
      
      return true;
    } catch (error) {
      console.error('‚ùå Erreur test:', error);
      return false;
    }
  }
  
  return false;
};

export default TeamManager;

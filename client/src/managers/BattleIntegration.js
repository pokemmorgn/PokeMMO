// client/src/managers/BattleIntegration.js - Int√©gration compl√®te du syst√®me de combat

import { BattleScene } from '../scenes/BattleScene.js';
import { BattleManager } from '../Battle/BattleManager.js';
import { BattleConnection } from '../Battle/BattleConnection.js';
import { PokemonSelectionUI } from '../Battle/PokemonSelectionUI.js';

/**
 * Gestionnaire d'int√©gration complet du syst√®me de combat
 * Version finale avec interface, s√©lection d'√©quipe et r√©seau
 */
export class BattleIntegration {
  constructor(gameManager) {
    this.gameManager = gameManager;
    
    // Composants du syst√®me de combat
    this.battleScene = null;
    this.battleManager = null;
    this.battleConnection = null;
    this.pokemonSelectionUI = null;
    
    // √âtat
    this.isInitialized = false;
    this.isInBattle = false;
    this.isSelectingPokemon = false;
    
    // R√©f√©rences
    this.worldRoom = null;
    this.phaserGame = null;
    
    // Combat en cours
    this.currentBattleData = null;
    this.selectedPokemon = null;
    
    console.log('‚öîÔ∏è [BattleIntegration] Constructeur initialis√© (version finale)');
  }

  // === INITIALISATION ===

  /**
   * Initialise le syst√®me de combat complet
   */
  async initialize(worldRoom, phaserGame) {
    console.log('üîß [BattleIntegration] Initialisation du syst√®me complet...');
    
    if (!worldRoom || !phaserGame) {
      console.error('‚ùå [BattleIntegration] WorldRoom ou PhaserGame manquant');
      return false;
    }
    
    this.worldRoom = worldRoom;
    this.phaserGame = phaserGame;
    
    try {
      // 1. Cr√©er la BattleConnection
      await this.initializeBattleConnection();
      
      // 2. Cr√©er l'interface de s√©lection Pok√©mon
      await this.initializePokemonSelection();
      
      // 3. Cr√©er et initialiser la BattleScene
      await this.initializeBattleScene();
      
      // 4. Setup des √©v√©nements globaux
      this.setupIntegrationEvents();
      
      // 5. Charger les styles CSS
      this.loadBattleStyles();
      
      this.isInitialized = true;
      console.log('‚úÖ [BattleIntegration] Syst√®me complet initialis√©');
      return true;
      
    } catch (error) {
      console.error('‚ùå [BattleIntegration] Erreur lors de l\'initialisation:', error);
      return false;
    }
  }

  // === INITIALISATION DES COMPOSANTS ===

  async initializeBattleConnection() {
    console.log('üåê [BattleIntegration] Initialisation BattleConnection...');
    
    this.battleConnection = new BattleConnection(this.gameManager);
    
    // Cr√©er un mock NetworkManager pour la compatibilit√©
    const mockNetworkManager = {
      worldRoom: this.worldRoom,
      client: this.worldRoom.connection || this.worldRoom._client || window.client,
      room: this.worldRoom,
      isConnected: true
    };
    
    const success = this.battleConnection.initialize(mockNetworkManager);
    
    if (!success) {
      throw new Error('√âchec initialisation BattleConnection');
    }
    
    console.log('‚úÖ [BattleIntegration] BattleConnection initialis√©e');
  }

  async initializePokemonSelection() {
    console.log('üîÑ [BattleIntegration] Initialisation PokemonSelectionUI...');
    
    this.pokemonSelectionUI = new PokemonSelectionUI(
      this.gameManager,
      (selectedPokemon) => this.handlePokemonSelected(selectedPokemon)
    );
    
    this.pokemonSelectionUI.initialize();
    
    console.log('‚úÖ [BattleIntegration] PokemonSelectionUI initialis√©e');
  }

  async initializeBattleScene() {
    console.log('üé¨ [BattleIntegration] Initialisation BattleScene...');
    
    try {
      // V√©rifier si BattleScene existe d√©j√†
      let battleSceneExists = false;
      
      if (this.phaserGame?.scene?.manager) {
        const existingScene = this.phaserGame.scene.getScene('BattleScene');
        if (existingScene) {
          this.battleScene = existingScene;
          battleSceneExists = true;
          console.log('‚úÖ [BattleIntegration] BattleScene existante trouv√©e');
        }
      }
      
      // Cr√©er la BattleScene si n√©cessaire
      if (!battleSceneExists) {
        this.battleScene = new BattleScene();
        
        if (this.phaserGame.scene && this.phaserGame.scene.add) {
          this.phaserGame.scene.add('BattleScene', this.battleScene, false);
          console.log('‚úÖ [BattleIntegration] BattleScene cr√©√©e et ajout√©e');
        } else {
          console.warn('‚ö†Ô∏è [BattleIntegration] Scene manager non disponible');
        }
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è [BattleIntegration] Erreur BattleScene:', error);
      // Continuer m√™me en cas d'erreur pour utiliser l'interface DOM
    }
    
    console.log('‚úÖ [BattleIntegration] BattleScene initialis√©e');
  }

  // === √âV√âNEMENTS GLOBAUX ===

  setupIntegrationEvents() {
    if (!this.battleConnection) return;
    
    console.log('üîó [BattleIntegration] Configuration des √©v√©nements d\'int√©gration...');
    
    // === √âV√âNEMENTS DE RENCONTRE ===
    this.battleConnection.on('wildEncounterStart', (data) => {
      this.handleWildEncounterStart(data);
    });
    
    this.battleConnection.on('battleRoomCreated', (data) => {
      this.handleBattleRoomCreated(data);
    });
    
    this.battleConnection.on('battleRoomConnected', (data) => {
      this.handleBattleRoomConnected(data);
    });
    
    // === √âV√âNEMENTS DE COMBAT ===
    this.battleConnection.on('battleJoined', (data) => {
      this.handleBattleJoined(data);
    });
    
    this.battleConnection.on('battleStart', (data) => {
      this.handleBattleStart(data);
    });
    
    this.battleConnection.on('battleEnd', (data) => {
      this.handleBattleEnd(data);
    });
    
    this.battleConnection.on('battleLeft', (data) => {
      this.handleBattleLeft(data);
    });
    
    this.battleConnection.on('battleError', (data) => {
      this.handleBattleError(data);
    });
    
    // === √âV√âNEMENTS R√âSEAU SP√âCIALIS√âS ===
    this.battleConnection.on('attackResult', (data) => {
      this.forwardToBattleScene('attackResult', data);
    });
    
    this.battleConnection.on('pokemonFainted', (data) => {
      this.forwardToBattleScene('pokemonFainted', data);
    });
    
    this.battleConnection.on('statusEffectApplied', (data) => {
      this.forwardToBattleScene('statusEffectApplied', data);
    });
    
    this.battleConnection.on('captureShake', (data) => {
      this.forwardToBattleScene('captureShake', data);
    });
    
    this.battleConnection.on('battleStateChange', (data) => {
      this.updateBattleState(data.state);
    });
    
    console.log('‚úÖ [BattleIntegration] √âv√©nements d\'int√©gration configur√©s');
  }

  // === GESTION DES RENCONTRES ===

  async handleWildEncounterStart(data) {
    console.log('üêæ [BattleIntegration] === D√âBUT RENCONTRE SAUVAGE ===');
    console.log('üìä Data re√ßue:', data);
    
    if (this.isInBattle || this.isSelectingPokemon) {
      console.warn('‚ö†Ô∏è [BattleIntegration] Combat d√©j√† en cours, ignor√©');
      return;
    }
    
    // Stocker les donn√©es de combat
    this.currentBattleData = data;
    
    // Marquer comme en cours de s√©lection
    this.isSelectingPokemon = true;
    
    // Notifier le GameManager
    if (this.gameManager?.onEncounterStart) {
      this.gameManager.onEncounterStart(data);
    }
    
    // Lancer la s√©lection de Pok√©mon
    console.log('üîÑ [BattleIntegration] Lancement s√©lection Pok√©mon...');
    
    try {
      // V√©rifier si l'√©quipe a des Pok√©mon disponibles
      if (!this.pokemonSelectionUI.hasAvailablePokemon()) {
        console.error('‚ùå [BattleIntegration] Aucun Pok√©mon disponible !');
        this.showError('Aucun Pok√©mon disponible pour le combat !');
        this.cancelBattle();
        return;
      }
      
      // Afficher l'interface de s√©lection
      this.pokemonSelectionUI.show();
      
    } catch (error) {
      console.error('‚ùå [BattleIntegration] Erreur s√©lection Pok√©mon:', error);
      
      // Fallback : s√©lection automatique
      console.log('ü§ñ [BattleIntegration] S√©lection automatique fallback...');
      const firstAvailable = this.pokemonSelectionUI.getFirstAvailablePokemon();
      if (firstAvailable) {
        this.handlePokemonSelected(firstAvailable);
      } else {
        this.cancelBattle();
      }
    }
  }

  handlePokemonSelected(selectedPokemon) {
    console.log('üéØ [BattleIntegration] Pok√©mon s√©lectionn√©:', selectedPokemon);
    
    this.isSelectingPokemon = false;
    
    if (!selectedPokemon) {
      console.log('‚ùå [BattleIntegration] S√©lection annul√©e');
      this.cancelBattle();
      return;
    }
    
    this.selectedPokemon = selectedPokemon;
    
    // Envoyer le choix au serveur
    console.log('üì§ [BattleIntegration] Envoi du choix au serveur...');
    
    const success = this.battleConnection.choosePokemon(selectedPokemon.id);
    if (!success) {
      console.error('‚ùå [BattleIntegration] √âchec envoi choix Pok√©mon');
      this.showError('Erreur de communication avec le serveur');
      this.cancelBattle();
      return;
    }
    
    console.log('‚úÖ [BattleIntegration] Choix envoy√©, attente du serveur...');
  }

  // === GESTION DU COMBAT ===

  handleBattleRoomCreated(data) {
    console.log('üè† [BattleIntegration] BattleRoom cr√©√©e:', data.battleRoomId);
    
    // La connexion √† la BattleRoom se fait automatiquement via BattleConnection
    this.currentBattleRoomId = data.battleRoomId;
    this.currentBattleType = data.battleType;
  }

  handleBattleRoomConnected(data) {
    console.log('üö™ [BattleIntegration] Connect√© √† la BattleRoom');
    
    // On est maintenant connect√© √† la BattleRoom
    // Le combat va commencer une fois que le serveur aura re√ßu notre choix de Pok√©mon
  }

  handleBattleJoined(data) {
    console.log('‚öîÔ∏è [BattleIntegration] Rejoint le combat:', data);
    
    // Marquer comme en combat
    this.isInBattle = true;
    
    // D√©sactiver le mouvement du joueur
    this.disablePlayerMovement();
  }

  handleBattleStart(data) {
    console.log('üé¨ [BattleIntegration] === D√âBUT DU COMBAT ===');
    console.log('üìä Data de combat:', data);
    
    // Lancer l'interface de combat
    this.startBattleInterface(data);
    
    // Notifier le GameManager
    if (this.gameManager?.onBattleStart) {
      this.gameManager.onBattleStart(data);
    }
  }

  startBattleInterface(battleData) {
    console.log('üñ•Ô∏è [BattleIntegration] Lancement interface de combat...');
    
    try {
      // Essayer d'utiliser la BattleScene Phaser
      if (this.battleScene && this.phaserGame?.scene) {
        console.log('üé¨ [BattleIntegration] Utilisation de la BattleScene Phaser');
        
        // D√©marrer la BattleScene
        if (this.phaserGame.scene.isActive('BattleScene')) {
          this.phaserGame.scene.bringToTop('BattleScene');
        } else {
          this.phaserGame.scene.start('BattleScene', {
            gameManager: this.gameManager,
            networkHandler: this.battleConnection,
            battleData: battleData,
            selectedPokemon: this.selectedPokemon
          });
        }
        
        // Mettre en pause la sc√®ne principale
        if (this.gameManager?.pauseGame) {
          this.gameManager.pauseGame('battle');
        }
        
      } else {
        console.log('üÜò [BattleIntegration] Fallback interface DOM');
        
        // Fallback : cr√©er une interface DOM simple
        this.createFallbackBattleInterface(battleData);
      }
      
    } catch (error) {
      console.error('‚ùå [BattleIntegration] Erreur lancement interface:', error);
      
      // Double fallback
      this.createFallbackBattleInterface(battleData);
    }
  }

  createFallbackBattleInterface(battleData) {
    console.log('üÜò [BattleIntegration] Cr√©ation interface fallback...');
    
    // Supprimer toute interface existante
    const existingOverlay = document.getElementById('fallback-battle-overlay');
    if (existingOverlay) {
      existingOverlay.remove();
    }
    
    // Cr√©er une interface basique
    const overlay = document.createElement('div');
    overlay.id = 'fallback-battle-overlay';
    overlay.style.cssText = `
      position: fixed;
      top: 7.5%;
      left: 7.5%;
      width: 85%;
      height: 85%;
      background: linear-gradient(135deg, #1a472a 0%, #2d5a3d 50%, #1a472a 100%);
      z-index: 9999;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      font-family: 'Arial', sans-serif;
      color: white;
      text-align: center;
      border-radius: 15px;
      border: 4px solid #FFD700;
      box-shadow: 0 0 30px rgba(0,0,0,0.8);
    `;
    
    const playerPokemon = this.selectedPokemon;
    const opponentPokemon = this.currentBattleData?.pokemon;
    
    overlay.innerHTML = `
      <div style="background: rgba(0,0,0,0.8); padding: 30px; border-radius: 15px; max-width: 600px; width: 90%;">
        <h1 style="color: #FFD700; margin-bottom: 20px; font-size: 2.5em;">‚öîÔ∏è COMBAT POK√âMON ‚öîÔ∏è</h1>
        
        <div style="display: flex; justify-content: space-between; align-items: center; margin: 30px 0;">
          <div style="text-align: left; flex: 1;">
            <h3 style="color: #90EE90; margin-bottom: 10px;">üîπ Votre Pok√©mon</h3>
            <p style="font-size: 1.2em; font-weight: bold;">${playerPokemon?.name || 'Inconnu'}</p>
            <p style="color: #87CEEB;">Niveau ${playerPokemon?.level || '?'}</p>
            <p style="color: #FFB6C1;">PV: ${playerPokemon?.currentHp || '?'}/${playerPokemon?.maxHp || '?'}</p>
          </div>
          
          <div style="font-size: 3em; margin: 0 20px;">‚ö°</div>
          
          <div style="text-align: right; flex: 1;">
            <h3 style="color: #FFB6C1; margin-bottom: 10px;">üî∏ Adversaire</h3>
            <p style="font-size: 1.2em; font-weight: bold;">${opponentPokemon?.name || 'Pok√©mon sauvage'}</p>
            <p style="color: #87CEEB;">Niveau ${opponentPokemon?.level || '?'}</p>
            <p style="color: #90EE90;">PV: ${opponentPokemon?.currentHp || '?'}/${opponentPokemon?.maxHp || '?'}</p>
          </div>
        </div>
        
        <div style="margin: 30px 0;">
          <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 10px; margin: 10px 0;">
            <p id="battleStatus">üîÑ <strong>Combat en cours...</strong></p>
            <p style="color: #FFD700; font-size: 0.9em;">Interface de combat en cours de d√©veloppement</p>
          </div>
        </div>
        
        <div style="display: flex; gap: 15px; justify-content: center; margin-top: 30px;">
          <button id="attackBtn" style="
            background: #DC143C; color: white; border: none; padding: 15px 25px;
            font-size: 1.1em; border-radius: 10px; cursor: pointer; font-weight: bold;
          ">‚öîÔ∏è Attaquer</button>
          
          <button id="bagBtn" style="
            background: #4169E1; color: white; border: none; padding: 15px 25px;
            font-size: 1.1em; border-radius: 10px; cursor: pointer; font-weight: bold;
          ">üéí Sac</button>
          
          <button id="runBtn" style="
            background: #696969; color: white; border: none; padding: 15px 25px;
            font-size: 1.1em; border-radius: 10px; cursor: pointer; font-weight: bold;
          ">üèÉ Fuir</button>
        </div>
        
        <div style="margin-top: 20px; font-size: 0.9em; color: #DDD;">
          <p>üí° <em>Utilisez les boutons pour jouer ou attendez que le syst√®me complet soit pr√™t</em></p>
        </div>
      </div>
    `;
    
    // Ajouter au DOM
    document.body.appendChild(overlay);
    
    // Ajouter les √©v√©nements des boutons
    this.setupFallbackEvents(overlay);
    
    console.log('‚úÖ [BattleIntegration] Interface fallback cr√©√©e');
  }

  setupFallbackEvents(overlay) {
    const attackBtn = overlay.querySelector('#attackBtn');
    const bagBtn = overlay.querySelector('#bagBtn');
    const runBtn = overlay.querySelector('#runBtn');
    const statusElement = overlay.querySelector('#battleStatus');
    
    if (attackBtn) {
      attackBtn.addEventListener('click', () => {
        statusElement.textContent = 'üí• Attaque lanc√©e !';
        attackBtn.disabled = true;
        
        // Envoyer l'action au serveur
        if (this.battleConnection) {
          this.battleConnection.useMove('tackle'); // Attaque basique
        }
        
        setTimeout(() => {
          attackBtn.disabled = false;
        }, 2000);
      });
    }
    
    if (bagBtn) {
      bagBtn.addEventListener('click', () => {
        statusElement.textContent = 'üéí Utilisation d\'un objet...';
        
        // TODO: Impl√©menter s√©lection d'objet
        if (this.battleConnection) {
          this.battleConnection.useItem('potion');
        }
      });
    }
    
    if (runBtn) {
      runBtn.addEventListener('click', () => {
        statusElement.textContent = 'üèÉ Tentative de fuite...';
        
        if (this.battleConnection) {
          this.battleConnection.attemptRun();
        }
      });
    }
  }

  // === GESTION DE FIN DE COMBAT ===

  handleBattleEnd(data) {
    console.log('üèÅ [BattleIntegration] === FIN DE COMBAT ===');
    console.log('üìä R√©sultat:', data);
    
    // Afficher les r√©sultats
    this.showBattleResult(data);
    
    // Programmer la fermeture
    setTimeout(() => {
      this.endBattle(data);
    }, 5000);
  }

  showBattleResult(data) {
    const result = data.result;
    const rewards = data.rewards;
    
    let resultMessage = '';
    let resultColor = '#FFD700';
    
    switch (result) {
      case 'victory':
        resultMessage = 'üéâ VICTOIRE ! üéâ';
        resultColor = '#00FF00';
        break;
      case 'defeat':
        resultMessage = 'üíÄ D√âFAITE üíÄ';
        resultColor = '#FF0000';
        break;
      case 'fled':
        resultMessage = 'üèÉ FUITE R√âUSSIE üèÉ';
        resultColor = '#FFD700';
        break;
      case 'captured':
        resultMessage = 'üéØ POK√âMON CAPTUR√â ! üéØ';
        resultColor = '#00FF00';
        break;
      default:
        resultMessage = '‚öîÔ∏è COMBAT TERMIN√â ‚öîÔ∏è';
    }
    
    // Mettre √† jour l'interface existante ou cr√©er un overlay de r√©sultats
    const statusElement = document.querySelector('#battleStatus');
    if (statusElement) {
      statusElement.innerHTML = `<span style="color: ${resultColor}; font-size: 1.2em;">${resultMessage}</span>`;
      
      if (rewards) {
        let rewardsText = '<br><br>üéÅ R√©compenses:<br>';
        if (rewards.experience > 0) {
          rewardsText += `‚ú® +${rewards.experience} XP<br>`;
        }
        if (rewards.gold > 0) {
          rewardsText += `üí∞ +${rewards.gold} Or<br>`;
        }
        statusElement.innerHTML += rewardsText;
      }
    }
    
    // Notifier le GameManager
    if (this.gameManager?.onBattleEnd) {
      this.gameManager.onBattleEnd(data);
    }
  }

  handleBattleLeft(data) {
    console.log('üëã [BattleIntegration] Combat quitt√©:', data);
    
    this.endBattle(data);
  }

  handleBattleError(data) {
    console.error('‚ùå [BattleIntegration] Erreur de combat:', data);
    
    this.showError(`Erreur de combat: ${data.message}`);
    
    // Forcer la fin en cas d'erreur critique
    if (data.critical) {
      setTimeout(() => {
        this.endBattle({ reason: 'error', error: data });
      }, 3000);
    }
  }

  endBattle(data = {}) {
    console.log('üèÅ [BattleIntegration] === NETTOYAGE FIN DE COMBAT ===');
    
    this.isInBattle = false;
    this.isSelectingPokemon = false;
    
    // Fermer toutes les interfaces
    this.closeAllBattleInterfaces();
    
    // R√©activer le mouvement du joueur
    this.enablePlayerMovement();
    
    // Fermer la BattleScene si active
    if (this.battleScene && this.phaserGame?.scene) {
      try {
        if (this.phaserGame.scene.isActive('BattleScene')) {
          this.phaserGame.scene.sleep('BattleScene');
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è [BattleIntegration] Erreur fermeture BattleScene:', error);
      }
    }
    
    // Reprendre le jeu principal
    if (this.gameManager?.resumeGame) {
      this.gameManager.resumeGame('battle');
    }
    
    // Nettoyer la connexion battle
    if (this.battleConnection) {
      this.battleConnection.leaveBattle();
    }
    
    // Nettoyer les donn√©es temporaires
    this.currentBattleData = null;
    this.selectedPokemon = null;
    this.currentBattleRoomId = null;
    this.currentBattleType = null;
    
    console.log('‚úÖ [BattleIntegration] Combat termin√© et nettoy√©');
  }

  // === UTILITAIRES D'INTERFACE ===

  closeAllBattleInterfaces() {
    // Fermer l'interface de s√©lection
    if (this.pokemonSelectionUI) {
      this.pokemonSelectionUI.hide();
    }
    
    // Fermer l'interface fallback
    const fallbackOverlay = document.getElementById('fallback-battle-overlay');
    if (fallbackOverlay) {
      fallbackOverlay.remove();
    }
    
    // Fermer l'interface temporaire
    const tempOverlay = document.getElementById('temp-battle-overlay');
    if (tempOverlay) {
      tempOverlay.remove();
    }
  }

  cancelBattle() {
    console.log('‚ùå [BattleIntegration] Annulation du combat');
    
    this.isInBattle = false;
    this.isSelectingPokemon = false;
    
    this.closeAllBattleInterfaces();
    this.enablePlayerMovement();
    
    // Notifier le serveur si n√©cessaire
    if (this.battleConnection && this.currentBattleRoomId) {
      this.battleConnection.leaveBattle('cancelled');
    }
    
    // Nettoyer
    this.currentBattleData = null;
    this.selectedPokemon = null;
    
    console.log('‚úÖ [BattleIntegration] Combat annul√©');
  }

  // === GESTION DU MOUVEMENT ===

  disablePlayerMovement() {
    if (this.gameManager && this.gameManager.player) {
      this.gameManager.player.setMovementEnabled(false);
      console.log('üö´ [BattleIntegration] Mouvement d√©sactiv√©');
    }
  }

  enablePlayerMovement() {
    if (this.gameManager && this.gameManager.player) {
      this.gameManager.player.setMovementEnabled(true);
      console.log('‚úÖ [BattleIntegration] Mouvement r√©activ√©');
    }
  }

  // === FORWARDING D'√âV√âNEMENTS ===

  forwardToBattleScene(eventType, data) {
    if (this.battleScene && this.battleScene.handleNetworkEvent) {
      this.battleScene.handleNetworkEvent(eventType, data);
    }
  }

  updateBattleState(battleState) {
    if (this.battleScene && this.battleScene.updateBattleState) {
      this.battleScene.updateBattleState(battleState);
    }
  }

  // === STYLES CSS ===

loadBattleStyles() {
  console.log('üé® [BattleIntegration] Chargement des styles CSS...');
  
  // V√©rifier si les styles sont d√©j√† charg√©s
  if (document.querySelector('#battle-styles')) {
    console.log('‚úÖ [BattleIntegration] Styles d√©j√† charg√©s');
    return;
  }
  
  // ‚úÖ Votre fichier existant battle.css
  const battleCSS = document.createElement('link');
  battleCSS.id = 'battle-styles';
  battleCSS.rel = 'stylesheet';
  battleCSS.href = '/css/battle.css';
  document.head.appendChild(battleCSS);
  
  // üÜï Nouveau fichier pour s√©lection
  const selectionCSS = document.createElement('link');
  selectionCSS.id = 'selection-styles';
  selectionCSS.rel = 'stylesheet';
  selectionCSS.href = '/css/pokemon-selection.css';
  document.head.appendChild(selectionCSS);
  
  // üÜï Nouveau fichier pour overlay centr√©
  const centeredCSS = document.createElement('link');
  centeredCSS.id = 'centered-styles';
  centeredCSS.rel = 'stylesheet';
  centeredCSS.href = '/css/battle-centered.css';
  document.head.appendChild(centeredCSS);
  
  console.log('‚úÖ [BattleIntegration] Styles charg√©s');
}

  // === M√âTHODES PUBLIQUES ===

  /**
   * D√©marre un combat sauvage manuellement
   */
  startWildBattle(wildPokemonData) {
    if (!this.isInitialized) {
      console.error('‚ùå [BattleIntegration] Syst√®me non initialis√©');
      return false;
    }
    
    if (this.isInBattle || this.isSelectingPokemon) {
      console.warn('‚ö†Ô∏è [BattleIntegration] Combat d√©j√† en cours');
      return false;
    }
    
    console.log('üêæ [BattleIntegration] D√©marrage combat sauvage manuel...');
    
    // Envoyer la demande via la WorldRoom
    if (this.battleConnection?.worldRoom) {
      const success = this.battleConnection.sendToWorld('startWildBattle', {
        wildPokemon: wildPokemonData.pokemon || wildPokemonData,
        location: wildPokemonData.location || 'manual_test',
        method: wildPokemonData.method || 'manual'
      });
      
      if (success) {
        console.log('‚úÖ [BattleIntegration] Demande de combat envoy√©e');
        return true;
      }
    }
    
    console.error('‚ùå [BattleIntegration] √âchec envoi demande combat');
    return false;
  }

  /**
   * Quitte le combat actuel
   */
  exitBattle(reason = 'manual') {
    if (!this.isInBattle && !this.isSelectingPokemon) {
      console.warn('‚ö†Ô∏è [BattleIntegration] Pas en combat');
      return false;
    }
    
    console.log(`üö™ [BattleIntegration] Sortie de combat: ${reason}`);
    
    if (this.isSelectingPokemon) {
      // Annuler la s√©lection
      this.cancelBattle();
    } else if (this.battleConnection) {
      // Quitter le combat actuel
      this.battleConnection.leaveBattle(reason);
    } else {
      // Forcer la fin
      this.endBattle({ reason });
    }
    
    return true;
  }

  /**
   * Teste le syst√®me avec un combat factice
   */
  testBattle() {
    console.log('üß™ [BattleIntegration] Test du syst√®me complet...');
    
    if (!this.isInitialized) {
      console.error('‚ùå [BattleIntegration] Syst√®me non initialis√©');
      return false;
    }
    
    const testPokemon = {
      pokemonId: 25,
      level: 8,
      name: 'Pikachu Test',
      shiny: false,
      gender: 'male',
      currentHp: 28,
      maxHp: 28,
      moves: ['thunder_shock', 'growl', 'tail_whip', 'thunder_wave']
    };
    
    return this.startWildBattle({
      pokemon: testPokemon,
      location: 'test_zone',
      method: 'debug_test'
    });
  }

  // === M√âTHODES D'√âTAT ===

  /**
   * V√©rifie si on est en combat
   */
  isCurrentlyInBattle() {
    return this.isInBattle || this.isSelectingPokemon;
  }

  /**
   * Obtient l'√©tat du combat actuel
   */
  getCurrentBattleState() {
    return {
      isInitialized: this.isInitialized,
      isInBattle: this.isInBattle,
      isSelectingPokemon: this.isSelectingPokemon,
      battleRoomId: this.currentBattleRoomId,
      battleType: this.currentBattleType,
      selectedPokemon: this.selectedPokemon,
      battleData: this.currentBattleData,
      connectionStatus: this.battleConnection?.getConnectionStatus()
    };
  }

  // === UTILITAIRES ===

  showError(message) {
    console.error(`‚ùå [BattleIntegration] ${message}`);
    
    // Afficher l'erreur √† l'utilisateur
    if (this.gameManager?.showNotification) {
      this.gameManager.showNotification(message, 'error');
    } else {
      // Fallback : alert simple
      alert(`Erreur de combat: ${message}`);
    }
  }

  /**
   * V√©rifie la compatibilit√© syst√®me
   */
  checkCompatibility() {
    const checks = {
      phaserGame: !!this.phaserGame,
      worldRoom: !!this.worldRoom,
      battleConnection: !!this.battleConnection,
      pokemonSelectionUI: !!this.pokemonSelectionUI,
      battleScene: !!this.battleScene,
      gameManager: !!this.gameManager,
      cssLoaded: !!document.querySelector('#battle-styles')
    };
    
    console.log('üîç [BattleIntegration] V√©rification compatibilit√©:', checks);
    
    return checks;
  }

  /**
   * Debug complet du syst√®me
   */
  debug() {
    return {
      isInitialized: this.isInitialized,
      state: this.getCurrentBattleState(),
      compatibility: this.checkCompatibility(),
      networkStatus: this.battleConnection?.debug(),
      hasAvailablePokemon: this.pokemonSelectionUI?.hasAvailablePokemon()
    };
  }

  // === NETTOYAGE ===

  /**
   * Nettoie et d√©truit le syst√®me complet
   */
  async destroy() {
    console.log('üíÄ [BattleIntegration] Destruction du syst√®me complet...');
    
    // Terminer tout combat en cours
    if (this.isCurrentlyInBattle()) {
      await this.exitBattle('destroy');
    }
    
    // D√©truire les composants
    if (this.battleConnection) {
      await this.battleConnection.destroy();
      this.battleConnection = null;
    }
    
    if (this.pokemonSelectionUI) {
      this.pokemonSelectionUI.destroy();
      this.pokemonSelectionUI = null;
    }
    
    if (this.battleScene && this.phaserGame?.scene) {
      try {
        this.phaserGame.scene.remove('BattleScene');
      } catch (error) {
        console.warn('‚ö†Ô∏è [BattleIntegration] Erreur suppression BattleScene:', error);
      }
      this.battleScene = null;
    }
    
    // Supprimer les styles CSS
    const styleElements = ['#battle-styles', '#selection-styles', '#centered-styles'];
    styleElements.forEach(selector => {
      const element = document.querySelector(selector);
      if (element) element.remove();
    });
    
    // Fermer toutes les interfaces
    this.closeAllBattleInterfaces();
    
    // Nettoyer les r√©f√©rences
    this.gameManager = null;
    this.worldRoom = null;
    this.phaserGame = null;
    
    // R√©initialiser l'√©tat
    this.isInitialized = false;
    this.isInBattle = false;
    this.isSelectingPokemon = false;
    
    console.log('‚úÖ [BattleIntegration] Syst√®me complet d√©truit');
  }
}

// ClientTimeWeatherManager.js - VERSION ANTI-SPAM D√âFINITIVE
export class ClientTimeWeatherManager {
  constructor(scene) {
    this.scene = scene;
    
    this.currentHour = 12;
    this.isDayTime = true;
    this.currentWeather = "clear";
    this.weatherDisplayName = "Ciel d√©gag√©";
    
    this.hasReceivedInitialTime = false;
    this.hasReceivedInitialWeather = false;
    
    this.listeners = {
      time: [],
      weather: []
    };
    
    // ‚úÖ NOUVEAU: Anti-spam S√âV√àRE avec √©tats pr√©c√©dents
    this.lastTimeState = null;
    this.lastWeatherState = null;
    this.timeMessageCount = 0;
    this.weatherMessageCount = 0;
    
    // ‚úÖ NOUVEAU: D√©bouncing pour √©viter les notifications multiples
    this.notificationDebounce = {
      time: null,
      weather: null
    };
    
    // ‚úÖ NOUVEAU: Mode debug
    this.debugMode = false;
    
    // ‚úÖ NOUVEAU: Mode transition rapide
    this.fastTransitionMode = false;
    this.transitionTimer = null;
    
    console.log(`üåç [ClientTimeWeatherManager] Initialis√© avec ANTI-SPAM S√âV√àRE`);
  }

  initialize(networkManager) {
    if (!networkManager?.room) {
      console.warn(`‚ö†Ô∏è [ClientTimeWeatherManager] Pas de room disponible`);
      return;
    }

    this.setupNetworkHandlers(networkManager);
    this.requestInitialState(networkManager);
    
    console.log(`‚úÖ [ClientTimeWeatherManager] Connect√© avec anti-spam s√©v√®re`);
  }

  setupNetworkHandlers(networkManager) {
    // ‚úÖ Handler temps avec ANTI-SPAM BRUTAL
    networkManager.onMessage("timeUpdate", (data) => {
      this.handleTimeUpdateWithAntiSpam(data);
    });

    // ‚úÖ Handler m√©t√©o avec ANTI-SPAM BRUTAL
    networkManager.onMessage("weatherUpdate", (data) => {
      this.handleWeatherUpdateWithAntiSpam(data);
    });

    // ‚úÖ Handlers √©tat initial (sans anti-spam car unique)
    networkManager.onMessage("currentTime", (data) => {
      if (this.debugMode) {
        console.log(`üïê [ClientTimeWeatherManager] ‚û°Ô∏è √âtat initial temps: ${data.displayTime}`);
      }
      
      this.applyTimeUpdate(data);
      this.hasReceivedInitialTime = true;
    });

    networkManager.onMessage("currentWeather", (data) => {
      if (this.debugMode) {
        console.log(`üå§Ô∏è [ClientTimeWeatherManager] ‚û°Ô∏è √âtat initial m√©t√©o: ${data.displayName}`);
      }
      
      this.applyWeatherUpdate(data);
      this.hasReceivedInitialWeather = true;
    });

    console.log(`‚úÖ [ClientTimeWeatherManager] Handlers anti-spam configur√©s`);
  }

  // ‚úÖ NOUVEAU: Handler temps avec anti-spam BRUTAL
  handleTimeUpdateWithAntiSpam(data) {
    // ‚úÖ Cr√©er une cl√© d'√©tat unique
    const stateKey = `${data.gameHour}-${data.isDayTime}-${data.displayTime}`;
    
    // ‚úÖ IGNORER COMPL√àTEMENT si √©tat identique
    if (this.lastTimeState === stateKey) {
      this.timeMessageCount++;
      
      // ‚úÖ Log seulement si debug ET log de spam occasionnel
      if (this.debugMode && this.timeMessageCount % 5 === 0) {
        console.log(`üö´ [ClientTimeWeatherManager] ${this.timeMessageCount} messages temps identiques ignor√©s: ${data.displayTime}`);
      }
      return; // ‚úÖ SORTIE IMM√âDIATE - Ne rien faire
    }
    
    // ‚úÖ Reset compteur si nouveau message
    if (this.timeMessageCount > 0) {
      console.log(`üìä [ClientTimeWeatherManager] ${this.timeMessageCount} messages temps dupliqu√©s ignor√©s au total`);
      this.timeMessageCount = 0;
    }
    
    if (this.debugMode) {
      console.log(`üïê [ClientTimeWeatherManager] ‚¨áÔ∏è NOUVEAU TEMPS: ${data.displayTime} ${data.isDayTime ? '‚òÄÔ∏è' : 'üåô'}`);
    }
    
    // ‚úÖ Mettre √† jour l'√©tat
    this.lastTimeState = stateKey;
    
    // ‚úÖ Appliquer avec d√©bouncing
    this.debouncedTimeNotification(data);
  }

  // ‚úÖ NOUVEAU: Handler m√©t√©o avec anti-spam BRUTAL
  handleWeatherUpdateWithAntiSpam(data) {
    // ‚úÖ Cr√©er une cl√© d'√©tat unique
    const stateKey = `${data.weather}-${data.displayName}`;
    
    // ‚úÖ IGNORER COMPL√àTEMENT si √©tat identique
    if (this.lastWeatherState === stateKey) {
      this.weatherMessageCount++;
      
      // ‚úÖ Log seulement si debug ET log de spam occasionnel
      if (this.debugMode && this.weatherMessageCount % 5 === 0) {
        console.log(`üö´ [ClientTimeWeatherManager] ${this.weatherMessageCount} messages m√©t√©o identiques ignor√©s: ${data.displayName}`);
      }
      return; // ‚úÖ SORTIE IMM√âDIATE - Ne rien faire
    }
    
    // ‚úÖ Reset compteur si nouveau message
    if (this.weatherMessageCount > 0) {
      console.log(`üìä [ClientTimeWeatherManager] ${this.weatherMessageCount} messages m√©t√©o dupliqu√©s ignor√©s au total`);
      this.weatherMessageCount = 0;
    }
    
    if (this.debugMode) {
      console.log(`üå§Ô∏è [ClientTimeWeatherManager] ‚¨áÔ∏è NOUVELLE M√âT√âO: ${data.displayName}`);
    }
    
    // ‚úÖ Mettre √† jour l'√©tat
    this.lastWeatherState = stateKey;
    
    // ‚úÖ Appliquer avec d√©bouncing
    this.debouncedWeatherNotification(data);
  }

  // ‚úÖ NOUVEAU: Notification temps avec d√©bouncing intelligent
  debouncedTimeNotification(data) {
    // ‚úÖ Annuler le timer pr√©c√©dent
    if (this.notificationDebounce.time) {
      clearTimeout(this.notificationDebounce.time);
    }
    
    // ‚úÖ Mode transition rapide : appliquer imm√©diatement
    if (this.fastTransitionMode) {
      this.applyTimeUpdate(data);
      return;
    }
    
    // ‚úÖ Mode normal : d√©bouncing de 100ms
    this.notificationDebounce.time = setTimeout(() => {
      this.applyTimeUpdate(data);
      this.notificationDebounce.time = null;
    }, 100);
  }

  // ‚úÖ NOUVEAU: Notification m√©t√©o avec d√©bouncing intelligent
  debouncedWeatherNotification(data) {
    // ‚úÖ Annuler le timer pr√©c√©dent
    if (this.notificationDebounce.weather) {
      clearTimeout(this.notificationDebounce.weather);
    }
    
    // ‚úÖ Mode transition rapide : appliquer imm√©diatement
    if (this.fastTransitionMode) {
      this.applyWeatherUpdate(data);
      return;
    }
    
    // ‚úÖ Mode normal : d√©bouncing de 100ms
    this.notificationDebounce.weather = setTimeout(() => {
      this.applyWeatherUpdate(data);
      this.notificationDebounce.weather = null;
    }, 100);
  }

  // ‚úÖ M√âTHODES D'APPLICATION INCHANG√âES
  applyTimeUpdate(data) {
    this.currentHour = data.gameHour;
    this.isDayTime = data.isDayTime;
    this.hasReceivedInitialTime = true;
    
    this.notifyTimeListeners(this.currentHour, this.isDayTime);
  }

  applyWeatherUpdate(data) {
    this.currentWeather = data.weather;
    this.weatherDisplayName = data.displayName;
    this.hasReceivedInitialWeather = true;
    
    this.notifyWeatherListeners(this.currentWeather, this.weatherDisplayName);
  }

  requestInitialState(networkManager) {
    if (this.debugMode) {
      console.log(`üì§ [ClientTimeWeatherManager] Demande √©tat initial...`);
    }
    
    networkManager.room.send("getTime");
    networkManager.room.send("getWeather");
    
    setTimeout(() => {
      if (!this.hasReceivedInitialTime) {
        console.warn(`‚ö†Ô∏è [ClientTimeWeatherManager] Timeout temps, nouvelle demande...`);
        networkManager.room.send("getTime");
      }
      if (!this.hasReceivedInitialWeather) {
        console.warn(`‚ö†Ô∏è [ClientTimeWeatherManager] Timeout m√©t√©o, nouvelle demande...`);
        networkManager.room.send("getWeather");
      }
    }, 2000);
  }

  // ‚úÖ API PUBLIQUE INCHANG√âE

  onTimeChange(callback) {
    this.listeners.time.push(callback);
    
    if (this.hasReceivedInitialTime) {
      setTimeout(() => {
        callback(this.currentHour, this.isDayTime);
      }, 50);
    } else if (this.debugMode) {
      console.log(`‚è≥ [ClientTimeWeatherManager] Callback temps enregistr√©, en attente...`);
    }
  }

  onWeatherChange(callback) {
    this.listeners.weather.push(callback);
    
    if (this.hasReceivedInitialWeather) {
      setTimeout(() => {
        callback(this.currentWeather, this.weatherDisplayName);
      }, 50);
    } else if (this.debugMode) {
      console.log(`‚è≥ [ClientTimeWeatherManager] Callback m√©t√©o enregistr√©, en attente...`);
    }
  }

  getCurrentTime() {
    return {
      hour: this.currentHour,
      isDayTime: this.isDayTime
    };
  }

  getCurrentWeather() {
    return {
      weather: this.currentWeather,
      displayName: this.weatherDisplayName
    };
  }

  formatTime() {
    const period = this.currentHour < 12 ? 'AM' : 'PM';
    const displayHour = this.currentHour === 0 ? 12 : this.currentHour > 12 ? this.currentHour - 12 : this.currentHour;
    return `${displayHour}:00 ${period}`;
  }

  getWeatherIcon() {
    return this.currentWeather === 'rain' ? 'üåßÔ∏è' : '‚òÄÔ∏è';
  }

  // ‚úÖ NOUVELLES M√âTHODES DE CONTR√îLE ANTI-SPAM ET TRANSITION

  setDebugMode(enabled) {
    this.debugMode = enabled;
    console.log(`üîß [ClientTimeWeatherManager] Debug mode: ${enabled ? 'ON' : 'OFF'}`);
  }

  // ‚úÖ NOUVEAU: Activer mode transition rapide
  enableFastTransition(duration = 2000) {
    this.fastTransitionMode = true;
    
    // ‚úÖ Nettoyer les d√©bouncing en cours pour appliquer imm√©diatement
    this.clearAllDebouncing();
    
    console.log(`üöÄ [ClientTimeWeatherManager] Mode transition rapide activ√© (${duration}ms)`);
    
    // ‚úÖ D√©sactiver automatiquement apr√®s la dur√©e sp√©cifi√©e
    if (this.transitionTimer) {
      clearTimeout(this.transitionTimer);
    }
    
    this.transitionTimer = setTimeout(() => {
      this.disableFastTransition();
    }, duration);
  }

  // ‚úÖ NOUVEAU: D√©sactiver mode transition rapide
  disableFastTransition() {
    this.fastTransitionMode = false;
    
    if (this.transitionTimer) {
      clearTimeout(this.transitionTimer);
      this.transitionTimer = null;
    }
    
    console.log(`‚è≥ [ClientTimeWeatherManager] Mode transition rapide d√©sactiv√©`);
  }

  getSpamStats() {
    return {
      timeMessageCount: this.timeMessageCount,
      weatherMessageCount: this.weatherMessageCount,
      lastTimeState: this.lastTimeState,
      lastWeatherState: this.lastWeatherState,
      hasReceivedInitialTime: this.hasReceivedInitialTime,
      hasReceivedInitialWeather: this.hasReceivedInitialWeather
    };
  }

  resetSpamCounters() {
    const oldStats = this.getSpamStats();
    
    this.timeMessageCount = 0;
    this.weatherMessageCount = 0;
    
    console.log(`üîÑ [ClientTimeWeatherManager] Compteurs spam reset:`, oldStats);
  }

  clearAllDebouncing() {
    if (this.notificationDebounce.time) {
      clearTimeout(this.notificationDebounce.time);
      this.notificationDebounce.time = null;
    }
    if (this.notificationDebounce.weather) {
      clearTimeout(this.notificationDebounce.weather);
      this.notificationDebounce.weather = null;
    }
    
    console.log(`üßπ [ClientTimeWeatherManager] D√©bouncing nettoy√©`);
  }

  forceRefreshFromServer(networkManager) {
    console.log(`üîÑ [ClientTimeWeatherManager] Force refresh avec reset anti-spam`);
    
    // ‚úÖ Activer mode transition rapide pour ce refresh
    this.enableFastTransition(1000);
    
    // ‚úÖ Reset de tous les √©tats anti-spam
    this.lastTimeState = null;
    this.lastWeatherState = null;
    this.resetSpamCounters();
    this.clearAllDebouncing();
    
    this.hasReceivedInitialTime = false;
    this.hasReceivedInitialWeather = false;
    
    this.requestInitialState(networkManager);
  }

  isSynchronized() {
    return this.hasReceivedInitialTime && this.hasReceivedInitialWeather;
  }

  // ‚úÖ NOTIFICATIONS INTERNES AVEC PROTECTION

  notifyTimeListeners(hour, isDayTime) {
    if (this.debugMode) {
      console.log(`üì¢ [ClientTimeWeatherManager] Notification temps: ${hour}h ${isDayTime ? '(JOUR)' : '(NUIT)'} ‚Üí ${this.listeners.time.length} listeners`);
    }
    
    this.listeners.time.forEach(callback => {
      try {
        callback(hour, isDayTime);
      } catch (error) {
        console.error(`‚ùå [ClientTimeWeatherManager] Erreur callback temps:`, error);
      }
    });
  }

  notifyWeatherListeners(weather, displayName) {
    if (this.debugMode) {
      console.log(`üì¢ [ClientTimeWeatherManager] Notification m√©t√©o: ${displayName} ‚Üí ${this.listeners.weather.length} listeners`);
    }
    
    this.listeners.weather.forEach(callback => {
      try {
        callback(weather, displayName);
      } catch (error) {
        console.error(`‚ùå [ClientTimeWeatherManager] Erreur callback m√©t√©o:`, error);
      }
    });
  }

  // ‚úÖ DEBUG AM√âLIOR√â AVEC STATS ANTI-SPAM

  debug() {
    console.log(`üîç [ClientTimeWeatherManager] === DEBUG ANTI-SPAM ===`);
    console.log(`üïê Temps: ${this.currentHour}h ${this.isDayTime ? '(JOUR)' : '(NUIT)'}`);
    console.log(`üå§Ô∏è M√©t√©o: ${this.weatherDisplayName} (${this.currentWeather})`);
    console.log(`üì° Sync serveur: temps=${this.hasReceivedInitialTime}, m√©t√©o=${this.hasReceivedInitialWeather}`);
    console.log(`üëÇ Listeners: temps=${this.listeners.time.length}, m√©t√©o=${this.listeners.weather.length}`);
    console.log(`üîß Debug mode: ${this.debugMode}`);
    
    const spamStats = this.getSpamStats();
    console.log(`üìä Stats anti-spam:`, spamStats);
    
    console.log(`‚è≥ D√©bouncing actif:`, {
      time: !!this.notificationDebounce.time,
      weather: !!this.notificationDebounce.weather
    });
    
    if (!this.isSynchronized()) {
      console.warn(`‚ö†Ô∏è [ClientTimeWeatherManager] PAS COMPL√àTEMENT SYNCHRONIS√â !`);
    } else {
      console.log(`‚úÖ [ClientTimeWeatherManager] Synchronis√© avec anti-spam actif`);
    }
  }

  // ‚úÖ NETTOYAGE AVEC ANTI-SPAM

  destroy() {
    console.log(`üßπ [ClientTimeWeatherManager] Destruction avec nettoyage anti-spam...`);
    
    // ‚úÖ Nettoyer le mode transition
    this.disableFastTransition();
    
    // ‚úÖ Nettoyer le d√©bouncing
    this.clearAllDebouncing();
    
    // ‚úÖ Log des stats finales
    const finalStats = this.getSpamStats();
    if (finalStats.timeMessageCount > 0 || finalStats.weatherMessageCount > 0) {
      console.log(`üìä [ClientTimeWeatherManager] Stats finales spam:`, finalStats);
    }
    
    this.listeners.time = [];
    this.listeners.weather = [];
    this.hasReceivedInitialTime = false;
    this.hasReceivedInitialWeather = false;
    this.lastTimeState = null;
    this.lastWeatherState = null;
    
    console.log(`‚úÖ [ClientTimeWeatherManager] D√©truit avec anti-spam`);
  }
}

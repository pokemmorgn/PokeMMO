// client/src/managers/ClientTimeWeatherManager.js - VERSION SYNCHRONIS√âE SERVEUR
export class ClientTimeWeatherManager {
  constructor(scene) {
    this.scene = scene;
    
    // ‚úÖ SUPPRIM√â: Plus de gestion locale du temps
    // Le client re√ßoit UNIQUEMENT l'heure du serveur
    this.currentHour = 12;
    this.isDayTime = true;
    this.currentWeather = "clear";
    this.weatherDisplayName = "Ciel d√©gag√©";
    
    // ‚úÖ Flag pour savoir si on a re√ßu l'√©tat initial du serveur
    this.hasReceivedInitialTime = false;
    this.hasReceivedInitialWeather = false;
    
    this.listeners = {
      time: [],
      weather: []
    };
    
    console.log(`üåç [ClientTimeWeatherManager] Initialis√© pour ${scene.scene.key} - Mode serveur uniquement`);
  }

  initialize(networkManager) {
    if (!networkManager?.room) {
      console.warn(`‚ö†Ô∏è [ClientTimeWeatherManager] Pas de room disponible`);
      return;
    }

    this.setupNetworkHandlers(networkManager);
    this.requestInitialState(networkManager);
    
    console.log(`‚úÖ [ClientTimeWeatherManager] Connect√© au serveur (mode sync)`);
  }

  setupNetworkHandlers(networkManager) {
    // ‚úÖ Handler temps - MISE √Ä JOUR DIRECTE DEPUIS SERVEUR
    networkManager.onMessage("timeUpdate", (data) => {
      console.log(`üïê [ClientTimeWeatherManager] ‚¨áÔ∏è SERVEUR ‚Üí CLIENT: ${data.displayTime} ${data.isDayTime ? '‚òÄÔ∏è' : 'üåô'}`);
      
      // ‚úÖ APPLIQUER DIRECTEMENT L'HEURE DU SERVEUR
      this.currentHour = data.gameHour;
      this.isDayTime = data.isDayTime;
      this.hasReceivedInitialTime = true;
      
      // ‚úÖ NOTIFIER IMM√âDIATEMENT LES LISTENERS
      this.notifyTimeListeners(this.currentHour, this.isDayTime);
    });

    // ‚úÖ Handler m√©t√©o - MISE √Ä JOUR DIRECTE DEPUIS SERVEUR
    networkManager.onMessage("weatherUpdate", (data) => {
      console.log(`üå§Ô∏è [ClientTimeWeatherManager] ‚¨áÔ∏è SERVEUR ‚Üí CLIENT: ${data.displayName}`);
      
      // ‚úÖ APPLIQUER DIRECTEMENT LA M√âT√âO DU SERVEUR
      this.currentWeather = data.weather;
      this.weatherDisplayName = data.displayName;
      this.hasReceivedInitialWeather = true;
      
      // ‚úÖ NOTIFIER IMM√âDIATEMENT LES LISTENERS
      this.notifyWeatherListeners(this.currentWeather, this.weatherDisplayName);
    });

    // ‚úÖ Handler √©tat initial temps
    networkManager.onMessage("currentTime", (data) => {
      console.log(`üïê [ClientTimeWeatherManager] ‚û°Ô∏è √âtat initial temps: ${data.displayTime}`);
      
      this.currentHour = data.gameHour;
      this.isDayTime = data.isDayTime;
      this.hasReceivedInitialTime = true;
      
      // ‚úÖ NOTIFIER avec l'√©tat initial
      this.notifyTimeListeners(this.currentHour, this.isDayTime);
    });

    // ‚úÖ Handler √©tat initial m√©t√©o
    networkManager.onMessage("currentWeather", (data) => {
      console.log(`üå§Ô∏è [ClientTimeWeatherManager] ‚û°Ô∏è √âtat initial m√©t√©o: ${data.displayName}`);
      
      this.currentWeather = data.weather;
      this.weatherDisplayName = data.displayName;
      this.hasReceivedInitialWeather = true;
      
      // ‚úÖ NOTIFIER avec l'√©tat initial
      this.notifyWeatherListeners(this.currentWeather, this.weatherDisplayName);
    });

    console.log(`‚úÖ [ClientTimeWeatherManager] Handlers r√©seau configur√©s (mode serveur)`);
  }

  requestInitialState(networkManager) {
    console.log(`üì§ [ClientTimeWeatherManager] Demande √©tat initial au serveur...`);
    
    // ‚úÖ Demander l'√©tat actuel au serveur
    networkManager.room.send("getTime");
    networkManager.room.send("getWeather");
    
    // ‚úÖ NOUVEAU: R√©p√©ter la demande si pas de r√©ponse apr√®s 2 secondes
    setTimeout(() => {
      if (!this.hasReceivedInitialTime) {
        console.warn(`‚ö†Ô∏è [ClientTimeWeatherManager] Pas de r√©ponse temps, nouvelle demande...`);
        networkManager.room.send("getTime");
      }
      if (!this.hasReceivedInitialWeather) {
        console.warn(`‚ö†Ô∏è [ClientTimeWeatherManager] Pas de r√©ponse m√©t√©o, nouvelle demande...`);
        networkManager.room.send("getWeather");
      }
    }, 2000);
  }

  // ‚úÖ API PUBLIQUE - INCHANG√âE

  onTimeChange(callback) {
    this.listeners.time.push(callback);
    
    // ‚úÖ SEULEMENT si on a re√ßu l'√©tat du serveur
    if (this.hasReceivedInitialTime) {
      callback(this.currentHour, this.isDayTime);
    } else {
      console.log(`‚è≥ [ClientTimeWeatherManager] Callback temps enregistr√©, en attente serveur...`);
    }
  }

  onWeatherChange(callback) {
    this.listeners.weather.push(callback);
    
    // ‚úÖ SEULEMENT si on a re√ßu l'√©tat du serveur
    if (this.hasReceivedInitialWeather) {
      callback(this.currentWeather, this.weatherDisplayName);
    } else {
      console.log(`‚è≥ [ClientTimeWeatherManager] Callback m√©t√©o enregistr√©, en attente serveur...`);
    }
  }

  getCurrentTime() {
    return {
      hour: this.currentHour,
      isDayTime: this.isDayTime
    };
  }

  getCurrentWeather() {
    return {
      weather: this.currentWeather,
      displayName: this.weatherDisplayName
    };
  }

  formatTime() {
    const period = this.currentHour < 12 ? 'AM' : 'PM';
    const displayHour = this.currentHour === 0 ? 12 : this.currentHour > 12 ? this.currentHour - 12 : this.currentHour;
    return `${displayHour}:00 ${period}`;
  }

  getWeatherIcon() {
    return this.currentWeather === 'rain' ? 'üåßÔ∏è' : '‚òÄÔ∏è';
  }

  // ‚úÖ NOUVELLES M√âTHODES DE SYNCHRONISATION
  
  isSynchronized() {
    return this.hasReceivedInitialTime && this.hasReceivedInitialWeather;
  }

  forceRefreshFromServer(networkManager) {
    console.log(`üîÑ [ClientTimeWeatherManager] Force refresh depuis serveur`);
    
    this.hasReceivedInitialTime = false;
    this.hasReceivedInitialWeather = false;
    
    this.requestInitialState(networkManager);
  }

  // ‚úÖ NOTIFICATIONS INTERNES - INCHANG√âES

  notifyTimeListeners(hour, isDayTime) {
    console.log(`üì¢ [ClientTimeWeatherManager] Notification temps: ${hour}h ${isDayTime ? '(JOUR)' : '(NUIT)'} ‚Üí ${this.listeners.time.length} listeners`);
    
    this.listeners.time.forEach(callback => {
      try {
        callback(hour, isDayTime);
      } catch (error) {
        console.error(`‚ùå [ClientTimeWeatherManager] Erreur callback temps:`, error);
      }
    });
  }

  notifyWeatherListeners(weather, displayName) {
    console.log(`üì¢ [ClientTimeWeatherManager] Notification m√©t√©o: ${displayName} ‚Üí ${this.listeners.weather.length} listeners`);
    
    this.listeners.weather.forEach(callback => {
      try {
        callback(weather, displayName);
      } catch (error) {
        console.error(`‚ùå [ClientTimeWeatherManager] Erreur callback m√©t√©o:`, error);
      }
    });
  }

  // ‚úÖ DEBUG AM√âLIOR√â

  debug() {
    console.log(`üîç [ClientTimeWeatherManager] === DEBUG ===`);
    console.log(`üïê Temps: ${this.currentHour}h ${this.isDayTime ? '(JOUR)' : '(NUIT)'}`);
    console.log(`üå§Ô∏è M√©t√©o: ${this.weatherDisplayName} (${this.currentWeather})`);
    console.log(`üì° Sync serveur: temps=${this.hasReceivedInitialTime}, m√©t√©o=${this.hasReceivedInitialWeather}`);
    console.log(`üëÇ Listeners: temps=${this.listeners.time.length}, m√©t√©o=${this.listeners.weather.length}`);
    
    if (!this.isSynchronized()) {
      console.warn(`‚ö†Ô∏è [ClientTimeWeatherManager] PAS COMPL√àTEMENT SYNCHRONIS√â !`);
    } else {
      console.log(`‚úÖ [ClientTimeWeatherManager] Compl√®tement synchronis√© avec le serveur`);
    }
  }

  // ‚úÖ NETTOYAGE - INCHANG√â

  destroy() {
    this.listeners.time = [];
    this.listeners.weather = [];
    this.hasReceivedInitialTime = false;
    this.hasReceivedInitialWeather = false;
    console.log(`üßπ [ClientTimeWeatherManager] D√©truit`);
  }
}

// managers/LocalizationManager.js - VERSION BATTLE COMPL√àTE AVEC MOVES/POK√âMON
// üåê Gestionnaire de traductions modulaire avec fichiers s√©par√©s
// üîÑ D√©tection automatique p√©riodique des nouveaux modules
// ‚öîÔ∏è Support int√©gr√© pour le syst√®me de combat avec moves et pok√©mon
// üéØ Optimis√© pour battle UI avec traductions dynamiques

export class LocalizationManager {
  constructor() {
    // === CACHE MODULAIRE √âTENDU ===
    this.translations = null;           // Cache fusionn√© final
    this.moduleTranslations = new Map(); // Cache par module UI
    this.moveTranslations = new Map();   // ‚öîÔ∏è NOUVEAU: Cache moves par langue
    this.pokemonTranslations = new Map(); // ‚öîÔ∏è NOUVEAU: Cache pok√©mon par langue
    this.isLoading = false;
    this.loadPromise = null;
    
    // === CONFIGURATION MODULAIRE √âTENDUE ===
    this.fallbackLanguage = 'en';
    
    // üî• Configuration des modules avec BATTLE + MOVES + POKEMON
    this.moduleConfig = {
      // Modules UI obligatoires
      required: ['common'],
      
      // Modules UI optionnels
      optional: ['quest', 'team', 'inventory', 'options', 'pokedex', 'battle'],
      
      // ‚öîÔ∏è NOUVEAU: Sources de donn√©es battle
      battleData: {
        moves: true,      // Charger moves par langue
        pokemon: true     // Charger pok√©mon par langue
      },
      
      // Chemins des fichiers
      basePath: '/localization',
      moveBasePath: '/localization/moves',     // ‚öîÔ∏è NOUVEAU
      pokemonBasePath: '/localization/pokemon', // ‚öîÔ∏è NOUVEAU
      
      // Langues support√©es avec codes
      supportedLanguages: {
        'en': { code: 'en', name: 'English' },
        'fr': { code: 'fr', name: 'Fran√ßais' },
        'es': { code: 'es', name: 'Espa√±ol' },
        'de': { code: 'de', name: 'Deutsch' },
        'it': { code: 'it', name: 'Italiano' },
        'pt': { code: 'pt', name: 'Portugu√™s' },
        'ja': { code: 'ja', name: 'Êó•Êú¨Ë™û' },
        'ko': { code: 'ko', name: 'ÌïúÍµ≠Ïñ¥' }
      },
      
      // Strat√©gies de chargement
      loadingStrategy: {
        mode: 'smart',
        detectModules: true,
        cacheModules: true,
        mergeStrategy: 'deep',
        preloadBattle: true  // ‚öîÔ∏è NOUVEAU: Pr√©-charger battle data
      }
    };
    
    // === üîÑ D√âTECTION P√âRIODIQUE √âTENDUE ===
    this.periodicDetection = {
      enabled: true,
      interval: 3000,
      maxAttempts: 20,
      currentAttempts: 0,
      timerId: null,
      lastDetectedModules: new Set(),
      // ‚öîÔ∏è NOUVEAU: D√©tecter aussi les besoins battle data
      detectBattleData: true
    };
    
    // === √âTAT √âTENDU ===
    this.isReady = false;
    this.lastError = null;
    this.loadedModules = new Set();
    this.failedModules = new Set();
    
    // ‚öîÔ∏è NOUVEAU: √âtat battle data
    this.battleDataState = {
      movesLoaded: new Set(),    // Langues avec moves charg√©es
      pokemonLoaded: new Set(),  // Langues avec pok√©mon charg√©s
      loadingMoves: new Set(),   // Langues en cours de chargement moves
      loadingPokemon: new Set()  // Langues en cours de chargement pok√©mon
    };
    
    console.log('üåê [LocalizationManager] Instance compl√®te cr√©√©e avec support Battle+Moves+Pok√©mon');
  }
  
  // === üöÄ CHARGEMENT INTELLIGENT √âTENDU ===
  
  async load(options = {}) {
    if (this.isReady && this.translations) {
      console.log('‚úÖ [LocalizationManager] Traductions d√©j√† charg√©es');
      this.startPeriodicDetection();
      return true;
    }
    
    if (this.isLoading && this.loadPromise) {
      console.log('‚è≥ [LocalizationManager] Chargement en cours...');
      return await this.loadPromise;
    }
    
    this.isLoading = true;
    this.loadPromise = this._loadTranslationsComplete(options);
    
    const result = await this.loadPromise;
    this.isLoading = false;
    this.loadPromise = null;
    
    if (result) {
      this.startPeriodicDetection();
    }
    
    return result;
  }
  
  /**
   * ‚öîÔ∏è NOUVEAU: Chargement complet avec battle data
   */
  async _loadTranslationsComplete(options = {}) {
    try {
      console.log('üîÑ [LocalizationManager] Chargement complet avec battle data...');
      
      // 1. Charger modules UI standard
      const uiSuccess = await this._loadTranslationsModular(options);
      
      if (!uiSuccess) {
        console.warn('‚ö†Ô∏è [LocalizationManager] √âchec chargement UI, tentative fallback...');
        return await this._fallbackToLegacy();
      }
      
      // 2. ‚öîÔ∏è NOUVEAU: Charger battle data si activ√©
      if (this.moduleConfig.loadingStrategy.preloadBattle) {
        const currentLang = this.getCurrentLanguage();
        await this._preloadBattleData(currentLang);
      }
      
      this.isReady = true;
      console.log('‚úÖ [LocalizationManager] Chargement complet termin√©');
      return true;
      
    } catch (error) {
      console.error('‚ùå [LocalizationManager] Erreur chargement complet:', error);
      return await this._fallbackToLegacy();
    }
  }
  
  /**
   * ‚öîÔ∏è NOUVEAU: Pr√©-charger battle data pour une langue
   */
  async _preloadBattleData(lang) {
    console.log(`‚öîÔ∏è [LocalizationManager] Pr√©-chargement battle data pour ${lang}...`);
    
    const loadPromises = [];
    
    // Charger moves si activ√©
    if (this.moduleConfig.battleData.moves) {
      loadPromises.push(this.loadMovesForLanguage(lang));
    }
    
    // Charger pok√©mon si activ√©
    if (this.moduleConfig.battleData.pokemon) {
      loadPromises.push(this.loadPokemonForLanguage(lang));
    }
    
    const results = await Promise.allSettled(loadPromises);
    
    const successful = results.filter(r => r.status === 'fulfilled').length;
    console.log(`‚öîÔ∏è [LocalizationManager] Battle data ${lang}: ${successful}/${results.length} r√©ussi`);
    
    return successful > 0;
  }
  
  // === ‚öîÔ∏è NOUVEAU: GESTION MOVES ===
  
  /**
   * Charger les traductions des moves pour une langue
   * @param {string} lang - Code langue
   * @returns {Promise<boolean>}
   */
  async loadMovesForLanguage(lang) {
    if (this.battleDataState.movesLoaded.has(lang)) {
      console.log(`‚úÖ [LocalizationManager] Moves ${lang} d√©j√† charg√©es`);
      return true;
    }
    
    if (this.battleDataState.loadingMoves.has(lang)) {
      console.log(`‚è≥ [LocalizationManager] Moves ${lang} en cours de chargement...`);
      return false;
    }
    
    this.battleDataState.loadingMoves.add(lang);
    
    try {
      console.log(`üì• [LocalizationManager] Chargement moves ${lang}...`);
      
      const moveUrl = `${this.moduleConfig.moveBasePath}/moves_${lang}.json`;
      const response = await fetch(moveUrl);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const movesData = await response.json();
      
      if (!movesData || !movesData.moves) {
        throw new Error('Format moves invalide');
      }
      
      // Stocker dans le cache
      this.moveTranslations.set(lang, movesData.moves);
      this.battleDataState.movesLoaded.add(lang);
      
      console.log(`‚úÖ [LocalizationManager] Moves ${lang} charg√©es: ${Object.keys(movesData.moves).length} moves`);
      return true;
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è [LocalizationManager] √âchec moves ${lang}:`, error.message);
      return false;
      
    } finally {
      this.battleDataState.loadingMoves.delete(lang);
    }
  }
  
  /**
   * Obtenir le nom d'une move dans une langue
   * @param {string} moveId - ID de la move (ex: "tackle")
   * @param {string} lang - Code langue (optionnel)
   * @returns {string}
   */
  getMoveNameT(moveId, lang = null) {
    const currentLang = lang || this.getCurrentLanguage();
    
    // V√©rifier cache moves
    const moves = this.moveTranslations.get(currentLang);
    if (moves && moves[moveId]) {
      return moves[moveId];
    }
    
    // Fallback vers langue par d√©faut
    if (currentLang !== this.fallbackLanguage) {
      const fallbackMoves = this.moveTranslations.get(this.fallbackLanguage);
      if (fallbackMoves && fallbackMoves[moveId]) {
        console.warn(`‚ö†Ô∏è [LocalizationManager] Fallback move ${moveId}: ${this.fallbackLanguage}`);
        return fallbackMoves[moveId];
      }
    }
    
    // Fallback vers battle UI si disponible
    const battleUIMove = this.t(`battle.ui.moves_names.${moveId}`, currentLang);
    if (battleUIMove !== `battle.ui.moves_names.${moveId}`) {
      return battleUIMove;
    }
    
    // Format le moveId en dernier recours
    console.warn(`‚ö†Ô∏è [LocalizationManager] Move non trouv√©e: ${moveId} (${currentLang})`);
    return this._formatMoveId(moveId);
  }
  
  /**
   * Formater un ID de move en nom lisible
   */
  _formatMoveId(moveId) {
    return moveId
      .replace(/_/g, ' ')
      .replace(/\b\w/g, l => l.toUpperCase());
  }
  
  // === ‚öîÔ∏è NOUVEAU: GESTION POK√âMON ===
  
  /**
   * Charger les traductions des pok√©mon pour une langue
   * @param {string} lang - Code langue
   * @returns {Promise<boolean>}
   */
  async loadPokemonForLanguage(lang) {
    if (this.battleDataState.pokemonLoaded.has(lang)) {
      console.log(`‚úÖ [LocalizationManager] Pok√©mon ${lang} d√©j√† charg√©s`);
      return true;
    }
    
    if (this.battleDataState.loadingPokemon.has(lang)) {
      console.log(`‚è≥ [LocalizationManager] Pok√©mon ${lang} en cours de chargement...`);
      return false;
    }
    
    this.battleDataState.loadingPokemon.add(lang);
    
    try {
      console.log(`üì• [LocalizationManager] Chargement pok√©mon ${lang}...`);
      
      // Charger Gen1 pour commencer
      const pokemonUrl = `${this.moduleConfig.pokemonBasePath}/gen1/${lang}.json`;
      const response = await fetch(pokemonUrl);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const pokemonData = await response.json();
      
      if (!pokemonData || typeof pokemonData !== 'object') {
        throw new Error('Format pok√©mon invalide');
      }
      
      // Stocker dans le cache
      this.pokemonTranslations.set(lang, pokemonData);
      this.battleDataState.pokemonLoaded.add(lang);
      
      console.log(`‚úÖ [LocalizationManager] Pok√©mon ${lang} charg√©s: ${Object.keys(pokemonData).length} pok√©mon`);
      return true;
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è [LocalizationManager] √âchec pok√©mon ${lang}:`, error.message);
      return false;
      
    } finally {
      this.battleDataState.loadingPokemon.delete(lang);
    }
  }
  
  /**
   * Obtenir le nom et description d'un pok√©mon dans une langue
   * @param {number|string} pokemonId - ID du pok√©mon (ex: 1 ou "1")
   * @param {string} lang - Code langue (optionnel)
   * @param {boolean} withDescription - Inclure la description
   * @returns {string|object}
   */
  getPokemonNameT(pokemonId, lang = null, withDescription = false) {
    const currentLang = lang || this.getCurrentLanguage();
    const id = pokemonId.toString();
    
    // V√©rifier cache pok√©mon
    const pokemon = this.pokemonTranslations.get(currentLang);
    if (pokemon && pokemon[id]) {
      const pokemonData = pokemon[id];
      
      if (withDescription) {
        return {
          name: pokemonData.name,
          description: pokemonData.description
        };
      }
      
      return pokemonData.name;
    }
    
    // Fallback vers langue par d√©faut
    if (currentLang !== this.fallbackLanguage) {
      const fallbackPokemon = this.pokemonTranslations.get(this.fallbackLanguage);
      if (fallbackPokemon && fallbackPokemon[id]) {
        console.warn(`‚ö†Ô∏è [LocalizationManager] Fallback pok√©mon ${id}: ${this.fallbackLanguage}`);
        
        const pokemonData = fallbackPokemon[id];
        if (withDescription) {
          return {
            name: pokemonData.name,
            description: pokemonData.description
          };
        }
        
        return pokemonData.name;
      }
    }
    
    // Fallback g√©n√©rique
    console.warn(`‚ö†Ô∏è [LocalizationManager] Pok√©mon non trouv√©: ${id} (${currentLang})`);
    return withDescription 
      ? { name: `Pok√©mon #${id}`, description: '' }
      : `Pok√©mon #${id}`;
  }
  
  /**
   * Obtenir seulement la description d'un pok√©mon
   * @param {number|string} pokemonId - ID du pok√©mon
   * @param {string} lang - Code langue (optionnel)
   * @returns {string}
   */
  getPokemonDescriptionT(pokemonId, lang = null) {
    const result = this.getPokemonNameT(pokemonId, lang, true);
    return result.description || '';
  }
  
  // === üîÑ D√âTECTION P√âRIODIQUE √âTENDUE ===
  
  /**
   * V√©rifier s'il y a de nouveaux modules ou battle data √† charger
   */
  async checkForNewModules() {
    this.periodicDetection.currentAttempts++;
    
    if (this.periodicDetection.currentAttempts >= this.periodicDetection.maxAttempts) {
      console.log(`‚èπÔ∏è [LocalizationManager] D√©tection p√©riodique termin√©e`);
      this.stopPeriodicDetection();
      return;
    }
    
    // D√©tecter modules UI
    const currentModules = new Set(this._detectUsedModules());
    const newModules = [...currentModules].filter(module => 
      !this.periodicDetection.lastDetectedModules.has(module) && 
      !this.loadedModules.has(module) &&
      !this.failedModules.has(module)
    );
    
    // ‚öîÔ∏è NOUVEAU: D√©tecter besoins battle data
    const currentLang = this.getCurrentLanguage();
    const needsBattleData = this._detectBattleDataNeeds();
    
    let hasUpdates = false;
    
    // Charger nouveaux modules UI
    if (newModules.length > 0) {
      console.log(`üÜï [LocalizationManager] Nouveaux modules UI:`, newModules);
      
      const results = await this._loadModules(newModules);
      if (results.some(r => r.success)) {
        this._mergeAllTranslations();
        hasUpdates = true;
        console.log(`‚úÖ [LocalizationManager] Modules UI charg√©s`);
      }
    }
    
    // ‚öîÔ∏è NOUVEAU: Charger battle data si n√©cessaire
    if (needsBattleData.moves && !this.battleDataState.movesLoaded.has(currentLang)) {
      console.log(`‚öîÔ∏è [LocalizationManager] Chargement moves ${currentLang}...`);
      const success = await this.loadMovesForLanguage(currentLang);
      if (success) hasUpdates = true;
    }
    
    if (needsBattleData.pokemon && !this.battleDataState.pokemonLoaded.has(currentLang)) {
      console.log(`‚öîÔ∏è [LocalizationManager] Chargement pok√©mon ${currentLang}...`);
      const success = await this.loadPokemonForLanguage(currentLang);
      if (success) hasUpdates = true;
    }
    
    if (hasUpdates) {
      this.notifyModulesUpdated([...newModules, ...(needsBattleData.moves ? ['moves'] : []), ...(needsBattleData.pokemon ? ['pokemon'] : [])]);
    }
    
    this.periodicDetection.lastDetectedModules = currentModules;
    
    // V√©rifier si tout est charg√©
    const allOptionalProcessed = this.moduleConfig.optional.every(module => 
      this.loadedModules.has(module) || this.failedModules.has(module)
    );
    
    const battleDataComplete = 
      (!needsBattleData.moves || this.battleDataState.movesLoaded.has(currentLang)) &&
      (!needsBattleData.pokemon || this.battleDataState.pokemonLoaded.has(currentLang));
    
    if (allOptionalProcessed && battleDataComplete) {
      console.log(`‚úÖ [LocalizationManager] Chargement complet - arr√™t d√©tection`);
      this.stopPeriodicDetection();
    }
  }
  
  /**
   * ‚öîÔ∏è NOUVEAU: D√©tecter les besoins en battle data
   */
  _detectBattleDataNeeds() {
    const needs = { moves: false, pokemon: false };
    
    if (!this.periodicDetection.detectBattleData) {
      return needs;
    }
    
    // V√©rifier √©l√©ments DOM battle
    const battleElements = [
      '.battle-scene', '.battle-ui', '.pokemon-moves-ui', 
      '.battle-action-ui', '#battleScene'
    ];
    
    const hasBattleUI = battleElements.some(selector => 
      document.querySelector(selector)
    );
    
    if (hasBattleUI) {
      needs.moves = true;
      needs.pokemon = true;
      console.log('‚öîÔ∏è [LocalizationManager] Battle UI d√©tect√© - needs battle data');
      return needs;
    }
    
    // V√©rifier variables globales
    const battleGlobals = [
      'battleSystem', 'battleManager', 'pokemonMovesUI', 
      'battleActionUI', 'koManager'
    ];
    
    const hasBattleGlobals = battleGlobals.some(globalVar => 
      window[globalVar] !== undefined
    );
    
    if (hasBattleGlobals) {
      needs.moves = true;
      needs.pokemon = true;
      console.log('‚öîÔ∏è [LocalizationManager] Battle globals d√©tect√© - needs battle data');
      return needs;
    }
    
    // V√©rifier Phaser Battle Scene
    if (window.game?.scene?.getScene) {
      try {
        const battleScene = window.game.scene.getScene('BattleScene');
        if (battleScene && battleScene.scene.isActive()) {
          needs.moves = true;
          needs.pokemon = true;
          console.log('‚öîÔ∏è [LocalizationManager] Battle Scene active - needs battle data');
        }
      } catch (error) {
        // Pas grave
      }
    }
    
    return needs;
  }
  
  // === üîÑ D√âTECTION AUTOMATIQUE √âTENDUE ===
  
  _detectUsedModules() {
    const detectedModules = [];
    
    // D√©tection DOM standard
    const domIndicators = {
      quest: ['#quest-icon', '.quest-journal', '[data-quest]', '#quest-tracker'],
      team: ['#team-icon', '.team-overlay', '[data-team]', '#team-manager'],
      inventory: ['#inventory-icon', '.inventory-overlay', '[data-inventory]'],
      options: ['#options-icon', '.options-overlay', '[data-options]'],
      pokedex: ['#pokedex-icon', '.pokedex-overlay', '[data-pokedex]'],
      battle: [
        '#battleScene', '.battle-scene', '.battle-action-ui', '.battle-ui',
        '.battle-health-bar', '.battle-interface', '.pokemon-moves-ui', 
        '.battle-inventory', '[data-battle]', '.battle-transition'
      ]
    };
    
    Object.entries(domIndicators).forEach(([module, selectors]) => {
      const found = selectors.some(selector => document.querySelector(selector));
      if (found) {
        detectedModules.push(module);
        console.log(`üîç [LocalizationManager] Module d√©tect√©: ${module}`);
      }
    });
    
    // D√©tection variables globales
    const globalIndicators = {
      quest: ['questSystem', 'questSystemGlobal'],
      team: ['teamSystem', 'teamSystemGlobal'],
      inventory: ['inventorySystem', 'inventorySystemGlobal'],
      options: ['optionsSystem', 'optionsSystemGlobal'],
      pokedex: ['pokedexSystem', 'pokedexSystemGlobal'],
      battle: [
        'battleSystem', 'battleManager', 'battleNetworkHandler',
        'battleActionUI', 'pokemonMovesUI', 'koManager',
        'battleTranslator', 'battleScene'
      ]
    };
    
    Object.entries(globalIndicators).forEach(([module, globals]) => {
      const found = globals.some(globalVar => window[globalVar] !== undefined);
      
      if (found && !detectedModules.includes(module)) {
        detectedModules.push(module);
        console.log(`üåê [LocalizationManager] Module d√©tect√© (global): ${module}`);
      }
    });
    
    // D√©tection Phaser Battle Scene
    if (window.game?.scene?.getScene) {
      try {
        const battleScene = window.game.scene.getScene('BattleScene');
        if (battleScene && !detectedModules.includes('battle')) {
          detectedModules.push('battle');
          console.log(`üéÆ [LocalizationManager] Module d√©tect√© (Phaser): battle`);
        }
      } catch (error) {
        // Pas grave
      }
    }
    
    return detectedModules;
  }
  
  // === üéØ API PUBLIQUE √âTENDUE ===
  
  /**
   * Obtenir une traduction avec support variables √©tendu
   */
  t(path, lang = null, variables = {}) {
    if (!this.isReady || !this.translations) {
      console.warn(`‚ö†Ô∏è [LocalizationManager] Pas pr√™t pour: ${path}`);
      return path;
    }
    
    const currentLang = lang || this.getCurrentLanguage();
    
    let translation = this.getTranslationByPath(path, currentLang);
    
    if (translation === null && currentLang !== this.fallbackLanguage) {
      translation = this.getTranslationByPath(path, this.fallbackLanguage);
      
      if (translation !== null) {
        console.warn(`‚ö†Ô∏è [LocalizationManager] Fallback ${this.fallbackLanguage} pour: ${path}`);
      }
    }
    
    if (translation === null) {
      console.warn(`‚ö†Ô∏è [LocalizationManager] Manquant: ${path} (${currentLang})`);
      return path;
    }
    
    // Support variables √©tendu
    if (variables && Object.keys(variables).length > 0) {
      translation = this.replaceVariables(translation, variables);
    }
    
    return translation;
  }
  
  /**
   * ‚öîÔ∏è AM√âLIOR√â: Remplacer variables avec support formatage
   */
  replaceVariables(text, variables) {
    let result = text;
    
    Object.entries(variables).forEach(([key, value]) => {
      // Support formatage simple
      let formattedValue = value;
      
      if (key.includes('_formatted') || key.includes('Format')) {
        // Valeurs d√©j√† format√©es
        formattedValue = value;
      } else if (typeof value === 'number') {
        // Formater nombres si n√©cessaire
        if (key.includes('damage') || key.includes('hp')) {
          formattedValue = Math.floor(value);
        } else if (key.includes('level')) {
          formattedValue = `L.${value}`;
        }
      }
      
      const placeholder = `{${key}}`;
      result = result.replace(new RegExp(placeholder, 'g'), formattedValue);
    });
    
    return result;
  }
  
  /**
   * ‚öîÔ∏è AM√âLIOR√â: API battle avec chargement automatique
   */
  battleT(key, variables = {}, lang = null) {
    const fullPath = `battle.ui.${key}`;
    const translation = this.t(fullPath, lang, variables);
    
    // Si pas trouv√©, tenter chargement battle module
    if (translation === fullPath && !this.isModuleLoaded('battle')) {
      console.log(`‚öîÔ∏è [LocalizationManager] Chargement battle module pour: ${key}`);
      this.loadModule('battle');
    }
    
    return translation;
  }
  
  /**
   * ‚öîÔ∏è AM√âLIOR√â: getMoveNameT avec chargement automatique
   */
  async getMoveNameTAsync(moveId, lang = null) {
    const currentLang = lang || this.getCurrentLanguage();
    
    // V√©rifier si moves charg√©es
    if (!this.battleDataState.movesLoaded.has(currentLang)) {
      console.log(`‚öîÔ∏è [LocalizationManager] Chargement moves ${currentLang} pour: ${moveId}`);
      await this.loadMovesForLanguage(currentLang);
    }
    
    return this.getMoveNameT(moveId, currentLang);
  }
  
  /**
   * ‚öîÔ∏è AM√âLIOR√â: getPokemonNameT avec chargement automatique
   */
  async getPokemonNameTAsync(pokemonId, lang = null, withDescription = false) {
    const currentLang = lang || this.getCurrentLanguage();
    
    // V√©rifier si pok√©mon charg√©s
    if (!this.battleDataState.pokemonLoaded.has(currentLang)) {
      console.log(`‚öîÔ∏è [LocalizationManager] Chargement pok√©mon ${currentLang} pour: ${pokemonId}`);
      await this.loadPokemonForLanguage(currentLang);
    }
    
    return this.getPokemonNameT(pokemonId, currentLang, withDescription);
  }
  
  /**
   * ‚öîÔ∏è NOUVEAU: API compl√®te pour battle UI
   * @param {object} battleData - Donn√©es battle compl√®tes
   * @param {string} lang - Langue (optionnel)
   * @returns {object} Toutes les traductions battle n√©cessaires
   */
  async getBattleTranslationsComplete(battleData = {}, lang = null) {
    const currentLang = lang || this.getCurrentLanguage();
    
    // Assurer que battle data est charg√©e
    const loadPromises = [];
    
    if (!this.battleDataState.movesLoaded.has(currentLang)) {
      loadPromises.push(this.loadMovesForLanguage(currentLang));
    }
    
    if (!this.battleDataState.pokemonLoaded.has(currentLang)) {
      loadPromises.push(this.loadPokemonForLanguage(currentLang));
    }
    
    await Promise.all(loadPromises);
    
    // Construire traductions compl√®tes
    const translations = {
      // Actions de base
      actions: {
        attack: this.battleT('actions.attack', {}, currentLang),
        bag: this.battleT('actions.bag', {}, currentLang),
        pokemon: this.battleT('actions.pokemon', {}, currentLang),
        run: this.battleT('actions.run', {}, currentLang)
      },
      
      // Labels
      labels: {
        yourPokemon: this.battleT('your_pokemon', {}, currentLang),
        wildPokemon: this.battleT('wild_pokemon', {}, currentLang),
        selectMove: this.battleT('moves.select_move', {}, currentLang),
        loading: this.battleT('messages.loading', {}, currentLang)
      },
      
      // Boutons
      buttons: {
        continue: this.battleT('buttons.continue', {}, currentLang),
        back: this.battleT('buttons.back', {}, currentLang),
        close: this.battleT('buttons.close', {}, currentLang),
        yes: this.battleT('buttons.yes', {}, currentLang),
        no: this.battleT('buttons.no', {}, currentLang)
      },
      
      // Status
      status: {},
      
      // Types
      types: {},
      
      // Messages dynamiques
      messages: {},
      
      // Pok√©mon (si donn√©es fournies)
      pokemon: {},
      
      // Moves (si donn√©es fournies)
      moves: {}
    };
    
    // Charger status
    const statusList = ['normal', 'paralyzed', 'poisoned', 'burned', 'asleep', 'frozen', 'confused', 'ko'];
    statusList.forEach(status => {
      translations.status[status] = this.battleT(`status.${status}`, {}, currentLang);
    });
    
    // Charger types
    const typeList = ['normal', 'fire', 'water', 'electric', 'grass', 'ice', 'fighting', 'poison', 'ground', 'flying', 'psychic', 'bug', 'rock', 'ghost', 'dragon', 'dark', 'steel', 'fairy'];
    typeList.forEach(type => {
      translations.types[type] = this.getTypeNameT(type, currentLang);
    });
    
    // Messages de bataille communs
    const messageKeys = [
      'what_will_you_do', 'battle_start', 'victory', 'defeat',
      'super_effective', 'not_very_effective', 'critical_hit', 'no_effect'
    ];
    
    messageKeys.forEach(key => {
      translations.messages[key] = this.getBattleMessageT(key, {}, currentLang);
    });
    
    // Charger pok√©mon sp√©cifiques si fournis
    if (battleData.pokemon && Array.isArray(battleData.pokemon)) {
      for (const pkm of battleData.pokemon) {
        if (pkm.id) {
          translations.pokemon[pkm.id] = this.getPokemonNameT(pkm.id, currentLang, true);
        }
      }
    }
    
    // Charger moves sp√©cifiques si fournies
    if (battleData.moves && Array.isArray(battleData.moves)) {
      for (const move of battleData.moves) {
        if (move.id) {
          translations.moves[move.id] = this.getMoveNameT(move.id, currentLang);
        }
      }
    }
    
    return translations;
  }
  
  // === üîß M√âTHODES H√âRIT√âES √âTENDUES ===
  
  async _loadSmartModules() {
    console.log('üß† [LocalizationManager] Strat√©gie SMART √©tendue avec Battle');
    
    const requiredModules = this.moduleConfig.required;
    const detectedModules = this.moduleConfig.loadingStrategy.detectModules 
      ? this._detectUsedModules() 
      : [];
    
    const modulesToLoad = [...new Set([...requiredModules, ...detectedModules])];
    
    console.log(`üì¶ [LocalizationManager] Modules √† charger:`, modulesToLoad);
    
    const results = await this._loadModules(modulesToLoad);
    this._mergeAllTranslations();
    
    const success = this.loadedModules.size > 0;
    this.isReady = success;
    
    if (success) {
      console.log(`‚úÖ [LocalizationManager] SMART charg√©: ${this.loadedModules.size} modules`);
    }
    
    return success;
  }
  
  /**
   * Mise √† jour composants √©tendue
   */
  updateExistingComponents() {
    const componentUpdaters = [
      // Composants UI standard
      () => {
        if (window.inventorySystemGlobal?.icon?.updateLanguage) {
          window.inventorySystemGlobal.icon.updateLanguage();
          console.log('üîÑ [LocalizationManager] InventoryIcon mis √† jour');
        }
      },
      
      () => {
        if (window.teamSystemGlobal?.icon?.updateLanguage) {
          window.teamSystemGlobal.icon.updateLanguage();
          console.log('üîÑ [LocalizationManager] TeamIcon mis √† jour');
        }
      },
      
      () => {
        if (window.questSystemGlobal?.icon?.updateLanguage) {
          window.questSystemGlobal.icon.updateLanguage();
          console.log('üîÑ [LocalizationManager] QuestIcon mis √† jour');
        }
      },
      
      () => {
        if (window.optionsSystemGlobal?.icon?.updateLanguage) {
          window.optionsSystemGlobal.icon.updateLanguage();
          console.log('üîÑ [LocalizationManager] OptionsIcon mis √† jour');
        }
      },
      
      // ‚öîÔ∏è Battle Systems √©tendus
      () => {
        if (window.game?.scene?.getScene('BattleScene')) {
          const battleScene = window.game.scene.getScene('BattleScene');
          if (battleScene.battleTranslator?.setLanguage) {
            const currentLang = this.getCurrentLanguage();
            battleScene.battleTranslator.setLanguage(currentLang);
            console.log('üîÑ [LocalizationManager] BattleTranslator mis √† jour');
          }
          
          // ‚öîÔ∏è NOUVEAU: Notifier changement battle data
          if (battleScene.onBattleDataUpdated) {
            battleScene.onBattleDataUpdated();
            console.log('üîÑ [LocalizationManager] BattleScene battle data mis √† jour');
          }
        }
      },
      
      () => {
        if (window.battleActionUI?.updateLanguage) {
          window.battleActionUI.updateLanguage();
          console.log('üîÑ [LocalizationManager] BattleActionUI mis √† jour');
        }
      },
      
      // ‚öîÔ∏è NOUVEAU: Pokemon Moves UI
      () => {
        if (window.pokemonMovesUI?.updateLanguage) {
          window.pokemonMovesUI.updateLanguage();
          console.log('üîÑ [LocalizationManager] PokemonMovesUI mis √† jour');
        }
      },
      
      // ‚öîÔ∏è NOUVEAU: KO Manager
      () => {
        if (window.koManager?.updateLanguage) {
          window.koManager.updateLanguage();
          console.log('üîÑ [LocalizationManager] KOManager mis √† jour');
        }
      }
    ];
    
    componentUpdaters.forEach(updater => {
      try {
        updater();
      } catch (error) {
        console.warn('‚ö†Ô∏è [LocalizationManager] Erreur mise √† jour composant:', error);
      }
    });
  }
  
  // === üéØ NOUVELLES APIs DE COMMODIT√â ===
  
  /**
   * ‚öîÔ∏è NOUVEAU: Changer de langue et recharger battle data
   * @param {string} newLang - Nouvelle langue
   * @returns {Promise<boolean>}
   */
  async switchLanguage(newLang) {
    if (!this.moduleConfig.supportedLanguages[newLang]) {
      console.error(`‚ùå [LocalizationManager] Langue non support√©e: ${newLang}`);
      return false;
    }
    
    console.log(`üîÑ [LocalizationManager] Changement de langue vers ${newLang}...`);
    
    // Charger battle data pour nouvelle langue si battle d√©tect√©
    const needsBattleData = this._detectBattleDataNeeds();
    
    const loadPromises = [];
    
    if (needsBattleData.moves && !this.battleDataState.movesLoaded.has(newLang)) {
      loadPromises.push(this.loadMovesForLanguage(newLang));
    }
    
    if (needsBattleData.pokemon && !this.battleDataState.pokemonLoaded.has(newLang)) {
      loadPromises.push(this.loadPokemonForLanguage(newLang));
    }
    
    const results = await Promise.allSettled(loadPromises);
    const successful = results.filter(r => r.status === 'fulfilled').length;
    
    // Mettre √† jour tous les composants
    this.updateExistingComponents();
    
    console.log(`‚úÖ [LocalizationManager] Langue chang√©e vers ${newLang}, battle data: ${successful}/${results.length}`);
    return true;
  }
  
  /**
   * ‚öîÔ∏è NOUVEAU: V√©rifier disponibilit√© compl√®te battle
   * @param {string} lang - Langue √† v√©rifier
   * @returns {object} √âtat de disponibilit√©
   */
  getBattleAvailability(lang = null) {
    const currentLang = lang || this.getCurrentLanguage();
    
    return {
      language: currentLang,
      uiModule: this.isModuleLoaded('battle'),
      moves: this.battleDataState.movesLoaded.has(currentLang),
      pokemon: this.battleDataState.pokemonLoaded.has(currentLang),
      isComplete: this.isModuleLoaded('battle') && 
                  this.battleDataState.movesLoaded.has(currentLang) && 
                  this.battleDataState.pokemonLoaded.has(currentLang)
    };
  }
  
  /**
   * ‚öîÔ∏è NOUVEAU: Forcer rechargement complet battle
   * @param {string} lang - Langue (optionnel)
   * @returns {Promise<boolean>}
   */
  async reloadBattleData(lang = null) {
    const currentLang = lang || this.getCurrentLanguage();
    
    console.log(`üîÑ [LocalizationManager] Rechargement battle data ${currentLang}...`);
    
    // R√©initialiser √©tat
    this.battleDataState.movesLoaded.delete(currentLang);
    this.battleDataState.pokemonLoaded.delete(currentLang);
    this.moveTranslations.delete(currentLang);
    this.pokemonTranslations.delete(currentLang);
    
    // Recharger module UI battle
    const uiSuccess = await this.loadModule('battle', true);
    
    // Recharger battle data
    const movesSuccess = await this.loadMovesForLanguage(currentLang);
    const pokemonSuccess = await this.loadPokemonForLanguage(currentLang);
    
    if (uiSuccess || movesSuccess || pokemonSuccess) {
      this.updateExistingComponents();
    }
    
    const success = uiSuccess && movesSuccess && pokemonSuccess;
    console.log(`${success ? '‚úÖ' : '‚ö†Ô∏è'} [LocalizationManager] Rechargement battle: UI:${uiSuccess}, Moves:${movesSuccess}, Pok√©mon:${pokemonSuccess}`);
    
    return success;
  }
  
  // === üêõ DEBUG √âTENDU ===
  
  getDebugInfo() {
    const currentLang = this.getCurrentLanguage();
    
    return {
      isReady: this.isReady,
      isLoading: this.isLoading,
      mode: 'complete-battle-with-moves-and-pokemon',
      strategy: this.moduleConfig.loadingStrategy.mode,
      
      // Modules UI
      modules: {
        loaded: Array.from(this.loadedModules),
        failed: Array.from(this.failedModules),
        total: this.moduleTranslations.size
      },
      
      // ‚öîÔ∏è Battle Data
      battleData: {
        currentLanguage: currentLang,
        moves: {
          loadedLanguages: Array.from(this.battleDataState.movesLoaded),
          currentLoaded: this.battleDataState.movesLoaded.has(currentLang),
          totalMoves: this.moveTranslations.get(currentLang) ? Object.keys(this.moveTranslations.get(currentLang)).length : 0
        },
        pokemon: {
          loadedLanguages: Array.from(this.battleDataState.pokemonLoaded),
          currentLoaded: this.battleDataState.pokemonLoaded.has(currentLang),
          totalPokemon: this.pokemonTranslations.get(currentLang) ? Object.keys(this.pokemonTranslations.get(currentLang)).length : 0
        },
        availability: this.getBattleAvailability(currentLang)
      },
      
      // Langues
      languages: {
        current: currentLang,
        available: this.getAvailableLanguages(),
        supported: Object.keys(this.moduleConfig.supportedLanguages),
        fallback: this.fallbackLanguage
      },
      
      // D√©tection p√©riodique
      periodicDetection: {
        enabled: this.periodicDetection.enabled,
        active: !!this.periodicDetection.timerId,
        attempts: this.periodicDetection.currentAttempts,
        maxAttempts: this.periodicDetection.maxAttempts,
        detectedModules: this._detectUsedModules(),
        battleNeeds: this._detectBattleDataNeeds()
      },
      
      // Tests
      samples: {
        uiTranslation: this.isReady ? this.t('quest.label') : null,
        battleAction: this.isReady ? this.battleT('actions.attack') : null,
        moveTranslation: this.battleDataState.movesLoaded.has(currentLang) ? this.getMoveNameT('tackle') : null,
        pokemonTranslation: this.battleDataState.pokemonLoaded.has(currentLang) ? this.getPokemonNameT(1) : null
      },
      
      lastError: this.lastError?.message || null
    };
  }
  
  /**
   * ‚öîÔ∏è NOUVEAU: Test complet battle avec toutes les sources
   */
  async testBattleComplete(lang = null) {
    const currentLang = lang || this.getCurrentLanguage();
    
    console.log(`üß™ [LocalizationManager] Test battle complet en ${currentLang}:`);
    
    if (!this.isReady) {
      console.warn('‚ö†Ô∏è [LocalizationManager] Manager pas pr√™t');
      return null;
    }
    
    // Assurer chargement complet
    await this.getBattleTranslationsComplete({}, currentLang);
    
    const results = {
      language: currentLang,
      availability: this.getBattleAvailability(currentLang),
      
      // Test UI
      ui: {
        actions: ['attack', 'bag', 'pokemon', 'run'].map(action => ({
          key: action,
          translation: this.battleT(`actions.${action}`, {}, currentLang)
        })),
        messages: ['victory', 'defeat', 'super_effective'].map(msg => ({
          key: msg,
          translation: this.getBattleMessageT(msg, {}, currentLang)
        }))
      },
      
      // Test moves
      moves: ['tackle', 'ember', 'water_gun', 'thunder_shock', 'vine_whip'].map(move => ({
        key: move,
        translation: this.getMoveNameT(move, currentLang)
      })),
      
      // Test pok√©mon
      pokemon: [1, 4, 7, 25, 150].map(id => ({
        id: id,
        data: this.getPokemonNameT(id, currentLang, true)
      })),
      
      // Test types
      types: ['fire', 'water', 'electric', 'grass', 'psychic'].map(type => ({
        key: type,
        translation: this.getTypeNameT(type, currentLang)
      }))
    };
    
    // Afficher r√©sultats
    console.log('üéÆ Actions UI:', results.ui.actions);
    console.log('üí¨ Messages:', results.ui.messages);
    console.log('‚öîÔ∏è Moves:', results.moves);
    console.log('üëæ Pok√©mon:', results.pokemon);
    console.log('üè∑Ô∏è Types:', results.types);
    
    return results;
  }
  
  // === üßπ NETTOYAGE √âTENDU ===
  
  destroy() {
    console.log('üßπ [LocalizationManager] Destruction compl√®te...');
    
    this.stopPeriodicDetection();
    
    // Nettoyage standard
    this.translations = null;
    this.moduleTranslations.clear();
    this.loadedModules.clear();
    this.failedModules.clear();
    
    // ‚öîÔ∏è Nettoyage battle data
    this.moveTranslations.clear();
    this.pokemonTranslations.clear();
    this.battleDataState.movesLoaded.clear();
    this.battleDataState.pokemonLoaded.clear();
    this.battleDataState.loadingMoves.clear();
    this.battleDataState.loadingPokemon.clear();
    
    this.isReady = false;
    
    console.log('‚úÖ [LocalizationManager] Destruction compl√®te termin√©e');
  }
  
  // === M√âTHODES H√âRIT√âES (compatibilit√©) ===
  
  startPeriodicDetection() {
    if (!this.periodicDetection.enabled) {
      return;
    }
    
    if (this.periodicDetection.timerId) {
      return;
    }
    
    console.log(`üîÑ [LocalizationManager] D√©marrage d√©tection p√©riodique √©tendue`);
    
    this.periodicDetection.timerId = setInterval(() => {
      this.checkForNewModules();
    }, this.periodicDetection.interval);
    
    setTimeout(() => {
      this.checkForNewModules();
    }, 1000);
  }
  
  stopPeriodicDetection() {
    if (this.periodicDetection.timerId) {
      clearInterval(this.periodicDetection.timerId);
      this.periodicDetection.timerId = null;
      console.log('‚èπÔ∏è [LocalizationManager] D√©tection p√©riodique arr√™t√©e');
    }
  }
  
  async _loadTranslationsModular(options = {}) {
    try {
      console.log('üîÑ [LocalizationManager] Chargement modulaire...');
      
      const strategy = options.strategy || this.moduleConfig.loadingStrategy.mode;
      
      switch (strategy) {
        case 'all':
          return await this._loadAllModules();
          
        case 'smart':
          return await this._loadSmartModules();
          
        case 'ondemand':
          return await this._loadRequiredOnly();
          
        default:
          return await this._loadSmartModules();
      }
      
    } catch (error) {
      console.error('‚ùå [LocalizationManager] Erreur chargement modulaire:', error);
      return await this._fallbackToLegacy();
    }
  }
  
  async _loadAllModules() {
    console.log('üéØ [LocalizationManager] Strat√©gie ALL');
    
    const allModules = [...this.moduleConfig.required, ...this.moduleConfig.optional];
    
    const results = await this._loadModules(allModules);
    this._mergeAllTranslations();
    
    const success = this.loadedModules.size > 0;
    this.isReady = success;
    
    console.log(`‚úÖ [LocalizationManager] ALL charg√©: ${this.loadedModules.size}/${allModules.length} modules`);
    return success;
  }
  
  async _loadRequiredOnly() {
    console.log('‚ö° [LocalizationManager] Strat√©gie REQUIRED ONLY');
    
    const results = await this._loadModules(this.moduleConfig.required);
    this._mergeAllTranslations();
    
    const success = this.loadedModules.size > 0;
    this.isReady = success;
    
    console.log(`‚úÖ [LocalizationManager] REQUIRED charg√©: ${this.loadedModules.size} modules`);
    return success;
  }
  
  async _loadModules(moduleNames) {
    const loadPromises = moduleNames.map(async (moduleName) => {
      try {
        const moduleData = await this._loadSingleModule(moduleName);
        if (moduleData) {
          this.moduleTranslations.set(moduleName, moduleData);
          this.loadedModules.add(moduleName);
          return { module: moduleName, success: true, data: moduleData };
        } else {
          throw new Error(`Donn√©es vides pour module ${moduleName}`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è [LocalizationManager] √âchec module "${moduleName}":`, error.message);
        this.failedModules.add(moduleName);
        return { module: moduleName, success: false, error: error.message };
      }
    });
    
    const results = await Promise.all(loadPromises);
    
    const successful = results.filter(r => r.success);
    const failed = results.filter(r => !r.success);
    
    console.log(`üìä [LocalizationManager] R√©sultats: ${successful.length} succ√®s, ${failed.length} √©checs`);
    
    return results;
  }
  
  async _loadSingleModule(moduleName) {
    const moduleFile = this._getModuleFilename(moduleName);
    const moduleUrl = `${this.moduleConfig.basePath}/${moduleFile}`;
    
    console.log(`üì• [LocalizationManager] Chargement: ${moduleUrl}`);
    
    const response = await fetch(moduleUrl);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const moduleData = await response.json();
    
    if (!moduleData || typeof moduleData !== 'object') {
      throw new Error('Format invalide');
    }
    
    console.log(`‚úÖ [LocalizationManager] Module "${moduleName}" charg√©`);
    return moduleData;
  }
  
  _getModuleFilename(moduleName) {
    const fileMapping = {
      common: 'modules/common-ui.json',
      quest: 'modules/quest-ui.json',
      team: 'modules/team-ui.json',
      inventory: 'modules/inventory-ui.json',
      options: 'modules/options-ui.json',
      pokedex: 'modules/pokedex-ui.json',
      battle: 'modules/battle-ui.json'
    };
    
    return fileMapping[moduleName] || `modules/${moduleName}-ui.json`;
  }
  
  _mergeAllTranslations() {
    console.log('üîÄ [LocalizationManager] Fusion des traductions...');
    
    this.translations = {};
    
    const allLanguages = new Set();
    this.moduleTranslations.forEach(moduleData => {
      Object.keys(moduleData).forEach(lang => allLanguages.add(lang));
    });
    
    allLanguages.forEach(lang => {
      this.translations[lang] = {};
      
      this.moduleTranslations.forEach((moduleData, moduleName) => {
        if (moduleData[lang]) {
          this.translations[lang] = this._deepMerge(
            this.translations[lang], 
            moduleData[lang]
          );
        }
      });
    });
    
    const languages = Object.keys(this.translations);
    const totalKeys = Object.keys(this.translations[this.fallbackLanguage] || {}).length;
    
    console.log(`‚úÖ [LocalizationManager] Fusion termin√©e: ${languages.length} langues, ~${totalKeys} cl√©s`);
  }
  
  _deepMerge(target, source) {
    const result = { ...target };
    
    Object.keys(source).forEach(key => {
      if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
        result[key] = this._deepMerge(result[key] || {}, source[key]);
      } else {
        result[key] = source[key];
      }
    });
    
    return result;
  }
  
  async _fallbackToLegacy() {
    console.log('üîÑ [LocalizationManager] Fallback vers syst√®me h√©rit√©...');
    
    try {
      const response = await fetch('/localization/ui-translations.json');
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      this.translations = await response.json();
      
      if (!this.translations || typeof this.translations !== 'object') {
        throw new Error('Format invalide');
      }
      
      this.isReady = true;
      this.lastError = null;
      
      console.log('‚úÖ [LocalizationManager] Fallback h√©rit√© r√©ussi');
      return true;
      
    } catch (error) {
      console.error('‚ùå [LocalizationManager] Fallback h√©rit√© √©chou√©:', error);
      this.lastError = error;
      return false;
    }
  }
  
  getTranslationByPath(path, lang) {
    const langData = this.translations[lang];
    if (!langData) {
      return null;
    }
    
    const keys = path.split('.');
    let result = langData;
    
    for (const key of keys) {
      if (result && typeof result === 'object' && key in result) {
        result = result[key];
      } else {
        return null;
      }
    }
    
    return typeof result === 'string' ? result : null;
  }
  
  getCurrentLanguage() {
    if (typeof window.GetPlayerCurrentLanguage === 'function') {
      return window.GetPlayerCurrentLanguage();
    }
    
    if (window.optionsSystem && typeof window.optionsSystem.getCurrentLanguage === 'function') {
      return window.optionsSystem.getCurrentLanguage();
    }
    
    try {
      const browserLang = navigator.language.toLowerCase().split('-')[0];
      const supportedLanguages = Object.keys(this.moduleConfig.supportedLanguages);
      
      if (supportedLanguages.includes(browserLang)) {
        return browserLang;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è [LocalizationManager] Erreur d√©tection langue:', error);
    }
    
    return this.fallbackLanguage;
  }
  
  notifyModulesUpdated(newModules) {
    console.log(`üì¢ [LocalizationManager] Notification nouveaux modules:`, newModules);
    
    window.dispatchEvent(new CustomEvent('localizationModulesUpdated', {
      detail: { 
        newModules, 
        loadedModules: Array.from(this.loadedModules),
        totalModules: this.moduleTranslations.size,
        battleData: {
          movesLoaded: Array.from(this.battleDataState.movesLoaded),
          pokemonLoaded: Array.from(this.battleDataState.pokemonLoaded)
        }
      }
    }));
    
    this.updateExistingComponents();
  }
  
  async loadModule(moduleName, force = false) {
    if (!force && this.loadedModules.has(moduleName)) {
      console.log(`‚úÖ [LocalizationManager] Module "${moduleName}" d√©j√† charg√©`);
      return true;
    }
    
    try {
      console.log(`üì• [LocalizationManager] Chargement module "${moduleName}"...`);
      
      const moduleData = await this._loadSingleModule(moduleName);
      
      if (moduleData) {
        this.moduleTranslations.set(moduleName, moduleData);
        this.loadedModules.add(moduleName);
        this.failedModules.delete(moduleName);
        
        this._mergeAllTranslations();
        this.notifyModulesUpdated([moduleName]);
        
        console.log(`‚úÖ [LocalizationManager] Module "${moduleName}" charg√© et fusionn√©`);
        return true;
      }
      
      return false;
      
    } catch (error) {
      console.error(`‚ùå [LocalizationManager] Erreur module "${moduleName}":`, error);
      this.failedModules.add(moduleName);
      return false;
    }
  }
  
  async loadBattleModule(force = false) {
    console.log('‚öîÔ∏è [LocalizationManager] Chargement sp√©cifique module battle...');
    
    const success = await this.loadModule('battle', force);
    
    if (success) {
      console.log('‚úÖ [LocalizationManager] Module battle charg√© avec succ√®s');
      
      if (window.battleSystem) {
        window.battleSystem.onLanguageUpdated?.();
      }
      
      if (window.game?.scene?.getScene('BattleScene')) {
        const battleScene = window.game.scene.getScene('BattleScene');
        battleScene.onLanguageUpdated?.();
      }
    }
    
    return success;
  }
  
  isModuleLoaded(moduleName) {
    return this.loadedModules.has(moduleName);
  }
  
  isBattleModuleLoaded() {
    return this.isModuleLoaded('battle');
  }
  
  getLoadedModules() {
    return Array.from(this.loadedModules);
  }
  
  getFailedModules() {
    return Array.from(this.failedModules);
  }
  
  isLanguageSupported(lang) {
    return this.isReady && this.translations && (lang in this.translations);
  }
  
  getAvailableLanguages() {
    if (!this.isReady || !this.translations) {
      return [];
    }
    return Object.keys(this.translations);
  }
  
  getLanguageData(lang) {
    if (!this.isReady || !this.translations) {
      return null;
    }
    return this.translations[lang] || null;
  }
  
  hasTranslation(path, lang = null) {
    const currentLang = lang || this.getCurrentLanguage();
    const translation = this.getTranslationByPath(path, currentLang);
    return translation !== null;
  }
  
  hasBattleTranslation(key, lang = null) {
    const fullPath = `battle.ui.${key}`;
    return this.hasTranslation(fullPath, lang);
  }
  
  async reload() {
    console.log('üîÑ [LocalizationManager] Rechargement complet...');
    
    this.stopPeriodicDetection();
    
    this.translations = null;
    this.moduleTranslations.clear();
    this.loadedModules.clear();
    this.failedModules.clear();
    
    // ‚öîÔ∏è NOUVEAU: Reset battle data
    this.moveTranslations.clear();
    this.pokemonTranslations.clear();
    this.battleDataState.movesLoaded.clear();
    this.battleDataState.pokemonLoaded.clear();
    this.battleDataState.loadingMoves.clear();
    this.battleDataState.loadingPokemon.clear();
    
    this.isReady = false;
    this.isLoading = false;
    this.loadPromise = null;
    this.lastError = null;
    
    // Reset d√©tection p√©riodique
    this.periodicDetection.currentAttempts = 0;
    this.periodicDetection.lastDetectedModules.clear();
    
    return await this.load();
  }
  
  // === üîß CONTR√îLE D√âTECTION P√âRIODIQUE ===
  
  configurePeriodicDetection(options = {}) {
    this.periodicDetection = {
      ...this.periodicDetection,
      ...options
    };
    
    console.log('üîß [LocalizationManager] D√©tection p√©riodique configur√©e:', this.periodicDetection);
  }
  
  disablePeriodicDetection() {
    this.stopPeriodicDetection();
    this.periodicDetection.enabled = false;
    console.log('‚èπÔ∏è [LocalizationManager] D√©tection p√©riodique d√©sactiv√©e');
  }
  
  enablePeriodicDetection() {
    this.periodicDetection.enabled = true;
    this.periodicDetection.currentAttempts = 0;
    this.startPeriodicDetection();
    console.log('üîÑ [LocalizationManager] D√©tection p√©riodique r√©activ√©e');
  }
  
  // === ‚öîÔ∏è NOUVELLES APIs DE COMMODIT√â BATTLE ===
  
  /**
   * API pour les types Pok√©mon
   */
  getTypeNameT(type, lang = null) {
    const typePath = `battle.ui.types.${type}`;
    const translation = this.t(typePath, lang);
    
    if (translation === typePath) {
      return type.charAt(0).toUpperCase() + type.slice(1);
    }
    
    return translation;
  }
  
  /**
   * API pour les messages de combat avec variables
   */
  getBattleMessageT(messageKey, variables = {}, lang = null) {
    const messagePath = `battle.ui.messages.${messageKey}`;
    return this.t(messagePath, lang, variables);
  }
}

// === üåê INSTANCE GLOBALE ===

let globalLocalizationManager = null;

export function getLocalizationManager() {
  if (!globalLocalizationManager) {
    globalLocalizationManager = new LocalizationManager();
  }
  return globalLocalizationManager;
}

export async function initLocalizationManager(options = {}) {
  const manager = getLocalizationManager();
  
  const success = await manager.load(options);
  if (!success) {
    console.error('‚ùå [LocalizationManager] √âchec initialisation compl√®te');
  }
  
  window.localizationManager = manager;
  
  return manager;
}

// === ‚öîÔ∏è FONCTIONS GLOBALES √âTENDUES ===

/**
 * API globale classique
 */
export function t(path, lang = null, variables = {}) {
  const manager = getLocalizationManager();
  return manager.t(path, lang, variables);
}

/**
 * ‚öîÔ∏è API globale pour traductions battle
 */
export function battleT(key, variables = {}, lang = null) {
  const manager = getLocalizationManager();
  return manager.battleT(key, variables, lang);
}

/**
 * ‚öîÔ∏è API globale pour noms d'attaques
 */
export function getMoveNameT(moveId, lang = null) {
  const manager = getLocalizationManager();
  return manager.getMoveNameT(moveId, lang);
}

/**
 * ‚öîÔ∏è NOUVEAU: API globale async pour noms d'attaques avec auto-chargement
 */
export async function getMoveNameTAsync(moveId, lang = null) {
  const manager = getLocalizationManager();
  return await manager.getMoveNameTAsync(moveId, lang);
}

/**
 * ‚öîÔ∏è API globale pour noms de types
 */
export function getTypeNameT(type, lang = null) {
  const manager = getLocalizationManager();
  return manager.getTypeNameT(type, lang);
}

/**
 * ‚öîÔ∏è API globale pour messages de combat
 */
export function getBattleMessageT(messageKey, variables = {}, lang = null) {
  const manager = getLocalizationManager();
  return manager.getBattleMessageT(messageKey, variables, lang);
}

/**
 * ‚öîÔ∏è NOUVEAU: API globale pour noms pok√©mon
 */
export function getPokemonNameT(pokemonId, lang = null, withDescription = false) {
  const manager = getLocalizationManager();
  return manager.getPokemonNameT(pokemonId, lang, withDescription);
}

/**
 * ‚öîÔ∏è NOUVEAU: API globale async pour noms pok√©mon avec auto-chargement
 */
export async function getPokemonNameTAsync(pokemonId, lang = null, withDescription = false) {
  const manager = getLocalizationManager();
  return await manager.getPokemonNameTAsync(pokemonId, lang, withDescription);
}

/**
 * ‚öîÔ∏è NOUVEAU: API globale pour descriptions pok√©mon
 */
export function getPokemonDescriptionT(pokemonId, lang = null) {
  const manager = getLocalizationManager();
  return manager.getPokemonDescriptionT(pokemonId, lang);
}

/**
 * ‚öîÔ∏è Forcer le chargement du module battle
 */
export async function loadBattleTranslations() {
  const manager = getLocalizationManager();
  return await manager.loadBattleModule();
}

/**
 * ‚öîÔ∏è NOUVEAU: Charger moves pour une langue
 */
export async function loadMovesTranslations(lang = null) {
  const manager = getLocalizationManager();
  const currentLang = lang || manager.getCurrentLanguage();
  return await manager.loadMovesForLanguage(currentLang);
}

/**
 * ‚öîÔ∏è NOUVEAU: Charger pok√©mon pour une langue
 */
export async function loadPokemonTranslations(lang = null) {
  const manager = getLocalizationManager();
  const currentLang = lang || manager.getCurrentLanguage();
  return await manager.loadPokemonForLanguage(currentLang);
}

/**
 * ‚öîÔ∏è NOUVEAU: Obtenir toutes les traductions battle n√©cessaires
 */
export async function getBattleTranslationsComplete(battleData = {}, lang = null) {
  const manager = getLocalizationManager();
  return await manager.getBattleTranslationsComplete(battleData, lang);
}

/**
 * ‚öîÔ∏è V√©rifier si les traductions battle sont pr√™tes
 */
export function isBattleTranslationsReady() {
  const manager = getLocalizationManager();
  return manager.isReady && manager.isBattleModuleLoaded();
}

/**
 * ‚öîÔ∏è NOUVEAU: V√©rifier disponibilit√© compl√®te battle
 */
export function getBattleAvailability(lang = null) {
  const manager = getLocalizationManager();
  return manager.getBattleAvailability(lang);
}

/**
 * ‚öîÔ∏è NOUVEAU: Changer de langue avec rechargement battle
 */
export async function switchLanguage(newLang) {
  const manager = getLocalizationManager();
  return await manager.switchLanguage(newLang);
}

/**
 * ‚öîÔ∏è NOUVEAU: Recharger compl√®tement battle data
 */
export async function reloadBattleData(lang = null) {
  const manager = getLocalizationManager();
  return await manager.reloadBattleData(lang);
}

export default LocalizationManager;

// === üöÄ INITIALISATION AUTOMATIQUE √âTENDUE ===

window.addEventListener('DOMContentLoaded', () => {
  setTimeout(() => {
    const manager = getLocalizationManager();
    
    if (!manager.isReady) {
      initLocalizationManager().then(() => {
        console.log('üåê [LocalizationManager] Auto-initialis√© au chargement DOM');
      });
    }
  }, 1000);
});

// ‚öîÔ∏è √âcouter les changements d'√©tat du jeu pour battle
window.addEventListener('gameStateChanged', (event) => {
  if (event.detail?.newState === 'battle') {
    const manager = getLocalizationManager();
    
    // Charger battle UI si pas fait
    if (!manager.isBattleModuleLoaded()) {
      console.log('‚öîÔ∏è [LocalizationManager] √âtat battle - chargement UI...');
      manager.loadBattleModule();
    }
    
    // Charger battle data si pas fait
    const currentLang = manager.getCurrentLanguage();
    const availability = manager.getBattleAvailability(currentLang);
    
    if (!availability.moves) {
      console.log('‚öîÔ∏è [LocalizationManager] √âtat battle - chargement moves...');
      manager.loadMovesForLanguage(currentLang);
    }
    
    if (!availability.pokemon) {
      console.log('‚öîÔ∏è [LocalizationManager] √âtat battle - chargement pok√©mon...');
      manager.loadPokemonForLanguage(currentLang);
    }
  }
});

// ‚öîÔ∏è NOUVEAU: √âcouter les changements de langue
window.addEventListener('languageChanged', async (event) => {
  const newLang = event.detail?.newLanguage;
  if (newLang) {
    console.log(`üåê [LocalizationManager] Changement langue d√©tect√©: ${newLang}`);
    await switchLanguage(newLang);
  }
});

// ‚öîÔ∏è NOUVEAU: √âcouter demandes sp√©cifiques battle
window.addEventListener('battleTranslationsRequest', async (event) => {
  const { type, data } = event.detail || {};
  const manager = getLocalizationManager();
  
  console.log(`‚öîÔ∏è [LocalizationManager] Requ√™te battle: ${type}`, data);
  
  switch (type) {
    case 'loadComplete':
      await manager.getBattleTranslationsComplete(data);
      break;
      
    case 'loadMoves':
      await manager.loadMovesForLanguage(data.language);
      break;
      
    case 'loadPokemon':
      await manager.loadPokemonForLanguage(data.language);
      break;
      
    case 'switchLanguage':
      await manager.switchLanguage(data.language);
      break;
      
    default:
      console.warn('‚ö†Ô∏è [LocalizationManager] Type requ√™te battle inconnu:', type);
  }
});

// === üéØ HELPERS POUR BATTLE UI ===

/**
 * ‚öîÔ∏è NOUVEAU: Helper pour composants battle - obtenir traductions avec fallback
 */
window.getBattleText = function(key, variables = {}, fallback = null) {
  try {
    const result = battleT(key, variables);
    return result !== `battle.ui.${key}` ? result : (fallback || key);
  } catch (error) {
    console.warn('‚ö†Ô∏è [LocalizationManager] Erreur getBattleText:', error);
    return fallback || key;
  }
};

/**
 * ‚öîÔ∏è NOUVEAU: Helper pour noms moves avec fallback
 */
window.getMoveText = function(moveId, fallback = null) {
  try {
    return getMoveNameT(moveId) || fallback || moveId;
  } catch (error) {
    console.warn('‚ö†Ô∏è [LocalizationManager] Erreur getMoveText:', error);
    return fallback || moveId;
  }
};

/**
 * ‚öîÔ∏è NOUVEAU: Helper pour noms pok√©mon avec fallback
 */
window.getPokemonText = function(pokemonId, fallback = null) {
  try {
    const result = getPokemonNameT(pokemonId);
    return (typeof result === 'string' && result !== `Pok√©mon #${pokemonId}`) 
      ? result 
      : (fallback || `Pok√©mon #${pokemonId}`);
  } catch (error) {
    console.warn('‚ö†Ô∏è [LocalizationManager] Erreur getPokemonText:', error);
    return fallback || `Pok√©mon #${pokemonId}`;
  }
};

/**
 * ‚öîÔ∏è NOUVEAU: Helper pour types avec fallback
 */
window.getTypeText = function(type, fallback = null) {
  try {
    const result = getTypeNameT(type);
    return result !== type.charAt(0).toUpperCase() + type.slice(1) 
      ? result 
      : (fallback || type);
  } catch (error) {
    console.warn('‚ö†Ô∏è [LocalizationManager] Erreur getTypeText:', error);
    return fallback || type;
  }
};

/**
 * ‚öîÔ∏è NOUVEAU: Helper async pour pr√©-chargement battle complet
 */
window.preloadBattleTranslations = async function(battleData = {}) {
  try {
    const manager = getLocalizationManager();
    const currentLang = manager.getCurrentLanguage();
    
    console.log('‚öîÔ∏è [LocalizationManager] Pr√©-chargement battle complet...');
    
    // Charger en parall√®le
    const promises = [
      manager.loadBattleModule(),
      manager.loadMovesForLanguage(currentLang),
      manager.loadPokemonForLanguage(currentLang)
    ];
    
    const results = await Promise.allSettled(promises);
    const successful = results.filter(r => r.status === 'fulfilled').length;
    
    console.log(`‚öîÔ∏è [LocalizationManager] Pr√©-chargement: ${successful}/3 r√©ussi`);
    
    // Obtenir traductions compl√®tes si data fournie
    if (battleData && Object.keys(battleData).length > 0) {
      return await manager.getBattleTranslationsComplete(battleData, currentLang);
    }
    
    return successful === 3;
    
  } catch (error) {
    console.error('‚ùå [LocalizationManager] Erreur pr√©-chargement battle:', error);
    return false;
  }
};

console.log(`
üåê === LOCALIZATION MANAGER BATTLE COMPLET AVEC MOVES/POK√âMON ===

‚öîÔ∏è NOUVELLES FONCTIONNALIT√âS COMPL√àTES:
‚Ä¢ Module battle-ui.json avec traductions FR/EN/ES/DE/IT/PT/JA/KO
‚Ä¢ Fichiers moves s√©par√©s: /localization/moves/moves_XX.json
‚Ä¢ Fichiers pok√©mon s√©par√©s: /localization/pokemon/gen1/XX.json
‚Ä¢ Chargement automatique et intelligent par langue
‚Ä¢ Cache optimis√© avec √©tat d√©taill√© battle data

üîß APIs BATTLE √âTENDUES:
‚Ä¢ battleT('actions.attack') ‚Üí traduction UI
‚Ä¢ getMoveNameT('tackle') ‚Üí "Charge" depuis moves_fr.json
‚Ä¢ getPokemonNameT(1) ‚Üí "Bulbizarre" depuis fr.json 
‚Ä¢ getPokemonNameT(1, 'en', true) ‚Üí {name: "Bulbasaur", description: "..."}
‚Ä¢ getBattleTranslationsComplete() ‚Üí toutes traductions battle

üöÄ APIs ASYNC AVEC AUTO-CHARGEMENT:
‚Ä¢ getMoveNameTAsync('tackle') ‚Üí charge moves si n√©cessaire
‚Ä¢ getPokemonNameTAsync(25, 'fr', true) ‚Üí charge pok√©mon si n√©cessaire
‚Ä¢ preloadBattleTranslations() ‚Üí pr√©-charge tout

üéØ HELPERS WINDOW GLOBAUX:
‚Ä¢ window.getBattleText('actions.attack', {}, 'FIGHT')
‚Ä¢ window.getMoveText('tackle', 'Tackle')
‚Ä¢ window.getPokemonText(1, 'Pok√©mon #1')
‚Ä¢ window.getTypeText('fire', 'Fire')
‚Ä¢ window.preloadBattleTranslations(battleData)

üîÑ D√âTECTION √âTENDUE:
‚Ä¢ D√©tecte besoins moves/pok√©mon automatiquement
‚Ä¢ Charge par langue selon contexte
‚Ä¢ Notification composants battle extended

üìä DEBUG COMPLET:
‚Ä¢ window.localizationManager.testBattleComplete()
‚Ä¢ window.localizationManager.getBattleAvailability()
‚Ä¢ window.localizationManager.getDebugInfo()

üìÅ STRUCTURE FICHIERS:
/localization/
‚îú‚îÄ‚îÄ modules/battle-ui.json (UI battle)
‚îú‚îÄ‚îÄ moves/moves_XX.json (noms moves)
‚îî‚îÄ‚îÄ pokemon/gen1/XX.json (noms + descriptions)

üéÆ √âV√âNEMENTS √âTENDUS:
‚Ä¢ 'gameStateChanged' ‚Üí charge battle auto
‚Ä¢ 'languageChanged' ‚Üí reload battle data
‚Ä¢ 'battleTranslationsRequest' ‚Üí requ√™tes sp√©cifiques

‚úÖ TOTALEMENT OPTIMIS√â POUR BATTLE UI !
`);

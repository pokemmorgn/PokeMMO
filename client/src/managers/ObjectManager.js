// client/src/modules/ObjectManager.js
// ‚úÖ Gestionnaire d'objets visuels pour MMO Pok√©mon
// üîß VERSION CORRIG√âE - R√©sout l'erreur de nettoyage des groupes Phaser

export class ObjectManager {
  constructor(scene) {
    this.scene = scene;
    this.isInitialized = false;
    
    // ‚úÖ Gestion interne avec Map() - Plus fiable que les groupes Phaser
    this.objectSprites = new Map(); // objectId -> sprite
    this.objectData = new Map();    // objectId -> data
    
    // ‚úÖ Groupes Phaser pour l'affichage uniquement
    this.phaserGroups = {
      objects: null,
      interactions: null
    };
    
    // ‚úÖ √âtat du manager
    this.state = {
      lastUpdateTime: 0,
      totalObjectsCreated: 0,
      totalObjectsDestroyed: 0,
      isCleaningUp: false,
      lastCleanupTime: 0
    };
    
    // ‚úÖ Configuration
    this.config = {
      enableDebugLogs: true,
      enableVisualFeedback: true,
      objectScale: 1.0,
      interactionDistance: 50,
      enableObjectCaching: true,
      maxCacheSize: 1000,
      cleanupBatchSize: 50,
      preventDoubleCleanup: true
    };
    
    // ‚úÖ Callbacks
    this.callbacks = {
      onObjectCreated: null,
      onObjectDestroyed: null,
      onObjectUpdated: null,
      onCleanupStart: null,
      onCleanupComplete: null,
      onCleanupError: null
    };
    
    // ‚úÖ Statistiques debug
    this.stats = {
      objectsInScene: 0,
      objectsCreatedThisSession: 0,
      objectsDestroyedThisSession: 0,
      cleanupAttempts: 0,
      cleanupErrors: 0,
      lastErrorMessage: null
    };
    
    console.log('[ObjectManager] üì¶ Cr√©√© pour sc√®ne:', this.scene.scene.key);
  }

  // === INITIALISATION ===

  initialize() {
    console.log('[ObjectManager] üöÄ === INITIALISATION ===');
    
    try {
      // ‚úÖ Cr√©er les groupes Phaser avec protection
      this.setupPhaserGroups();
      
      // ‚úÖ Marquer comme initialis√©
      this.isInitialized = true;
      
      console.log('[ObjectManager] ‚úÖ Initialis√© avec succ√®s');
      return true;
      
    } catch (error) {
      console.error('[ObjectManager] ‚ùå Erreur initialisation:', error);
      this.stats.cleanupErrors++;
      return false;
    }
  }

  setupPhaserGroups() {
    console.log('[ObjectManager] üéØ Cr√©ation groupes Phaser...');
    
    try {
      // ‚úÖ Nettoyer les anciens groupes si ils existent
      this.safeCleanupGroups();
      
      // ‚úÖ Cr√©er nouveaux groupes
      this.phaserGroups.objects = this.scene.add.group({
        name: 'ObjectManagerGroup',
        active: true,
        maxSize: -1,
        runChildUpdate: false // ‚úÖ Performance
      });
      
      this.phaserGroups.interactions = this.scene.add.group({
        name: 'ObjectInteractionGroup',
        active: true,
        maxSize: -1,
        runChildUpdate: false
      });
      
      // ‚úÖ V√©rifier que les groupes sont valides
      if (!this.phaserGroups.objects || !this.phaserGroups.interactions) {
        throw new Error('√âchec cr√©ation groupes Phaser');
      }
      
      console.log('[ObjectManager] ‚úÖ Groupes Phaser cr√©√©s');
      
    } catch (error) {
      console.error('[ObjectManager] ‚ùå Erreur cr√©ation groupes:', error);
      
      // ‚úÖ Fallback: pas de groupes (mode d√©grad√©)
      this.phaserGroups.objects = null;
      this.phaserGroups.interactions = null;
      
      console.warn('[ObjectManager] ‚ö†Ô∏è Mode d√©grad√©: pas de groupes Phaser');
    }
  }

  // === GESTION DES OBJETS ===

  updateObjects(serverObjects) {
    if (!this.isInitialized) {
      console.warn('[ObjectManager] ‚ö†Ô∏è Manager non initialis√©');
      return false;
    }
    
    console.log(`[ObjectManager] üîÑ Mise √† jour ${serverObjects.length} objets...`);
    
    const stats = {
      created: 0,
      updated: 0,
      destroyed: 0,
      errors: 0
    };
    
    try {
      // ‚úÖ Cr√©er un Set des IDs serveur pour la comparaison
      const serverObjectIds = new Set(serverObjects.map(obj => obj.id));
      
      // ‚úÖ 1. Traiter les objets du serveur
      for (const serverObject of serverObjects) {
        try {
          if (this.objectSprites.has(serverObject.id)) {
            // ‚úÖ Objet existe - mise √† jour
            if (this.updateExistingObject(serverObject)) {
              stats.updated++;
            }
          } else {
            // ‚úÖ Nouvel objet - cr√©ation
            if (this.createNewObject(serverObject)) {
              stats.created++;
            }
          }
        } catch (error) {
          console.error(`[ObjectManager] ‚ùå Erreur traitement objet ${serverObject.id}:`, error);
          stats.errors++;
        }
      }
      
      // ‚úÖ 2. Supprimer les objets qui ne sont plus sur le serveur
      const objectsToDestroy = [];
      for (const [objectId] of this.objectSprites) {
        if (!serverObjectIds.has(objectId)) {
          objectsToDestroy.push(objectId);
        }
      }
      
      // ‚úÖ 3. D√©truire les objets obsol√®tes
      for (const objectId of objectsToDestroy) {
        try {
          if (this.destroyObject(objectId)) {
            stats.destroyed++;
          }
        } catch (error) {
          console.error(`[ObjectManager] ‚ùå Erreur destruction objet ${objectId}:`, error);
          stats.errors++;
        }
      }
      
      // ‚úÖ Mettre √† jour les statistiques
      this.updateStats(stats);
      
      // ‚úÖ Log du r√©sultat
      if (this.config.enableDebugLogs && (stats.created > 0 || stats.destroyed > 0)) {
        console.log(`[ObjectManager] ‚úÖ ${stats.created + stats.updated + stats.destroyed} objets trait√©s (${stats.created} cr√©√©s, ${stats.updated} mis √† jour, ${stats.destroyed} d√©truits)`);
      }
      
      return true;
      
    } catch (error) {
      console.error('[ObjectManager] ‚ùå Erreur mise √† jour objets:', error);
      this.stats.cleanupErrors++;
      return false;
    }
  }

  createNewObject(objectData) {
    try {
      console.log(`[ObjectManager] üÜï Cr√©ation objet: ${objectData.id} √† (${objectData.x}, ${objectData.y})`);
      
      // ‚úÖ Valider les donn√©es
      if (!this.validateObjectData(objectData)) {
        throw new Error(`Donn√©es objet invalides: ${JSON.stringify(objectData)}`);
      }
      
      // ‚úÖ D√©terminer la texture
      const texture = this.determineTexture(objectData);
      if (!texture) {
        throw new Error(`Texture non d√©termin√©e pour objet: ${objectData.type || objectData.name}`);
      }
      
      // ‚úÖ Cr√©er le sprite
      const sprite = this.scene.add.sprite(objectData.x, objectData.y, texture);
      if (!sprite) {
        throw new Error('√âchec cr√©ation sprite Phaser');
      }
      
      // ‚úÖ Configurer le sprite
      this.configureSprite(sprite, objectData);
      
      // ‚úÖ Ajouter au groupe Phaser (si disponible)
      this.addSpriteToGroup(sprite, 'objects');
      
      // ‚úÖ Stocker dans nos Maps
      this.objectSprites.set(objectData.id, sprite);
      this.objectData.set(objectData.id, { ...objectData, createdAt: Date.now() });
      
      // ‚úÖ Mise √† jour statistiques
      this.state.totalObjectsCreated++;
      this.stats.objectsInScene++;
      this.stats.objectsCreatedThisSession++;
      
      // ‚úÖ Callback
      if (this.callbacks.onObjectCreated) {
        this.callbacks.onObjectCreated(objectData, sprite);
      }
      
      if (this.config.enableDebugLogs) {
        console.log(`[ObjectManager] ‚úÖ Sprite cr√©√©: ${objectData.id} √† (${objectData.x}, ${objectData.y})`);
      }
      
      return true;
      
    } catch (error) {
      console.error(`[ObjectManager] ‚ùå Erreur cr√©ation objet ${objectData.id}:`, error);
      return false;
    }
  }

  updateExistingObject(objectData) {
    try {
      const sprite = this.objectSprites.get(objectData.id);
      const oldData = this.objectData.get(objectData.id);
      
      if (!sprite || !oldData) {
        console.warn(`[ObjectManager] ‚ö†Ô∏è Objet ${objectData.id} introuvable pour mise √† jour`);
        return false;
      }
      
      // ‚úÖ V√©rifier si une mise √† jour est n√©cessaire
      const needsUpdate = this.checkIfUpdateNeeded(oldData, objectData);
      if (!needsUpdate) {
        return false; // Pas de changement
      }
      
      // ‚úÖ Mettre √† jour la position si n√©cessaire
      if (oldData.x !== objectData.x || oldData.y !== objectData.y) {
        sprite.setPosition(objectData.x, objectData.y);
        
        if (this.config.enableDebugLogs) {
          console.log(`[ObjectManager] üìç Position mise √† jour: ${objectData.id} -> (${objectData.x}, ${objectData.y})`);
        }
      }
      
      // ‚úÖ Mettre √† jour la texture si n√©cessaire
      const newTexture = this.determineTexture(objectData);
      if (newTexture && sprite.texture.key !== newTexture) {
        sprite.setTexture(newTexture);
        
        if (this.config.enableDebugLogs) {
          console.log(`[ObjectManager] üé® Texture mise √† jour: ${objectData.id} -> ${newTexture}`);
        }
      }
      
      // ‚úÖ Mettre √† jour les donn√©es stock√©es
      this.objectData.set(objectData.id, { ...objectData, updatedAt: Date.now() });
      
      // ‚úÖ Callback
      if (this.callbacks.onObjectUpdated) {
        this.callbacks.onObjectUpdated(objectData, sprite, oldData);
      }
      
      return true;
      
    } catch (error) {
      console.error(`[ObjectManager] ‚ùå Erreur mise √† jour objet ${objectData.id}:`, error);
      return false;
    }
  }

  destroyObject(objectId) {
    try {
      const sprite = this.objectSprites.get(objectId);
      const objectData = this.objectData.get(objectId);
      
      if (!sprite) {
        console.warn(`[ObjectManager] ‚ö†Ô∏è Sprite ${objectId} d√©j√† d√©truit ou inexistant`);
        return false;
      }
      
      if (this.config.enableDebugLogs) {
        console.log(`[ObjectManager] üóëÔ∏è Destruction objet: ${objectId}`);
      }
      
      // ‚úÖ Retirer du groupe Phaser d'abord
      this.removeSpriteFromGroup(sprite, 'objects');
      
      // ‚úÖ D√©truire le sprite Phaser
      if (sprite && sprite.scene && !sprite.scene.sys.isDestroyed) {
        sprite.destroy();
      }
      
      // ‚úÖ Supprimer de nos Maps
      this.objectSprites.delete(objectId);
      this.objectData.delete(objectId);
      
      // ‚úÖ Mise √† jour statistiques
      this.state.totalObjectsDestroyed++;
      this.stats.objectsInScene--;
      this.stats.objectsDestroyedThisSession++;
      
      // ‚úÖ Callback
      if (this.callbacks.onObjectDestroyed) {
        this.callbacks.onObjectDestroyed(objectData, objectId);
      }
      
      return true;
      
    } catch (error) {
      console.error(`[ObjectManager] ‚ùå Erreur destruction objet ${objectId}:`, error);
      return false;
    }
  }

  // === GESTION DES GROUPES PHASER (VERSION S√âCURIS√âE) ===

  addSpriteToGroup(sprite, groupName) {
    if (!sprite) return false;
    
    const group = this.phaserGroups[groupName];
    if (!group) return false; // Mode d√©grad√©
    
    try {
      // ‚úÖ V√©rifier que le groupe est encore valide
      if (group.scene && !group.scene.sys.isDestroyed) {
        group.add(sprite);
        return true;
      }
    } catch (error) {
      console.warn(`[ObjectManager] ‚ö†Ô∏è Erreur ajout sprite au groupe ${groupName}:`, error);
    }
    
    return false;
  }

  removeSpriteFromGroup(sprite, groupName) {
    if (!sprite) return false;
    
    const group = this.phaserGroups[groupName];
    if (!group) return false; // Mode d√©grad√©
    
    try {
      // ‚úÖ V√©rifier que le groupe est encore valide
      if (group.scene && !group.scene.sys.isDestroyed && group.contains && group.contains(sprite)) {
        group.remove(sprite);
        return true;
      }
    } catch (error) {
      console.warn(`[ObjectManager] ‚ö†Ô∏è Erreur suppression sprite du groupe ${groupName}:`, error);
    }
    
    return false;
  }

  // === NETTOYAGE S√âCURIS√â (R√âSOUT LE PROBL√àME PRINCIPAL) ===

  safeCleanupGroups() {
    if (this.state.isCleaningUp) {
      console.log('[ObjectManager] ‚ö†Ô∏è Nettoyage d√©j√† en cours, skip');
      return;
    }
    
    this.state.isCleaningUp = true;
    this.state.lastCleanupTime = Date.now();
    this.stats.cleanupAttempts++;
    
    console.log('[ObjectManager] üßπ === NETTOYAGE S√âCURIS√â DES GROUPES ===');
    
    // ‚úÖ Callback de d√©but
    if (this.callbacks.onCleanupStart) {
      this.callbacks.onCleanupStart();
    }
    
    try {
      // ‚úÖ √âTAPE 1: Nettoyer d'abord nos Maps internes
      console.log('[ObjectManager] üóÇÔ∏è Nettoyage Maps internes...');
      this.cleanupInternalMaps();
      
      // ‚úÖ √âTAPE 2: Nettoyer les groupes Phaser avec plusieurs strat√©gies
      console.log('[ObjectManager] üéØ Nettoyage groupes Phaser...');
      this.cleanupPhaserGroupsSafely();
      
      // ‚úÖ √âTAPE 3: R√©initialiser les groupes √† null
      console.log('[ObjectManager] üîÑ R√©initialisation groupes...');
      this.phaserGroups.objects = null;
      this.phaserGroups.interactions = null;
      
      console.log('[ObjectManager] ‚úÖ Nettoyage termin√© avec succ√®s');
      
      // ‚úÖ Callback de succ√®s
      if (this.callbacks.onCleanupComplete) {
        this.callbacks.onCleanupComplete(true);
      }
      
    } catch (error) {
      console.error('[ObjectManager] ‚ùå Erreur nettoyage:', error);
      this.stats.cleanupErrors++;
      this.stats.lastErrorMessage = error.message;
      
      // ‚úÖ Callback d'erreur
      if (this.callbacks.onCleanupError) {
        this.callbacks.onCleanupError(error);
      }
      
      // ‚úÖ Forcer la r√©initialisation m√™me en cas d'erreur
      this.phaserGroups.objects = null;
      this.phaserGroups.interactions = null;
      
    } finally {
      this.state.isCleaningUp = false;
    }
  }

  cleanupInternalMaps() {
    const objectCount = this.objectSprites.size;
    
    // ‚úÖ D√©truire tous les sprites individuellement AVANT de toucher aux groupes
    for (const [objectId, sprite] of this.objectSprites) {
      try {
        if (sprite && sprite.scene && !sprite.scene.sys.isDestroyed) {
          // ‚úÖ Important: ne pas utiliser les groupes ici
          sprite.destroy();
        }
      } catch (error) {
        console.warn(`[ObjectManager] ‚ö†Ô∏è Erreur destruction sprite ${objectId}:`, error);
      }
    }
    
    // ‚úÖ Vider les Maps
    this.objectSprites.clear();
    this.objectData.clear();
    
    // ‚úÖ Reset statistiques
    this.stats.objectsInScene = 0;
    
    console.log(`[ObjectManager] ‚úÖ ${objectCount} sprites nettoy√©s individuellement`);
  }

  cleanupPhaserGroupsSafely() {
    const strategies = [
      () => this.cleanupStrategy_RemoveAllFirst(),
      () => this.cleanupStrategy_DestroyDirectly(),
      () => this.cleanupStrategy_SkipClear()
    ];
    
    for (const [groupName, group] of Object.entries(this.phaserGroups)) {
      if (!group) continue;
      
      console.log(`[ObjectManager] üßπ Nettoyage groupe: ${groupName}`);
      
      // ‚úÖ Essayer chaque strat√©gie jusqu'√† ce qu'une fonctionne
      let cleaned = false;
      for (let i = 0; i < strategies.length && !cleaned; i++) {
        try {
          strategies[i](group, groupName);
          cleaned = true;
          console.log(`[ObjectManager] ‚úÖ Groupe ${groupName} nettoy√© avec strat√©gie ${i + 1}`);
        } catch (error) {
          console.warn(`[ObjectManager] ‚ö†Ô∏è Strat√©gie ${i + 1} √©chou√©e pour ${groupName}:`, error);
          if (i === strategies.length - 1) {
            console.error(`[ObjectManager] ‚ùå Toutes les strat√©gies ont √©chou√© pour ${groupName}`);
          }
        }
      }
    }
  }

  // === STRAT√âGIES DE NETTOYAGE ===

  cleanupStrategy_RemoveAllFirst(group, groupName) {
    // ‚úÖ Strat√©gie 1: Vider avec removeAll puis destroy
    if (group && group.children && typeof group.removeAll === 'function') {
      group.removeAll();
    }
    if (group && typeof group.destroy === 'function') {
      group.destroy();
    }
  }

  cleanupStrategy_DestroyDirectly(group, groupName) {
    // ‚úÖ Strat√©gie 2: Destruction directe sans clear
    if (group && typeof group.destroy === 'function') {
      group.destroy();
    }
  }

  cleanupStrategy_SkipClear(group, groupName) {
    // ‚úÖ Strat√©gie 3: Marquer comme d√©truit et laisser le GC s'en occuper
    if (group) {
      group._destroyed = true; // Flag personnalis√©
    }
  }

  // === UTILITAIRES ===

  validateObjectData(objectData) {
    return !!(
      objectData &&
      objectData.id !== undefined &&
      typeof objectData.x === 'number' &&
      typeof objectData.y === 'number' &&
      (objectData.type || objectData.name || objectData.sprite)
    );
  }

  determineTexture(objectData) {
    // ‚úÖ Logique de d√©termination de texture
    if (objectData.sprite) {
      return objectData.sprite;
    }
    
    if (objectData.type) {
      const textureMap = {
        'pokeball': 'pokeball',
        'potion': 'potion',
        'berry': 'berry',
        'item': 'item_generic',
        'collectible': 'collectible'
      };
      
      return textureMap[objectData.type.toLowerCase()] || 'item_generic';
    }
    
    if (objectData.name) {
      const name = objectData.name.toLowerCase();
      if (name.includes('ball')) return 'pokeball';
      if (name.includes('potion')) return 'potion';
      if (name.includes('berry')) return 'berry';
    }
    
    return 'item_generic'; // Fallback
  }

  configureSprite(sprite, objectData) {
    // ‚úÖ Configuration de base
    sprite.setScale(this.config.objectScale);
    sprite.setOrigin(0.5, 0.5);
    
    // ‚úÖ Propri√©t√©s personnalis√©es
    sprite.objectId = objectData.id;
    sprite.objectType = objectData.type;
    sprite.objectData = objectData;
    
    // ‚úÖ Interactivit√© si n√©cessaire
    if (objectData.interactive !== false) {
      sprite.setInteractive();
    }
    
    // ‚úÖ Profondeur
    if (objectData.depth !== undefined) {
      sprite.setDepth(objectData.depth);
    } else {
      sprite.setDepth(1); // Au-dessus du sol
    }
  }

  checkIfUpdateNeeded(oldData, newData) {
    return (
      oldData.x !== newData.x ||
      oldData.y !== newData.y ||
      oldData.sprite !== newData.sprite ||
      oldData.type !== newData.type ||
      oldData.name !== newData.name
    );
  }

  updateStats(operationStats) {
    this.state.lastUpdateTime = Date.now();
    
    // ‚úÖ Logs de performance si beaucoup d'op√©rations
    if (operationStats.created + operationStats.destroyed > 10) {
      console.log(`[ObjectManager] üìä Op√©ration importante: +${operationStats.created} -${operationStats.destroyed} objets`);
    }
  }

  // === API PUBLIQUE ===

  getObjectById(objectId) {
    return this.objectSprites.get(objectId) || null;
  }

  getObjectData(objectId) {
    return this.objectData.get(objectId) || null;
  }

  getAllObjects() {
    return Array.from(this.objectSprites.values());
  }

  getAllObjectData() {
    return Array.from(this.objectData.values());
  }

  getObjectsInRadius(centerX, centerY, radius) {
    const objectsInRadius = [];
    
    for (const [objectId, sprite] of this.objectSprites) {
      const distance = Math.sqrt(
        Math.pow(sprite.x - centerX, 2) + 
        Math.pow(sprite.y - centerY, 2)
      );
      
      if (distance <= radius) {
        objectsInRadius.push({
          sprite: sprite,
          data: this.objectData.get(objectId),
          distance: distance
        });
      }
    }
    
    return objectsInRadius.sort((a, b) => a.distance - b.distance);
  }

  // === CALLBACKS ===

  onObjectCreated(callback) { this.callbacks.onObjectCreated = callback; }
  onObjectDestroyed(callback) { this.callbacks.onObjectDestroyed = callback; }
  onObjectUpdated(callback) { this.callbacks.onObjectUpdated = callback; }
  onCleanupStart(callback) { this.callbacks.onCleanupStart = callback; }
  onCleanupComplete(callback) { this.callbacks.onCleanupComplete = callback; }
  onCleanupError(callback) { this.callbacks.onCleanupError = callback; }

  // === CONFIGURATION ===

  setConfig(newConfig) {
    console.log('[ObjectManager] üîß Mise √† jour configuration:', newConfig);
    this.config = { ...this.config, ...newConfig };
  }

  // === DEBUG ===

  getDebugInfo() {
    return {
      isInitialized: this.isInitialized,
      state: this.state,
      config: this.config,
      stats: this.stats,
      objectCounts: {
        spritesStored: this.objectSprites.size,
        dataStored: this.objectData.size,
        inScene: this.stats.objectsInScene
      },
      groupsStatus: {
        objects: !!this.phaserGroups.objects,
        interactions: !!this.phaserGroups.interactions
      },
      sceneKey: this.scene?.scene?.key,
      lastError: this.stats.lastErrorMessage
    };
  }

  resetStats() {
    console.log('[ObjectManager] üîÑ Reset statistiques');
    
    this.stats = {
      objectsInScene: this.objectSprites.size,
      objectsCreatedThisSession: 0,
      objectsDestroyedThisSession: 0,
      cleanupAttempts: 0,
      cleanupErrors: 0,
      lastErrorMessage: null
    };
  }

  // === DESTRUCTION FINALE ===

  destroy() {
    console.log('[ObjectManager] üíÄ === DESTRUCTION FINALE ===');
    
    try {
      // ‚úÖ Nettoyer en toute s√©curit√©
      this.safeCleanupGroups();
      
      // ‚úÖ Vider les callbacks
      Object.keys(this.callbacks).forEach(key => {
        this.callbacks[key] = null;
      });
      
      // ‚úÖ Reset √©tat
      this.isInitialized = false;
      this.scene = null;
      
      console.log('[ObjectManager] ‚úÖ Destruction termin√©e');
      
    } catch (error) {
      console.error('[ObjectManager] ‚ùå Erreur destruction finale:', error);
    }
  }
}

// === FONCTIONS DEBUG GLOBALES ===

window.debugObjectManager = function() {
  // Essayer de trouver le manager dans diff√©rents endroits
  const managers = [
    window.game?.scene?.getScenes(true)?.[0]?.objectManager,
    window.currentObjectManager
  ].filter(Boolean);
  
  if (managers.length > 0) {
    const info = managers[0].getDebugInfo();
    console.log('[ObjectManager] === DEBUG INFO ===');
    console.table({
      'Objets en Sc√®ne': info.stats.objectsInScene,
      'Cr√©√©s (Session)': info.stats.objectsCreatedThisSession,
      'D√©truits (Session)': info.stats.objectsDestroyedThisSession,
      'Tentatives Nettoyage': info.stats.cleanupAttempts,
      'Erreurs Nettoyage': info.stats.cleanupErrors,
      'Sprites Stock√©s': info.objectCounts.spritesStored,
      'Donn√©es Stock√©es': info.objectCounts.dataStored
    });
    
    if (info.lastError) {
      console.error('[ObjectManager] üö® Derni√®re erreur:', info.lastError);
    }
    
    console.log('[ObjectManager] Info compl√®te:', info);
    return info;
  } else {
    console.error('[ObjectManager] Manager non trouv√©');
    return null;
  }
};

// ‚úÖ EXPORT PAR D√âFAUT (corrige l'erreur d'import)
export default ObjectManager;

console.log('‚úÖ ObjectManager charg√© (VERSION CORRIG√âE)!');
console.log('üîç Utilisez window.debugObjectManager() pour diagnostiquer');
console.log('üéØ Le probl√®me de nettoyage des groupes Phaser devrait √™tre r√©solu!');

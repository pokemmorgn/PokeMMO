// Quest/index.js - QuestModule CORRIG√â pour affichage ic√¥ne et tracker
// üéØ CORRECTIONS: Initialisation UI + Positionnement ic√¥ne + Tracker visible

import { BaseModule, createModule, generateModuleConfig } from '../core/BaseModule.js';
import { QuestManager } from './QuestManager.js';
import { QuestIcon } from './QuestIcon.js';
import { QuestUI } from './QuestUI.js';

export class QuestModule extends BaseModule {
  constructor(moduleId, gameRoom, scene, options = {}) {
    const questOptions = {
      singleton: true,
      autoCloseUI: true,
      keyboardShortcut: 'l',
      uiManagerConfig: {
        anchor: 'bottom-right',
        order: 1,
        group: 'ui-icons'
      },
      ...options
    };
    
    super(moduleId || 'quest', gameRoom, scene, questOptions);
    console.log('üìñ [QuestModule] Instance cr√©√©e avec BaseModule');
  }
  
  // === üéØ INITIALISATION CORRIG√âE ===
  
  async init() {
    console.log('üöÄ [QuestModule] Initialisation m√©tier Quest...');
    
    this.manager = new QuestManager(this.gameRoom);
    await this.manager.init();
    
    console.log('‚úÖ [QuestModule] Manager Quest initialis√©');
  }
  
createComponents() {
  console.log('üîß [QuestModule] Cr√©ation composants Quest...');
  
  // Cr√©er l'ic√¥ne
  if (!this.icon) {
    this.icon = new QuestIcon(this.manager);
    this.icon.init();
    
    // ‚úÖ FORCE POSITIONNEMENT INITIAL pour √©viter invisibilit√©
    if (this.icon.iconElement) {
      this.icon.iconElement.style.position = 'fixed';
      this.icon.iconElement.style.right = '20px';
      this.icon.iconElement.style.bottom = '20px';
      this.icon.iconElement.style.zIndex = '500';
      this.icon.iconElement.style.display = 'block';
      this.icon.iconElement.style.visibility = 'visible';
      this.icon.iconElement.style.opacity = '1';
      console.log('üìç [QuestModule] Position initiale forc√©e pour ic√¥ne');
    }
  }
  
  // ‚úÖ CORRECTION: Initialiser UI imm√©diatement ET attendre qu'elle soit pr√™te
  if (!this.ui) {
    this.ui = new QuestUI(this.manager, this.gameRoom);
    
    // ‚úÖ APPELER init() imm√©diatement (√©tait manquant)
    this.ui.init().then(() => {
      console.log('‚úÖ [QuestModule] UI Quest initialis√©e');
      
      // ‚úÖ AFFICHER TRACKER par d√©faut
      if (this.ui.showTracker) {
        this.ui.showTracker();
        console.log('üëÅÔ∏è [QuestModule] Tracker affich√© par d√©faut');
      }
    }).catch(error => {
      console.error('‚ùå [QuestModule] Erreur init UI:', error);
    });
  }
  
  console.log('‚úÖ [QuestModule] Composants Quest cr√©√©s avec init UI');
}
  
  // ‚úÖ CORRECTION 4: Assurer connexions robustes
  connectComponents() {
    console.log('üîó [QuestModule] Connexion composants Quest...');
    
    // Attendre que UI soit pr√™te
    const ensureUIReady = () => {
      if (this.ui && this.ui.overlayElement && this.ui.trackerElement) {
        this.connectComponentsWhenReady();
      } else {
        console.log('‚è≥ [QuestModule] UI pas encore pr√™te, retry...');
        setTimeout(ensureUIReady, 100);
      }
    };
    
    ensureUIReady();
  }
  
  connectComponentsWhenReady() {
    console.log('üîó [QuestModule] Connexion composants (UI pr√™te)...');
    
    // Ic√¥ne ‚Üí Interface
    if (this.icon) {
      this.icon.onClick = () => {
        if (this.canOpenUI()) {
          this.ui.toggle();
        } else {
          this.showCannotOpenMessage();
        }
      };
    }
    
    // Manager ‚Üí Ic√¥ne
    if (this.manager) {
      this.manager.onStatsUpdate = (stats) => {
        if (this.icon) {
          this.icon.updateStats(stats);
        }
      };
      
      // Manager ‚Üí Interface
      this.manager.onQuestUpdate = (quests) => {
        if (this.ui) {
          this.ui.updateQuestData(quests, 'active');
          
          // Force refresh si UI visible
          if (this.ui.isVisible) {
            setTimeout(() => {
              this.ui.refreshQuestList?.();
              this.ui.updateTracker?.();
            }, 100);
          }
        }
      };
      
      // √âv√©nements qu√™tes
      this.manager.onQuestStarted = (quest) => {
        if (this.icon) this.icon.animateNewQuest();
        
        if (typeof window.showGameNotification === 'function') {
          window.showGameNotification(
            `Nouvelle qu√™te: ${quest.name || 'Qu√™te sans nom'}`,
            'success',
            { duration: 3000 }
          );
        }
      };
      
      this.manager.onQuestCompleted = (quest) => {
        if (this.icon) this.icon.animateQuestCompleted();
        
        if (typeof window.showGameNotification === 'function') {
          window.showGameNotification('Qu√™te termin√©e !', 'success', { duration: 3000 });
        }
      };
      
      this.manager.onQuestProgress = (progress) => {
        if (this.icon) this.icon.animateQuestProgress();
      };
    }
    
    // Interface ‚Üí Manager
    if (this.ui) {
      this.ui.onAction = (action, data) => {
        if (this.manager) {
          this.manager.handleAction(action, data);
        }
      };
    }
    
    console.log('‚úÖ [QuestModule] Composants Quest connect√©s');
  }
  
  // ‚úÖ CORRECTION 5: createIcon robuste pour UIManager
  async createIcon() {
    console.log('üé® [QuestModule] Cr√©ation ic√¥ne pour UIManager...');
    
    // S'assurer que les composants existent
    if (!this.icon) {
      this.createComponents();
      
      // Attendre que l'ic√¥ne soit pr√™te
      let retries = 0;
      while (!this.icon.iconElement && retries < 10) {
        await new Promise(resolve => setTimeout(resolve, 100));
        retries++;
      }
    }
    
    if (this.icon && this.icon.iconElement) {
      console.log('‚úÖ [QuestModule] Ic√¥ne disponible pour UIManager');
      
      // ‚úÖ FORCE AFFICHAGE avant UIManager
      this.icon.iconElement.style.display = 'block';
      this.icon.iconElement.style.visibility = 'visible';
      this.icon.iconElement.style.opacity = '1';
      
      return this.icon.iconElement;
    }
    
    console.warn('‚ùå [QuestModule] Impossible de cr√©er l\'ic√¥ne');
    return null;
  }
  
  // ‚úÖ CORRECTION 6: Show avec demande donn√©es + tracker
  show() {
    const result = super.show();
    
    // ‚úÖ Afficher tracker imm√©diatement
    if (this.ui && this.ui.showTracker) {
      this.ui.showTracker();
      console.log('üëÅÔ∏è [QuestModule] Tracker affich√© via show()');
    }
    
    // Demander donn√©es
    if (this.manager) {
      setTimeout(() => {
        this.manager.requestQuestData();
      }, 200);
    }
    
    return result;
  }
  
  // ‚úÖ CORRECTION 7: Force affichage tracker
  ensureTrackerVisible() {
    console.log('üîç [QuestModule] Assurer visibilit√© tracker...');
    
    if (!this.ui || !this.ui.trackerElement) {
      console.warn('‚ö†Ô∏è [QuestModule] Tracker element non trouv√©');
      return false;
    }
    
    const tracker = this.ui.trackerElement;
    
    // Force affichage
    tracker.style.display = 'block';
    tracker.style.visibility = 'visible';
    tracker.style.opacity = '1';
    tracker.style.pointerEvents = 'auto';
    tracker.classList.remove('hidden');
    
    // Position fixe si pas d√©finie
    if (!tracker.style.position || tracker.style.position === 'static') {
      tracker.style.position = 'fixed';
      tracker.style.top = '120px';
      tracker.style.right = '20px';
      tracker.style.zIndex = '950';
    }
    
    console.log('‚úÖ [QuestModule] Tracker forc√© visible');
    return true;
  }
  
  // ‚úÖ CORRECTION 8: M√©thodes tracker publiques
  showTracker() {
    if (this.ui) {
      this.ui.showTracker();
      this.ensureTrackerVisible();
    }
  }
  
  hideTracker() {
    if (this.ui) {
      this.ui.hideTracker();
    }
  }
  
  toggleTracker() {
    if (this.ui) {
      this.ui.toggleTracker();
    }
  }
  
  // === M√âTHODES QUEST EXISTANTES (inchang√©es) ===
  
  getActiveQuests() {
    return this.manager ? this.manager.getActiveQuests() : [];
  }
  
  getQuestStats() {
    return this.manager ? this.manager.getQuestStats() : null;
  }
  
  hasActiveQuests() {
    return this.manager ? this.manager.hasActiveQuests() : false;
  }
  
  startQuest(questId) {
    if (this.manager) {
      this.manager.startQuest(questId);
    }
  }
  
  triggerProgress(type, data) {
    if (this.manager) {
      switch (type) {
        case 'collect':
          this.manager.triggerCollectEvent(data.itemId, data.amount);
          break;
        case 'defeat':
          this.manager.triggerDefeatEvent(data.pokemonId);
          break;
        case 'reach':
          this.manager.triggerReachEvent(data.zoneId, data.x, data.y, data.map);
          break;
        case 'deliver':
          this.manager.triggerDeliverEvent(data.npcId, data.itemId);
          break;
        default:
          this.manager.triggerProgress(data);
      }
    }
  }
  
  showQuestDialog(title, quests, onSelectQuest) {
    if (this.ui) {
      this.ui.showQuestDialog(title, quests, onSelectQuest);
    }
  }
  
  // API legacy
  toggleQuestJournal() { this.toggleUI(); }
  openQuestJournal() { this.open(); }
  closeQuestJournal() { this.close(); }
  openQuest() { this.open(); }
  closeQuest() { this.close(); }
  
  getUIManagerState() {
    const baseState = super.getUIManagerState();
    
    return {
      ...baseState,
      questCount: this.manager ? this.manager.getQuestCount() : 0,
      hasActiveQuests: this.manager ? this.manager.hasActiveQuests() : false,
      trackerVisible: this.ui ? this.ui.isTrackerVisible : false,
      moduleType: 'quest'
    };
  }
}

// === FACTORY CORRIG√âE ===

export async function createQuestModule(gameRoom, scene, options = {}) {
  try {
    console.log('üè≠ [QuestFactory] Cr√©ation module Quest CORRIG√â...');
    
    const questOptions = {
      singleton: true,
      ...options
    };
    
    const questInstance = await createModule(QuestModule, 'quest', gameRoom, scene, questOptions);
    
    // ‚úÖ FORCE AFFICHAGE TRACKER apr√®s cr√©ation
    setTimeout(() => {
      if (questInstance.ensureTrackerVisible) {
        questInstance.ensureTrackerVisible();
      }
    }, 500);
    
    console.log('‚úÖ [QuestFactory] Module Quest cr√©√© avec tracker visible');
    return questInstance;
    
  } catch (error) {
    console.error('‚ùå [QuestFactory] Erreur cr√©ation module Quest:', error);
    throw error;
  }
}

// === SETUP SYST√àME QUEST CORRIG√â ===

export async function setupQuestSystem(uiManager) {
  try {
    console.log('üîß [QuestSetup] Configuration syst√®me Quest CORRIG√â...');
    
    const questInstance = await initializeQuestModule(uiManager);
    
    // Exposer globalement
    if (!window.questSystem) {
      window.questSystem = questInstance;
      window.questSystemGlobal = questInstance;
      
      // Fonctions g√©n√©riques
      window.toggleQuest = () => questInstance.toggleUI();
      window.openQuest = () => questInstance.open();
      window.closeQuest = () => questInstance.close();
      window.forceCloseQuest = () => questInstance.forceCloseUI();
      
      // Fonctions sp√©cifiques Quest
      window.toggleQuestJournal = () => questInstance.toggleUI();
      window.openQuestJournal = () => questInstance.open();
      window.closeQuestJournal = () => questInstance.close();
      
      // ‚úÖ FONCTIONS TRACKER NOUVELLES
      window.toggleQuestTracker = () => questInstance.toggleTracker();
      window.showQuestTracker = () => questInstance.showTracker();
      window.hideQuestTracker = () => questInstance.hideTracker();
      window.ensureQuestTrackerVisible = () => questInstance.ensureTrackerVisible();
      
      // API progression
      window.triggerQuestProgress = (type, data) => questInstance.triggerProgress(type, data);
      window.startQuest = (questId) => questInstance.startQuest(questId);
      window.showQuestDialog = (title, quests, callback) => questInstance.showQuestDialog(title, quests, callback);
      
      console.log('üåê [QuestSetup] Fonctions globales Quest expos√©es avec tracker');
    }
    
    // ‚úÖ FORCE AFFICHAGE INITIAL
    setTimeout(() => {
      if (questInstance.show) {
        questInstance.show();
      }
      
      if (questInstance.ensureTrackerVisible) {
        questInstance.ensureTrackerVisible();
      }
      
      console.log('‚úÖ [QuestSetup] Affichage initial forc√©');
    }, 1000);
    
    console.log('‚úÖ [QuestSetup] Syst√®me Quest configur√© CORRIG√â');
    return questInstance;
    
  } catch (error) {
    console.error('‚ùå [QuestSetup] Erreur configuration:', error);
    throw error;
  }
}

// === FONCTION DE R√âPARATION ===

export function fixQuestDisplay() {
  console.log('üîß [QuestFix] R√©paration affichage Quest...');
  
  try {
    const instance = QuestModule.getInstance('quest');
    
    if (!instance) {
      console.error('‚ùå [QuestFix] Aucune instance Quest trouv√©e');
      return false;
    }
    
    // 1. Force affichage ic√¥ne
    if (instance.icon && instance.icon.iconElement) {
      const icon = instance.icon.iconElement;
      icon.style.display = 'block';
      icon.style.visibility = 'visible';
      icon.style.opacity = '1';
      icon.style.position = 'fixed';
      icon.style.right = '20px';
      icon.style.bottom = '20px';
      icon.style.zIndex = '500';
      
      console.log('‚úÖ [QuestFix] Ic√¥ne Quest r√©par√©e');
    }
    
    // 2. Force affichage tracker
    if (instance.ensureTrackerVisible) {
      instance.ensureTrackerVisible();
    } else if (instance.ui && instance.ui.trackerElement) {
      const tracker = instance.ui.trackerElement;
      tracker.style.display = 'block';
      tracker.style.visibility = 'visible';
      tracker.style.opacity = '1';
      tracker.style.position = 'fixed';
      tracker.style.top = '120px';
      tracker.style.right = '20px';
      tracker.style.zIndex = '950';
      tracker.classList.remove('hidden');
      
      console.log('‚úÖ [QuestFix] Tracker Quest r√©par√©');
    }
    
    // 3. Demander donn√©es
    if (instance.manager && instance.manager.requestQuestData) {
      instance.manager.requestQuestData();
    }
    
    console.log('‚úÖ [QuestFix] R√©paration Quest termin√©e');
    return true;
    
  } catch (error) {
    console.error('‚ùå [QuestFix] Erreur r√©paration:', error);
    return false;
  }
}

// Configuration export (existant)
export const QUEST_MODULE_CONFIG = generateModuleConfig('quest', {
  moduleClass: QuestModule,
  order: 1,
  options: {
    singleton: true,
    keyboardShortcut: 'l'
  },
  groups: ['ui-icons', 'quest-management'],
  metadata: {
    name: 'Quest Journal',
    description: 'Complete quest management system with journal and tracker',
    version: '2.1.0',
    category: 'Quest Management'
  },
  factory: () => createQuestModule(
    window.currentGameRoom, 
    window.game?.scene?.getScenes(true)[0]
  )
});

export async function registerQuestModule(uiManager) {
  try {
    console.log('üìù [QuestIntegration] Enregistrement Quest...');
    
    if (uiManager.modules && uiManager.modules.has('quest')) {
      console.log('‚ÑπÔ∏è [QuestIntegration] Module d√©j√† enregistr√©');
      return true;
    }
    
    await uiManager.registerModule('quest', QUEST_MODULE_CONFIG);
    console.log('‚úÖ [QuestIntegration] Module Quest enregistr√©');
    
    return true;
  } catch (error) {
    console.error('‚ùå [QuestIntegration] Erreur enregistrement:', error);
    throw error;
  }
}

export async function initializeQuestModule(uiManager) {
  try {
    console.log('üöÄ [QuestIntegration] Initialisation Quest...');
    
    await registerQuestModule(uiManager);
    
    let questInstance = QuestModule.getInstance('quest');
    
    if (!questInstance || !questInstance.uiManagerState.initialized) {
      questInstance = await uiManager.initializeModule('quest');
    } else {
      console.log('‚ÑπÔ∏è [QuestIntegration] Instance d√©j√† initialis√©e');
      questInstance.connectUIManager(uiManager);
    }
    
    setupQuestGlobalEvents(questInstance);
    
    console.log('‚úÖ [QuestIntegration] Initialisation Quest termin√©e');
    return questInstance;
    
  } catch (error) {
    console.error('‚ùå [QuestIntegration] Erreur initialisation:', error);
    throw error;
  }
}

// √âv√©nements globaux (simplifi√©)
function setupQuestGlobalEvents(questInstance) {
  if (window._questEventsSetup) return;
  
  window.addEventListener('itemCollected', (event) => {
    if (questInstance.manager) {
      const { itemId, amount } = event.detail;
      questInstance.triggerProgress('collect', { itemId, amount });
    }
  });
  
  window.addEventListener('battleStarted', () => {
    if (questInstance.ui && questInstance.ui.isVisible) {
      questInstance.ui.hide();
    }
    if (questInstance.ui && questInstance.ui.isTrackerVisible) {
      questInstance.ui.hideTracker();
    }
  });
  
  window.addEventListener('battleEnded', () => {
    if (questInstance.ui) {
      questInstance.ui.showTracker();
    }
  });
  
  window._questEventsSetup = true;
  console.log('üåê [QuestEvents] √âv√©nements Quest configur√©s');
}

export default QuestModule;

console.log(`
üìñ === QUEST MODULE CORRIG√â ===

‚úÖ CORRECTIONS APPLIQU√âES:
1. this.ui.init() appel√© dans createComponents()
2. Position initiale forc√©e pour ic√¥ne (√©viter invisibilit√©)
3. Tracker affich√© par d√©faut via showTracker()
4. createIcon() robuste avec retry
5. ensureTrackerVisible() pour force affichage
6. show() affiche tracker imm√©diatement
7. M√©thodes tracker publiques
8. Fonction fixQuestDisplay() pour r√©paration

üéØ NOUVELLES FONCTIONS:
‚Ä¢ ensureTrackerVisible() - Force affichage tracker
‚Ä¢ showTracker()/hideTracker()/toggleTracker() - Contr√¥le tracker
‚Ä¢ fixQuestDisplay() - R√©paration compl√®te
‚Ä¢ window.ensureQuestTrackerVisible() - Global

üìç FLUX CORRIG√â:
1. createComponents() ‚Üí init UI imm√©diatement
2. createIcon() ‚Üí force position initiale
3. show() ‚Üí affiche tracker automatiquement
4. connectComponents() ‚Üí connexions quand UI pr√™te

üöÄ UTILISATION:
‚Ä¢ setupQuestSystem(uiManager) - Setup complet
‚Ä¢ fixQuestDisplay() - R√©paration
‚Ä¢ window.ensureQuestTrackerVisible() - Force tracker

‚úÖ QUEST IC√îNE + TRACKER MAINTENANT VISIBLES !
`);

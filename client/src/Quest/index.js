// Quest/index.js - QuestModule ULTRA-ROBUSTE avec initialisation s√©quentielle
// üéØ CORRECTIONS: Timing + Handlers + Connexions + Auto-r√©paration + Fallbacks

import { BaseModule, createModule, generateModuleConfig } from '../core/BaseModule.js';
import { QuestManager } from './QuestManager.js';
import { QuestIcon } from './QuestIcon.js';
import { QuestUI } from './QuestUI.js';

export class QuestModule extends BaseModule {
  constructor(moduleId, gameRoom, scene, options = {}) {
    const questOptions = {
      singleton: true,
      autoCloseUI: true,
      keyboardShortcut: 'l',
      uiManagerConfig: {
        anchor: 'bottom-right',
        order: 1,
        group: 'ui-icons'
      },
      ...options
    };
    
    super(moduleId || 'quest', gameRoom, scene, questOptions);
    
    // === √âTAT SYST√àME ===
    this.initialized = false;
    this.componentsReady = false;
    this.connectionAttempts = 0;
    this.maxRetries = 10;
    this.retryDelay = 200;
    
    // === SURVEILLANCE SYST√àME ===
    this.healthCheck = null;
    this.autoRepairEnabled = true;
    this.lastHealthCheck = 0;
    
    console.log('üìñ [QuestModule] Instance cr√©√©e - Version ultra-robuste');
  }
  
  // === üöÄ INITIALISATION S√âQUENTIELLE CORRIG√âE ===
  
  async init() {
    try {
      console.log('üöÄ [QuestModule] === INITIALISATION S√âQUENTIELLE ===');
      
      // 1. V√©rifier d√©pendances critiques
      await this.validateDependencies();
      
      // 2. Initialiser le manager m√©tier AVEC handlers imm√©diats
      await this.initializeManager();
      
      // 3. Cr√©er composants UI en parall√®le mais attendre qu'ils soient pr√™ts
      await this.createComponentsSequential();
      
      // 4. Connecter les composants de mani√®re robuste
      await this.connectComponentsRobust();
      
      // 5. Valider le syst√®me complet
      await this.validateSystemIntegrity();
      
      // 6. D√©marrer la surveillance
      this.startSystemMonitoring();
      
      this.initialized = true;
      console.log('‚úÖ [QuestModule] Initialisation s√©quentielle termin√©e');
      
      return this;
      
    } catch (error) {
      console.error('‚ùå [QuestModule] Erreur initialisation s√©quentielle:', error);
      
      // Tentative de r√©cup√©ration
      await this.attemptRecovery();
      throw error;
    }
  }
  
  // === üîç VALIDATION D√âPENDANCES ===
  
  async validateDependencies() {
    console.log('üîç [QuestModule] Validation d√©pendances...');
    
    const requiredDeps = {
      gameRoom: this.gameRoom,
      gameRoomSend: this.gameRoom?.send,
      gameRoomOnMessage: this.gameRoom?.onMessage,
      document: typeof document !== 'undefined',
      window: typeof window !== 'undefined'
    };
    
    const missing = Object.entries(requiredDeps)
      .filter(([name, dep]) => !dep)
      .map(([name]) => name);
    
    if (missing.length > 0) {
      throw new Error(`D√©pendances manquantes: ${missing.join(', ')}`);
    }
    
    // V√©rifier que les handlers Colyseus peuvent √™tre enregistr√©s
    if (typeof this.gameRoom.onMessage !== 'function') {
      throw new Error('gameRoom.onMessage non disponible pour enregistrer handlers');
    }
    
    console.log('‚úÖ [QuestModule] D√©pendances valid√©es');
  }
  
  // === üéØ INITIALISATION MANAGER CORRIG√âE ===
  
  async initializeManager() {
    console.log('üéØ [QuestModule] Initialisation manager avec handlers imm√©diats...');
    
    // ‚úÖ CORRECTION CRITIQUE 1: Cr√©er manager AVEC gameRoom imm√©diatement
    this.manager = new QuestManager(this.gameRoom);
    
    // ‚úÖ CORRECTION CRITIQUE 2: Setup handlers AVANT init()
    if (this.gameRoom && typeof this.gameRoom.onMessage === 'function') {
      console.log('üì° [QuestModule] Enregistrement handlers IMM√âDIAT...');
      this.manager.setupServerListeners();
    } else {
      throw new Error('Impossible d\'enregistrer les handlers - gameRoom invalide');
    }
    
    // ‚úÖ CORRECTION CRITIQUE 3: Init manager apr√®s handlers
    await this.manager.init();
    
    // Validation handlers
    const handlersRegistered = this.validateHandlersRegistered();
    if (!handlersRegistered) {
      console.warn('‚ö†Ô∏è [QuestModule] Handlers non enregistr√©s, retry...');
      await this.retryHandlerRegistration();
    }
    
    console.log('‚úÖ [QuestModule] Manager initialis√© avec handlers');
  }
  
  validateHandlersRegistered() {
    const requiredHandlers = [
      'availableQuestsList', 'activeQuestsList', 'questStartResult',
      'questGranted', 'questProgressUpdate', 'questCompleted'
    ];
    
    return requiredHandlers.every(handler => {
      const isRegistered = !!(this.gameRoom._messageHandlers?.[handler]);
      if (!isRegistered) {
        console.warn(`‚ö†Ô∏è [QuestModule] Handler '${handler}' non enregistr√©`);
      }
      return isRegistered;
    });
  }
  
  async retryHandlerRegistration() {
    let retries = 0;
    while (retries < 3 && !this.validateHandlersRegistered()) {
      console.log(`üîÑ [QuestModule] Retry handlers registration ${retries + 1}/3...`);
      
      await new Promise(resolve => setTimeout(resolve, 500));
      this.manager.setupServerListeners();
      retries++;
    }
    
    if (!this.validateHandlersRegistered()) {
      throw new Error('Impossible d\'enregistrer les handlers apr√®s 3 tentatives');
    }
  }
  
  // === üîß CR√âATION COMPOSANTS S√âQUENTIELLE ===
  
  async createComponentsSequential() {
    console.log('üîß [QuestModule] Cr√©ation composants s√©quentielle...');
    
    // 1. Cr√©er ic√¥ne en premier (plus simple)
    await this.createIconComponent();
    
    // 2. Cr√©er UI en parall√®le mais attendre qu'elle soit pr√™te
    await this.createUIComponent();
    
    // 3. Valider que tous les composants sont pr√™ts
    await this.waitForComponentsReady();
    
    this.componentsReady = true;
    console.log('‚úÖ [QuestModule] Composants cr√©√©s et pr√™ts');
  }
  
  async createIconComponent() {
    console.log('üé® [QuestModule] Cr√©ation ic√¥ne...');
    
    if (!this.icon) {
      this.icon = new QuestIcon(this.manager);
      await this.icon.init();
      
      // Force position et affichage imm√©diat
      this.forceIconDisplay();
    }
    
    console.log('‚úÖ [QuestModule] Ic√¥ne cr√©√©e');
  }
  
  forceIconDisplay() {
    if (this.icon?.iconElement) {
      const iconEl = this.icon.iconElement;
      
      // Position de secours garantie
      iconEl.style.position = 'fixed';
      iconEl.style.right = '20px';
      iconEl.style.bottom = '20px';
      iconEl.style.zIndex = '500';
      
      // Affichage forc√©
      iconEl.style.display = 'block';
      iconEl.style.visibility = 'visible';
      iconEl.style.opacity = '1';
      iconEl.style.pointerEvents = 'auto';
      
      // Supprimer classes cach√©es
      iconEl.classList.remove('hidden', 'ui-hidden');
      
      console.log('üîß [QuestModule] Affichage ic√¥ne forc√©');
    }
  }
  
  async createUIComponent() {
    console.log('üì± [QuestModule] Cr√©ation interface...');
    
    if (!this.ui) {
      this.ui = new QuestUI(this.manager, this.gameRoom);
      
      // ‚úÖ CORRECTION CRITIQUE 4: Attendre que init() soit termin√©
      await this.ui.init();
      
      // Force affichage tracker par d√©faut
      if (this.ui.showTracker) {
        this.ui.showTracker();
      }
    }
    
    console.log('‚úÖ [QuestModule] Interface cr√©√©e');
  }
  
  async waitForComponentsReady() {
    console.log('‚è≥ [QuestModule] Attente composants pr√™ts...');
    
    const maxWait = 5000; // 5 secondes max
    const startTime = Date.now();
    
    while (Date.now() - startTime < maxWait) {
      const iconReady = !!(this.icon?.iconElement);
      const uiReady = !!(this.ui?.overlayElement && this.ui?.trackerElement);
      
      if (iconReady && uiReady) {
        console.log('‚úÖ [QuestModule] Tous les composants sont pr√™ts');
        return true;
      }
      
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    // Diagnostic si pas pr√™t
    console.warn('‚ö†Ô∏è [QuestModule] Timeout composants:', {
      iconReady: !!(this.icon?.iconElement),
      uiReady: !!(this.ui?.overlayElement && this.ui?.trackerElement)
    });
    
    return false;
  }
  
  // === üîó CONNEXION COMPOSANTS ROBUSTE ===
  
  async connectComponentsRobust() {
    console.log('üîó [QuestModule] Connexion composants robuste...');
    
    let attempts = 0;
    while (attempts < this.maxRetries) {
      try {
        const success = await this.attemptComponentConnection();
        if (success) {
          console.log('‚úÖ [QuestModule] Composants connect√©s avec succ√®s');
          return true;
        }
        
        attempts++;
        console.log(`üîÑ [QuestModule] Retry connexion ${attempts}/${this.maxRetries}...`);
        await new Promise(resolve => setTimeout(resolve, this.retryDelay));
        
      } catch (error) {
        console.error(`‚ùå [QuestModule] Erreur connexion tentative ${attempts + 1}:`, error);
        attempts++;
        await new Promise(resolve => setTimeout(resolve, this.retryDelay));
      }
    }
    
    throw new Error(`Impossible de connecter les composants apr√®s ${this.maxRetries} tentatives`);
  }
  
  async attemptComponentConnection() {
    // V√©rifier que tous les composants sont pr√™ts
    if (!this.icon?.iconElement || !this.ui?.overlayElement) {
      console.log('‚è≥ [QuestModule] Composants pas encore pr√™ts pour connexion');
      return false;
    }
    
    // 1. Manager ‚Üí Ic√¥ne
    this.connectManagerToIcon();
    
    // 2. Ic√¥ne ‚Üí UI
    this.connectIconToUI();
    
    // 3. Manager ‚Üí UI
    this.connectManagerToUI();
    
    // 4. UI ‚Üí Manager
    this.connectUIToManager();
    
    // 5. Validation connexions
    return this.validateConnections();
  }
  
  connectManagerToIcon() {
    if (this.manager && this.icon) {
      this.manager.onStatsUpdate = (stats) => {
        try {
          this.icon.updateStats(stats);
        } catch (error) {
          console.error('‚ùå [QuestModule] Erreur manager‚Üíicon:', error);
        }
      };
      
      this.manager.onQuestStarted = (quest) => {
        try {
          if (this.icon) this.icon.animateNewQuest();
          this.showNotification(`Nouvelle qu√™te: ${quest.name || 'Qu√™te sans nom'}`, 'success');
        } catch (error) {
          console.error('‚ùå [QuestModule] Erreur onQuestStarted:', error);
        }
      };
      
      this.manager.onQuestCompleted = (quest) => {
        try {
          if (this.icon) this.icon.animateQuestCompleted();
          this.showNotification('Qu√™te termin√©e !', 'success');
        } catch (error) {
          console.error('‚ùå [QuestModule] Erreur onQuestCompleted:', error);
        }
      };
      
      this.manager.onQuestProgress = (progress) => {
        try {
          if (this.icon) this.icon.animateQuestProgress();
        } catch (error) {
          console.error('‚ùå [QuestModule] Erreur onQuestProgress:', error);
        }
      };
      
      console.log('üîó [QuestModule] Manager‚ÜíIc√¥ne connect√©');
    }
  }
  
  connectIconToUI() {
    if (this.icon && this.ui) {
      this.icon.onClick = () => {
        try {
          if (this.canOpenUI()) {
            this.ui.toggle();
          } else {
            this.showCannotOpenMessage();
          }
        } catch (error) {
          console.error('‚ùå [QuestModule] Erreur ic√¥ne‚ÜíUI:', error);
        }
      };
      
      console.log('üîó [QuestModule] Ic√¥ne‚ÜíUI connect√©');
    }
  }
  
  connectManagerToUI() {
    if (this.manager && this.ui) {
      // ‚úÖ CORRECTION CRITIQUE 5: Connecter QuestUI au manager
      this.manager.connectQuestUI(this.ui);
      
      this.manager.onQuestUpdate = (quests) => {
        try {
          this.ui.updateQuestData(quests, 'active');
          
          // Force refresh si UI visible
          if (this.ui.isVisible) {
            setTimeout(() => {
              this.ui.refreshQuestList?.();
              this.ui.updateTracker?.();
            }, 100);
          }
        } catch (error) {
          console.error('‚ùå [QuestModule] Erreur manager‚ÜíUI:', error);
        }
      };
      
      console.log('üîó [QuestModule] Manager‚ÜíUI connect√©');
    }
  }
  
  connectUIToManager() {
    if (this.ui && this.manager) {
      this.ui.onAction = (action, data) => {
        try {
          this.manager.handleAction(action, data);
        } catch (error) {
          console.error('‚ùå [QuestModule] Erreur UI‚Üímanager:', error);
        }
      };
      
      console.log('üîó [QuestModule] UI‚ÜíManager connect√©');
    }
  }
  
  validateConnections() {
    const checks = {
      managerCallbacks: !!(this.manager?.onStatsUpdate && this.manager?.onQuestUpdate),
      iconCallback: !!(this.icon?.onClick),
      uiCallback: !!(this.ui?.onAction),
      questUIConnected: !!(this.manager?.questUI === this.ui)
    };
    
    const failed = Object.entries(checks).filter(([_, valid]) => !valid);
    
    if (failed.length > 0) {
      console.warn('‚ö†Ô∏è [QuestModule] Connexions √©chou√©es:', failed.map(([name]) => name));
      return false;
    }
    
    console.log('‚úÖ [QuestModule] Toutes les connexions valid√©es');
    return true;
  }
  
  // === ‚úÖ VALIDATION SYST√àME INT√âGRIT√â ===
  
  async validateSystemIntegrity() {
    console.log('üîç [QuestModule] Validation int√©grit√© syst√®me...');
    
    const systemChecks = {
      manager: {
        exists: !!this.manager,
        initialized: !!this.manager?.initialized,
        hasGameRoom: !!this.manager?.gameRoom,
        handlersRegistered: this.validateHandlersRegistered()
      },
      
      icon: {
        exists: !!this.icon,
        hasElement: !!this.icon?.iconElement,
        inDOM: this.icon?.iconElement ? document.contains(this.icon.iconElement) : false,
        hasCallback: !!this.icon?.onClick
      },
      
      ui: {
        exists: !!this.ui,
        hasOverlay: !!this.ui?.overlayElement,
        hasTracker: !!this.ui?.trackerElement,
        inDOM: this.ui?.overlayElement ? document.contains(this.ui.overlayElement) : false,
        hasCallback: !!this.ui?.onAction
      },
      
      connections: {
        managerToIcon: !!(this.manager?.onStatsUpdate),
        iconToUI: !!(this.icon?.onClick),
        managerToUI: !!(this.manager?.questUI === this.ui),
        uiToManager: !!(this.ui?.onAction)
      }
    };
    
    // Analyser les probl√®mes
    const issues = this.analyzeSystemIssues(systemChecks);
    
    if (issues.length > 0) {
      console.error('‚ùå [QuestModule] Probl√®mes syst√®me d√©tect√©s:', issues);
      throw new Error(`√âchec validation syst√®me: ${issues.join(', ')}`);
    }
    
    console.log('‚úÖ [QuestModule] Int√©grit√© syst√®me valid√©e');
    return true;
  }
  
  analyzeSystemIssues(checks) {
    const issues = [];
    
    // Analyser manager
    if (!checks.manager.exists) issues.push('Manager manquant');
    if (!checks.manager.initialized) issues.push('Manager non initialis√©');
    if (!checks.manager.handlersRegistered) issues.push('Handlers non enregistr√©s');
    
    // Analyser icon
    if (!checks.icon.exists) issues.push('Ic√¥ne manquante');
    if (!checks.icon.hasElement) issues.push('√âl√©ment ic√¥ne manquant');
    if (!checks.icon.inDOM) issues.push('Ic√¥ne pas dans DOM');
    
    // Analyser UI
    if (!checks.ui.exists) issues.push('UI manquante');
    if (!checks.ui.hasOverlay) issues.push('Overlay UI manquant');
    if (!checks.ui.hasTracker) issues.push('Tracker UI manquant');
    
    // Analyser connexions
    if (!checks.connections.managerToIcon) issues.push('Connexion Manager‚ÜíIc√¥ne manquante');
    if (!checks.connections.managerToUI) issues.push('Connexion Manager‚ÜíUI manquante');
    if (!checks.connections.iconToUI) issues.push('Connexion Ic√¥ne‚ÜíUI manquante');
    
    return issues;
  }
  
  // === üîß SURVEILLANCE ET AUTO-R√âPARATION ===
  
  startSystemMonitoring() {
    if (!this.autoRepairEnabled) return;
    
    console.log('üëÄ [QuestModule] D√©marrage surveillance syst√®me...');
    
    this.healthCheck = setInterval(() => {
      this.performHealthCheck();
    }, 10000); // Check toutes les 10 secondes
    
    // Check imm√©diat
    setTimeout(() => this.performHealthCheck(), 2000);
  }
  
  async performHealthCheck() {
    try {
      const now = Date.now();
      this.lastHealthCheck = now;
      
      const issues = await this.detectSystemIssues();
      
      if (issues.length > 0) {
        console.warn('üîß [QuestModule] Probl√®mes d√©tect√©s, auto-r√©paration...', issues);
        await this.attemptAutoRepair(issues);
      }
      
    } catch (error) {
      console.error('‚ùå [QuestModule] Erreur health check:', error);
    }
  }
  
  async detectSystemIssues() {
    const issues = [];
    
    // V√©rifier ic√¥ne
    if (!this.icon?.iconElement || !document.contains(this.icon.iconElement)) {
      issues.push('icon-missing');
    } else if (this.icon.iconElement.style.display === 'none') {
      issues.push('icon-hidden');
    }
    
    // V√©rifier tracker
    if (!this.ui?.trackerElement || !document.contains(this.ui.trackerElement)) {
      issues.push('tracker-missing');
    }
    
    // V√©rifier connexions
    if (!this.manager?.questUI) {
      issues.push('manager-ui-disconnected');
    }
    
    // V√©rifier handlers
    if (!this.validateHandlersRegistered()) {
      issues.push('handlers-missing');
    }
    
    return issues;
  }
  
  async attemptAutoRepair(issues) {
    console.log('üîß [QuestModule] Tentative auto-r√©paration...', issues);
    
    for (const issue of issues) {
      try {
        switch (issue) {
          case 'icon-missing':
            await this.repairIcon();
            break;
            
          case 'icon-hidden':
            this.forceIconDisplay();
            break;
            
          case 'tracker-missing':
            await this.repairTracker();
            break;
            
          case 'manager-ui-disconnected':
            this.connectManagerToUI();
            break;
            
          case 'handlers-missing':
            await this.retryHandlerRegistration();
            break;
        }
        
        console.log(`‚úÖ [QuestModule] R√©paration '${issue}' r√©ussie`);
        
      } catch (error) {
        console.error(`‚ùå [QuestModule] Erreur r√©paration '${issue}':`, error);
      }
    }
  }
  
  async repairIcon() {
    console.log('üîß [QuestModule] R√©paration ic√¥ne...');
    
    if (!this.icon || !this.icon.iconElement) {
      await this.createIconComponent();
    } else if (!document.contains(this.icon.iconElement)) {
      document.body.appendChild(this.icon.iconElement);
    }
    
    this.forceIconDisplay();
    this.connectIconToUI();
  }
  
  async repairTracker() {
    console.log('üîß [QuestModule] R√©paration tracker...');
    
    if (!this.ui?.trackerElement) {
      await this.createUIComponent();
    } else if (!document.contains(this.ui.trackerElement)) {
      document.body.appendChild(this.ui.trackerElement);
    }
    
    if (this.ui?.showTracker) {
      this.ui.showTracker();
    }
  }
  
  // === üîÑ R√âCUP√âRATION D'ERREUR ===
  
  async attemptRecovery() {
    console.log('üîÑ [QuestModule] Tentative de r√©cup√©ration...');
    
    try {
      // Reset complet
      this.resetComponents();
      
      // Retry initialisation minimale
      if (this.gameRoom) {
        this.manager = new QuestManager(this.gameRoom);
        await this.manager.init();
        
        // Interface minimal fallback
        await this.createMinimalInterface();
      }
      
      console.log('‚úÖ [QuestModule] R√©cup√©ration partielle r√©ussie');
      
    } catch (error) {
      console.error('‚ùå [QuestModule] R√©cup√©ration √©chou√©e:', error);
    }
  }
  
  resetComponents() {
    if (this.icon) {
      this.icon.destroy?.();
      this.icon = null;
    }
    
    if (this.ui) {
      this.ui.destroy?.();
      this.ui = null;
    }
    
    this.componentsReady = false;
    this.connectionAttempts = 0;
  }
  
  async createMinimalInterface() {
    // Cr√©er juste l'ic√¥ne avec fonctionnalit√©s de base
    this.icon = new QuestIcon(this.manager);
    await this.icon.init();
    this.forceIconDisplay();
    
    // Callback simple pour ic√¥ne
    this.icon.onClick = () => {
      this.showNotification('Quest system in recovery mode', 'warning');
    };
  }
  
  // === üìä API PUBLIQUE RENFORC√âE ===
  
  async createIcon() {
    console.log('üé® [QuestModule] createIcon() pour UIManager...');
    
    if (!this.icon?.iconElement) {
      await this.createIconComponent();
    }
    
    if (this.icon?.iconElement) {
      this.forceIconDisplay();
      return this.icon.iconElement;
    }
    
    console.error('‚ùå [QuestModule] Impossible de cr√©er ic√¥ne pour UIManager');
    return null;
  }
  
  show() {
    const result = super.show();
    
    // Afficher tracker + demander donn√©es
    if (this.ui?.showTracker) {
      this.ui.showTracker();
    }
    
    if (this.manager?.requestQuestData) {
      setTimeout(() => this.manager.requestQuestData(), 300);
    }
    
    return result;
  }
  
  // === üõ†Ô∏è FONCTIONS UTILITAIRES ===
  
  showNotification(message, type = 'info') {
    if (typeof window.showGameNotification === 'function') {
      window.showGameNotification(message, type, { duration: 3000 });
    } else {
      console.log(`üì¢ [QuestModule] ${type.toUpperCase()}: ${message}`);
    }
  }
  
  getSystemHealth() {
    return {
      initialized: this.initialized,
      componentsReady: this.componentsReady,
      connectionAttempts: this.connectionAttempts,
      lastHealthCheck: this.lastHealthCheck,
      autoRepairEnabled: this.autoRepairEnabled,
      manager: {
        exists: !!this.manager,
        initialized: !!this.manager?.initialized,
        handlersValid: this.validateHandlersRegistered()
      },
      icon: {
        exists: !!this.icon,
        hasElement: !!this.icon?.iconElement,
        inDOM: this.icon?.iconElement ? document.contains(this.icon.iconElement) : false
      },
      ui: {
        exists: !!this.ui,
        hasElements: !!(this.ui?.overlayElement && this.ui?.trackerElement),
        connected: !!(this.manager?.questUI === this.ui)
      }
    };
  }
  
  // === üßπ NETTOYAGE AM√âLIOR√â ===
  
  destroy() {
    console.log('üßπ [QuestModule] Destruction s√©curis√©e...');
    
    // Arr√™ter surveillance
    if (this.healthCheck) {
      clearInterval(this.healthCheck);
      this.healthCheck = null;
    }
    
    // D√©truire composants
    this.resetComponents();
    
    // D√©truire manager
    if (this.manager) {
      this.manager.destroy?.();
      this.manager = null;
    }
    
    // Reset √©tat
    this.initialized = false;
    this.autoRepairEnabled = false;
    
    console.log('‚úÖ [QuestModule] Destruction termin√©e');
  }
  
  // === API LEGACY (inchang√©e) ===
  
  getActiveQuests() {
    return this.manager ? this.manager.getActiveQuests() : [];
  }
  
  startQuest(questId) {
    if (this.manager) {
      this.manager.startQuest(questId);
    }
  }
  
  triggerProgress(type, data) {
    if (this.manager) {
      switch (type) {
        case 'collect':
          this.manager.triggerCollectEvent(data.itemId, data.amount);
          break;
        case 'defeat':
          this.manager.triggerDefeatEvent(data.pokemonId);
          break;
        case 'reach':
          this.manager.triggerReachEvent(data.zoneId, data.x, data.y, data.map);
          break;
        case 'deliver':
          this.manager.triggerDeliverEvent(data.npcId, data.itemId);
          break;
        default:
          this.manager.triggerProgress(data);
      }
    }
  }
  
  // API shortcuts
  toggleQuestJournal() { return this.toggleUI(); }
  openQuestJournal() { return this.open(); }
  closeQuestJournal() { return this.close(); }
}

// === üè≠ FACTORY CORRIG√âE ===

export async function createQuestModule(gameRoom, scene, options = {}) {
  try {
    console.log('üè≠ [QuestFactory] Cr√©ation module Quest ultra-robuste...');
    
    const questOptions = {
      singleton: true,
      autoRepair: true,
      ...options
    };
    
    const questInstance = await createModule(QuestModule, 'quest', gameRoom, scene, questOptions);
    
    // D√©marrer surveillance apr√®s cr√©ation
    if (questInstance.startSystemMonitoring) {
      questInstance.startSystemMonitoring();
    }
    
    console.log('‚úÖ [QuestFactory] Module Quest cr√©√© avec surveillance');
    return questInstance;
    
  } catch (error) {
    console.error('‚ùå [QuestFactory] Erreur cr√©ation module Quest:', error);
    throw error;
  }
}

// === üîß FONCTION DE R√âPARATION GLOBALE ===

export async function repairQuestSystem() {
  console.log('üîß [QuestRepair] === R√âPARATION COMPL√àTE SYST√àME QUEST ===');
  
  try {
    const instance = QuestModule.getInstance('quest');
    
    if (!instance) {
      console.error('‚ùå [QuestRepair] Aucune instance Quest trouv√©e');
      return false;
    }
    
    // Diagnostic complet
    const health = instance.getSystemHealth();
    console.log('üìä [QuestRepair] √âtat syst√®me:', health);
    
    // D√©tecter et r√©parer les probl√®mes
    const issues = await instance.detectSystemIssues();
    
    if (issues.length > 0) {
      console.log('üîß [QuestRepair] Probl√®mes d√©tect√©s:', issues);
      await instance.attemptAutoRepair(issues);
    }
    
    // Validation finale
    await instance.validateSystemIntegrity();
    
    console.log('‚úÖ [QuestRepair] R√©paration termin√©e avec succ√®s');
    return true;
    
  } catch (error) {
    console.error('‚ùå [QuestRepair] Erreur r√©paration:', error);
    return false;
  }
}

// === üåê EXPOSITION GLOBALE AM√âLIOR√âE ===

export async function setupQuestSystem(uiManager) {
  try {
    console.log('üîß [QuestSetup] Configuration syst√®me Quest robuste...');
    
    const questInstance = await initializeQuestModule(uiManager);
    
    // Exposer avec fonctions de r√©paration
    if (!window.questSystem) {
      window.questSystem = questInstance;
      window.questSystemGlobal = questInstance;
      
      // API standard
      window.toggleQuest = () => questInstance.toggleUI();
      window.openQuest = () => questInstance.open();
      window.closeQuest = () => questInstance.close();
      
      // API r√©paration
      window.repairQuestSystem = repairQuestSystem;
      window.getQuestSystemHealth = () => questInstance.getSystemHealth();
      
      // API progression
      window.triggerQuestProgress = (type, data) => questInstance.triggerProgress(type, data);
      window.startQuest = (questId) => questInstance.startQuest(questId);
      
      console.log('üåê [QuestSetup] Fonctions globales Quest expos√©es avec r√©paration');
    }
    
    console.log('‚úÖ [QuestSetup] Syst√®me Quest configur√© ULTRA-ROBUSTE');
    return questInstance;
    
  } catch (error) {
    console.error('‚ùå [QuestSetup] Erreur configuration:', error);
    throw error;
  }
}

// === CONFIGURATION EXPORT (existante) ===

export const QUEST_MODULE_CONFIG = generateModuleConfig('quest', {
  moduleClass: QuestModule,
  order: 1,
  options: {
    singleton: true,
    keyboardShortcut: 'l',
    autoRepair: true
  },
  groups: ['ui-icons', 'quest-management'],
  metadata: {
    name: 'Quest Journal',
    description: 'Ultra-robust quest management system with auto-repair',
    version: '3.0.0',
    category: 'Quest Management'
  },
  factory: () => createQuestModule(
    window.currentGameRoom, 
    window.game?.scene?.getScenes(true)[0]
  )
});

export async function registerQuestModule(uiManager) {
  try {
    console.log('üìù [QuestIntegration] Enregistrement Quest robuste...');
    
    if (uiManager.modules?.has('quest')) {
      console.log('‚ÑπÔ∏è [QuestIntegration] Module d√©j√† enregistr√©');
      return true;
    }
    
    await uiManager.registerModule('quest', QUEST_MODULE_CONFIG);
    console.log('‚úÖ [QuestIntegration] Module Quest enregistr√©');
    
    return true;
  } catch (error) {
    console.error('‚ùå [QuestIntegration] Erreur enregistrement:', error);
    throw error;
  }
}

export async function initializeQuestModule(uiManager) {
  try {
    console.log('üöÄ [QuestIntegration] Initialisation Quest robuste...');
    
    await registerQuestModule(uiManager);
    
    let questInstance = QuestModule.getInstance('quest');
    
    if (!questInstance || !questInstance.initialized) {
      questInstance = await uiManager.initializeModule('quest');
    } else {
      console.log('‚ÑπÔ∏è [QuestIntegration] Instance d√©j√† initialis√©e');
      questInstance.connectUIManager?.(uiManager);
    }
    
    console.log('‚úÖ [QuestIntegration] Initialisation Quest robuste termin√©e');
    return questInstance;
    
  } catch (error) {
    console.error('‚ùå [QuestIntegration] Erreur initialisation:', error);
    throw error;
  }
}

export default QuestModule;

console.log(`
üìñ === QUEST MODULE ULTRA-ROBUSTE ===

üéØ CORRECTIONS MAJEURES:
1. ‚úÖ Initialisation s√©quentielle avec validation
2. ‚úÖ Handlers enregistr√©s AVANT init() du manager
3. ‚úÖ Connexion QuestUI robuste avec retry
4. ‚úÖ Validation syst√®me compl√®te
5. ‚úÖ Auto-r√©paration avec surveillance
6. ‚úÖ Fallbacks et r√©cup√©ration d'erreur
7. ‚úÖ Diagnostics et health checks

üîß NOUVELLES FONCTIONNALIT√âS:
‚Ä¢ Surveillance syst√®me continue (health checks)
‚Ä¢ Auto-r√©paration automatique des probl√®mes
‚Ä¢ Validation int√©grit√© compl√®te
‚Ä¢ R√©cup√©ration d'erreur progressive
‚Ä¢ Diagnostics d√©taill√©s
‚Ä¢ API de r√©paration manuelle

üõ†Ô∏è UTILISATION:
‚Ä¢ setupQuestSystem(uiManager) - Setup robuste
‚Ä¢ window.repairQuestSystem() - R√©paration manuelle
‚Ä¢ window.getQuestSystemHealth() - √âtat syst√®me

‚ö° GARANTIES:
‚úÖ Handlers toujours enregistr√©s
‚úÖ Ic√¥ne toujours visible  
‚úÖ Tracker toujours affich√©
‚úÖ Connexions UI robustes
‚úÖ Auto-r√©paration en cas de probl√®me

üéÆ SYST√àME QUEST MAINTENANT ULTRA-ROBUSTE !
`);

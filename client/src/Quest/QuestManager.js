// Quest/QuestManager.js - CORRECTIONS ANTI-BOUCLE

export class QuestManager {
  constructor(gameRoom) {
    this.gameRoom = gameRoom;
    
    // === √âTAT SYST√àME SIMPLE ===
    this.systemState = 'UNINITIALIZED';
    this.dialogueState = 'NONE';
    this.initialized = false;
    
    // ‚úÖ NOUVEAU: Protection anti-boucle
    this.pendingQuestRequest = false;
    this.lastInteractionTime = 0;
    
    // === DONN√âES ===
    this.activeQuests = [];
    this.completedQuests = [];
    this.availableQuests = [];
    
    // === STATS ===
    this.questStats = {
      totalActive: 0,
      totalCompleted: 0,
      newQuests: 0,
      readyToComplete: 0
    };
    
    // === CALLBACKS ===
    this.onQuestUpdate = null;
    this.onQuestStarted = null;
    this.onQuestCompleted = null;
    this.onQuestProgress = null;
    this.onStatsUpdate = null;
    
    // === CONNEXIONS ===
    this.questUI = null;
    this.networkManager = null;
    
    // === CONFIG ===
    this.config = {
      maxWaitTime: 10000,
      handlerRetryDelay: 500,
      maxHandlerRetries: 5,
      interactionCooldown: 1000 // ‚úÖ NOUVEAU: Cooldown anti-spam
    };
    
    console.log('üìñ [QuestManager] Instance cr√©√©e - Version anti-boucle');
    
    if (gameRoom) {
      this.gameRoom = gameRoom;
      this.setState('WAITING_ROOM', 'GameRoom fournie');
    }
  }
  
  // === üì° ENREGISTREMENT HANDLERS CORRIG√â ===
  
  registerHandlers() {
    console.log('üì° [QuestManager] Enregistrement handlers...');
    
    try {
      this.gameRoom.onMessage("activeQuestsList", (data) => {
        this.handleActiveQuestsReceived(data);
      });
      
      // ‚úÖ CORRECTION: Un seul handler pour availableQuestsList
      this.gameRoom.onMessage("availableQuestsList", (data) => {
        this.handleAvailableQuestsReceived(data);
      });
      
      this.gameRoom.onMessage("questStartResult", (data) => {
        this.handleQuestStartResult(data);
      });
      
      this.gameRoom.onMessage("questGranted", (data) => {
        this.handleQuestGranted(data);
      });
      
      this.gameRoom.onMessage("questProgressUpdate", (data) => {
        this.handleQuestProgressUpdate(data);
      });
      
      this.gameRoom.onMessage("questCompleted", (data) => {
        this.handleQuestCompleted(data);
      });

      console.log('‚úÖ [QuestManager] Handlers enregistr√©s (sans doublon)');
      this.setState('READY', 'Handlers enregistr√©s');
      this.requestInitialData();
      
    } catch (error) {
      console.error('‚ùå [QuestManager] Erreur handlers:', error);
      this.setState('ERROR', 'Erreur handlers');
    }
  }
  
  // === üó£Ô∏è INTERACTION NPC AVEC ANTI-BOUCLE ===
  
  handleNpcInteraction(data) {
    console.log('üó£Ô∏è [QuestManager] === INTERACTION NPC ===');
    console.log('üìä Data:', data);
    
    // ‚úÖ PROTECTION ANTI-SPAM
    const now = Date.now();
    if (this.lastInteractionTime && (now - this.lastInteractionTime) < this.config.interactionCooldown) {
      console.log('üö´ [QuestManager] BLOQU√â - Cooldown actif');
      return 'COOLDOWN';
    }
    this.lastInteractionTime = now;
    
    // === V√âRIFICATION √âTAT SIMPLE ===
    if (!this.canProcessInteraction()) {
      return 'BLOCKED';
    }
    
    if (!data) {
      console.warn('‚ö†Ô∏è [QuestManager] Donn√©es nulles');
      return 'INVALID_DATA';
    }
    
    // === TRAITEMENT SELON TYPE ===
    if (data.type === 'questGiver') {
      console.log('üéÅ [QuestManager] Quest Giver');
      
      if (data.availableQuests && Array.isArray(data.availableQuests)) {
        console.log(`‚úÖ [QuestManager] ${data.availableQuests.length} qu√™tes re√ßues directement`);
        this.showQuestSelectionDialog('Choisir une qu√™te', data.availableQuests);
        return 'QUESTS_SHOWN';
      } else {
        // ‚úÖ PROTECTION: Pas de requ√™te si d√©j√† en cours
        if (this.pendingQuestRequest) {
          console.log('‚è≥ [QuestManager] Requ√™te d√©j√† en cours');
          return 'ALREADY_REQUESTING';
        }
        
        console.log('üì§ [QuestManager] Demande qu√™tes au serveur...');
        this.pendingQuestRequest = true;
        this.requestAvailableQuests();
        return 'REQUESTING_QUESTS';
      }
    }
    
    if (data.type === 'questComplete') {
      console.log('‚úÖ [QuestManager] Quest Complete');
      this.setDialogueState('SHOWING_COMPLETION');
      this.showNotification('Qu√™te termin√©e ! F√©licitations !', 'success');
      setTimeout(() => this.setDialogueState('NONE'), 3000);
      return 'QUEST_COMPLETED';
    }
    
    console.log('‚ÑπÔ∏è [QuestManager] Type non-quest ou format non reconnu');
    return 'NO_QUEST';
  }
  
  // === üìä HANDLERS DONN√âES CORRIG√âS ===
  
  handleAvailableQuestsReceived(data) {
    console.log('üìä [QuestManager] Qu√™tes disponibles re√ßues:', data);
    
    try {
      let questArray = [];
      
      if (Array.isArray(data)) {
        questArray = data;
      } else if (data && Array.isArray(data.quests)) {
        questArray = data.quests;
      }
      
      this.availableQuests = questArray.filter(quest => quest && quest.id);
      console.log(`üìä [QuestManager] ${this.availableQuests.length} qu√™tes disponibles`);
      
      // ‚úÖ CORRECTION: Afficher seulement si on attendait une r√©ponse
      if (this.pendingQuestRequest && this.availableQuests.length > 0) {
        console.log('üé≠ [QuestManager] Affichage qu√™tes disponibles (r√©ponse attendue)');
        this.showQuestSelectionDialog('Qu√™tes disponibles', this.availableQuests);
      }
      
      // ‚úÖ Reset du flag
      this.pendingQuestRequest = false;
      
    } catch (error) {
      console.error('‚ùå [QuestManager] Erreur traitement qu√™tes disponibles:', error);
      this.pendingQuestRequest = false;
    }
  }
  
  // === üé≠ DIALOGUES AVEC PROTECTION ===
  
  showQuestSelectionDialog(title, quests) {
    console.log('üí¨ [QuestManager] Dialogue s√©lection:', title, quests);
    
    // ‚úÖ PROTECTION: Pas de double dialogue
    if (this.dialogueState === 'SHOWING_QUEST_SELECTION') {
      console.log('‚ö†Ô∏è [QuestManager] Dialogue d√©j√† ouvert');
      return false;
    }
    
    // === √âTAT DIALOGUE ACTIF ===
    this.setDialogueState('SHOWING_QUEST_SELECTION');
    
    if (!this.questUI || !this.questUI.showQuestDialog) {
      console.warn('‚ö†Ô∏è [QuestManager] QuestUI non disponible');
      
      // Fallback: d√©marrer automatiquement la premi√®re qu√™te
      if (quests.length === 1) {
        this.setDialogueState('NONE');
        this.startQuest(quests[0].id);
      } else if (quests.length > 1) {
        this.showSimpleQuestSelection(title, quests);
      } else {
        this.setDialogueState('NONE');
      }
      return true;
    }
    
    this.questUI.showQuestDialog(title, quests, (selectedQuestId) => {
      console.log('‚úÖ [QuestManager] Qu√™te s√©lectionn√©e:', selectedQuestId);
      
      // === FERMER LE DIALOGUE AVANT DE D√âMARRER ===
      this.setDialogueState('NONE');
      
      if (selectedQuestId) {
        this.startQuest(selectedQuestId);
      }
    });
    
    return true;
  }
  
  showSimpleQuestSelection(title, quests) {
    console.log('üìã [QuestManager] S√©lection simple fallback');
    
    const questList = quests.map((quest, index) => 
      `${index + 1}. ${quest.name || 'Qu√™te sans nom'}`
    ).join('\n');
    
    this.showNotification(`${title}:\n${questList}\n(Premi√®re qu√™te s√©lectionn√©e automatiquement)`, 'info');
    
    // Auto-select premi√®re qu√™te apr√®s un d√©lai
    setTimeout(() => {
      this.setDialogueState('NONE');
      if (quests.length > 0) {
        this.startQuest(quests[0].id);
      }
    }, 2000);
  }
  
  // === üîß RESET √âTAT EN CAS D'ERREUR ===
  
  resetInteractionState() {
    console.log('üîÑ [QuestManager] Reset √©tat interaction');
    this.pendingQuestRequest = false;
    this.setDialogueState('NONE');
    this.lastInteractionTime = 0;
  }
  
  // === ‚úÖ API POUR INTERACTIONMANAGER ===
  
  canHandleMoreInteractions() {
    return !this.pendingQuestRequest && this.dialogueState === 'NONE';
  }
  
  getInteractionResult(resultCode) {
    const results = {
      'QUESTS_SHOWN': 'success',
      'REQUESTING_QUESTS': 'pending',
      'ALREADY_REQUESTING': 'pending',
      'QUEST_COMPLETED': 'success',
      'BLOCKED': 'blocked',
      'COOLDOWN': 'blocked',
      'INVALID_DATA': 'error',
      'NO_QUEST': 'no_quest'
    };
    
    return results[resultCode] || 'unknown';
  }

  // === üêõ DEBUG AM√âLIOR√â ===
  
  getDebugInfo() {
    return {
      systemState: this.systemState,
      dialogueState: this.dialogueState,
      initialized: this.initialized,
      questCount: this.activeQuests.length,
      availableQuestCount: this.availableQuests.length,
      hasGameRoom: !!this.gameRoom,
      hasQuestUI: !!this.questUI,
      canProcessInteraction: this.canProcessInteraction(),
      pendingQuestRequest: this.pendingQuestRequest,
      lastInteractionTime: this.lastInteractionTime,
      canHandleMoreInteractions: this.canHandleMoreInteractions(),
      networkManagerConnection: this.debugNetworkManagerConnection()
    };
  }

  // ... [RESTE DU CODE IDENTIQUE] ...
}

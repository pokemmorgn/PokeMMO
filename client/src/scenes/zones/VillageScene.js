import { BaseZoneScene } from './BaseZoneScene.js';
// ‚úÖ AJUSTER LE CHEMIN selon votre structure de dossiers
import { PsyduckIntroManager } from '../intros/PsyduckIntroManager.js';

export class VillageScene extends BaseZoneScene {
  constructor() {
    super('VillageScene', 'village');
    this.transitionCooldowns = {};
    this.psyduckIntroManager = null;
    this.hasPlayedIntro = false;
  }

  // üî• HOOK appel√© UNE FOIS d√®s que le joueur local est pr√™t et positionn√©
  onPlayerReady(myPlayer) {
    super.onPlayerReady(myPlayer);
    
    console.log(`[VillageScene] Mon joueur est pr√™t √† (${myPlayer.x}, ${myPlayer.y})`);
    
    // ‚úÖ Setup des listeners serveur en premier
    this.setupServerListeners();
    
    // ‚úÖ V√âRIFIER le contexte d'arriv√©e
    const initData = this.scene.settings.data || {};
    const fromBeach = initData.fromZone === 'BeachScene' || initData.fromZone === 'beach';
    
    console.log(`[VillageScene] üìä Contexte:`, {
      fromBeach,
      fromZone: initData.fromZone,
      fromTransition: initData.fromTransition,
      playerPosition: { x: myPlayer.x, y: myPlayer.y }
    });
    
    // ‚úÖ INITIALISER L'INTRO
    this.initializePsyduckIntro();
    
    // Affichage instructions
    this.add.text(16, 16, 'Arrow keys to move\nPress "D" to show hitboxes', {
      font: '18px monospace',
      fill: '#000000',
      padding: { x: 20, y: 10 },
      backgroundColor: '#ffffff',
    }).setScrollFactor(0).setDepth(30);
    
    // Ev√©nements d'accueil
    this.setupVillageEvents();
    
    // ‚úÖ NOUVEAU: D√©marrer l'intro seulement apr√®s v√©rification de la qu√™te
    console.log('[VillageScene] üé¨ V√©rification conditions intro...');
    this.checkQuestAndStartIntro();
  }

  // ‚úÖ VERSION SIMPLE: V√©rifier la qu√™te avant de d√©marrer l'intro
  async checkQuestAndStartIntro() {
    console.log('[VillageScene] üîç V√©rification qu√™te "A Strange New World"...');
    
    // D√©lai pour laisser le temps aux syst√®mes de se charger
    this.time.delayedCall(1000, () => {
      this.performSimpleQuestCheck();
    });
  }

  // ‚úÖ M√âTHODE SIMPLE: V√©rification directe via le serveur
  performSimpleQuestCheck() {
    if (!this.networkManager?.room) {
      console.warn('[VillageScene] ‚ö†Ô∏è Pas de room - intro par d√©faut');
      this.startPsyduckIntroIfNeeded();
      return;
    }

    console.log('[VillageScene] üì° V√©rification qu√™te via serveur...');
    
    // √âcouter la r√©ponse du serveur (une seule fois)
    this.networkManager.room.onMessage('questCheckResult', (data) => {
      if (data.questId === 'beach_intro_quest') {
        console.log('[VillageScene] üì® R√©sultat qu√™te:', data);
        
        if (data.hasQuest || data.completed) {
          console.log('[VillageScene] ‚úÖ Qu√™te beach OK - lancement intro');
          this.startPsyduckIntroIfNeeded();
        } else {
          console.log('[VillageScene] ‚ùå Pas de qu√™te beach - pas d\'intro');
          this.showNoQuestMessage();
        }
      }
    });
    
    // Demander au serveur
    this.networkManager.room.send('checkPlayerQuest', {
      questId: 'beach_intro_quest'
    });
    
    // Timeout de s√©curit√©
    this.time.delayedCall(3000, () => {
      if (!this.hasPlayedIntro) {
        console.warn('[VillageScene] ‚è∞ Timeout - intro par d√©faut');
        this.startPsyduckIntroIfNeeded();
      }
    });
  }

  // ‚úÖ NOUVELLE M√âTHODE: Afficher message si pas de qu√™te
  showNoQuestMessage() {
    const message = this.add.text(
      this.cameras.main.centerX,
      this.cameras.main.centerY,
      'Vous devez d\'abord terminer votre aventure sur la plage\navant de d√©couvrir les secrets du village...',
      {
        fontSize: '16px',
        fontFamily: 'Arial',
        color: '#ffffff',
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        padding: { x: 20, y: 15 },
        align: 'center',
        wordWrap: { width: 400 }
      }
    ).setOrigin(0.5).setScrollFactor(0).setDepth(1000);

    // Animation d'apparition
    message.setAlpha(0);
    this.tweens.add({
      targets: message,
      alpha: 1,
      duration: 1000,
      ease: 'Power2'
    });

    // Disparition automatique apr√®s 5 secondes
    this.time.delayedCall(5000, () => {
      this.tweens.add({
        targets: message,
        alpha: 0,
        duration: 1000,
        ease: 'Power2',
        onComplete: () => {
          message.destroy();
        }
      });
    });

    console.log('[VillageScene] üí¨ Message d\'avertissement affich√©');
  }

  // ‚úÖ M√âTHODE EXISTANTE MODIFI√âE: Setup des listeners (optionnel)
  setupServerListeners() {
    if (!this.networkManager?.room) return;
    
    // ‚úÖ NOUVEAU: √âcouter les mises √† jour de qu√™te
    this.networkManager.room.onMessage('questProgressUpdate', (data) => {
      console.log('[VillageScene] üìà Mise √† jour qu√™te re√ßue:', data);
      
      // Si la qu√™te beach vient d'√™tre compl√©t√©e et qu'on n'a pas encore jou√© l'intro
      if (data.questId === 'beach_intro_quest' && data.completed && !this.hasPlayedIntro) {
        console.log('[VillageScene] üéâ Qu√™te beach compl√©t√©e - autorisation intro diff√©r√©e');
        this.time.delayedCall(2000, () => {
          this.startPsyduckIntroIfNeeded();
        });
      }
    });
    
    console.log('[VillageScene] ‚úÖ Connexion au syst√®me de qu√™tes existant');
  }

  // ‚úÖ M√âTHODE EXISTANTE INCHANG√âE: D√©marrer l'intro simple (sans dialogue)
  startPsyduckIntroIfNeeded() {
    if (this.shouldPlayPsyduckIntro()) {
      console.log('[VillageScene] üé¨ D√©marrage intro Psyduck village SIMPLE...');
      
      // ‚úÖ D√©lai pour s'assurer que tout est stable
      this.time.delayedCall(2000, () => {
        if (this.psyduckIntroManager && !this.hasPlayedIntro) {
          this.hasPlayedIntro = true;
          
          // ‚úÖ D√âMARRER LA S√âQUENCE SIMPLE (spawn ‚Üí cam√©ra ‚Üí monte ‚Üí dispara√Æt)
          this.psyduckIntroManager.startSimpleVillageIntro(() => {
            console.log('[VillageScene] ‚úÖ Intro Psyduck simple termin√©e');
            this.onPsyduckIntroComplete();
          });
        }
      });
    } else {
      console.log('[VillageScene] ‚è≠Ô∏è Intro Psyduck non n√©cessaire');
    }
  }

  // ‚úÖ M√âTHODE EXISTANTE INCHANG√âE: Condition pour jouer l'intro
  shouldPlayPsyduckIntro() {
    // ‚úÖ V√©rifier si on a d√©j√† jou√© l'intro dans cette session
    if (this.hasPlayedIntro) {
      console.log('[VillageScene] ‚ùå Intro d√©j√† jou√©e cette session');
      return false;
    }
    
    // ‚úÖ PLUS DE V√âRIFICATION localStorage - TOUJOURS JOUER L'INTRO
    console.log('[VillageScene] ‚úÖ Intro village autoris√©e');
    return true;
  }

  // ‚úÖ M√âTHODES EXISTANTES INCHANG√âES...
  hasBeachIntroQuest() {
    try {
      // ‚úÖ V√©rifier via le syst√®me de qu√™tes global
      if (window.questSystem) {
        const hasActiveBeachQuest = window.questSystem.hasActiveQuest?.('beach_intro_quest');
        const hasCompletedBeachQuest = window.questSystem.hasCompletedQuest?.('beach_intro_quest');
        
        const hasBeachQuest = hasActiveBeachQuest || hasCompletedBeachQuest;
        console.log('[VillageScene] üîç Qu√™te beach:', {
          active: hasActiveBeachQuest,
          completed: hasCompletedBeachQuest,
          hasQuest: hasBeachQuest
        });
        
        return hasBeachQuest;
      }
      
      // ‚úÖ Fallback - retourner false si pas de syst√®me
      console.warn('[VillageScene] ‚ö†Ô∏è QuestSystem pas disponible - pas d\'intro');
      return false;
      
    } catch (error) {
      console.error('[VillageScene] ‚ùå Erreur v√©rification qu√™te beach:', error);
      return false;
    }
  }

  // ‚úÖ M√âTHODE EXISTANTE INCHANG√âE: Initialiser le manager Psyduck
  initializePsyduckIntro() {
    try {
      console.log('[VillageScene] ü¶Ü Initialisation intro Psyduck...');
      
      this.psyduckIntroManager = new PsyduckIntroManager(this);
      
      // ‚úÖ POSITIONS CORRECTES pour votre carte village
      this.psyduckIntroManager.setLabAndTeleportPositions(
        896, 528,  // Position devant le lab (spawn Psyduck)
        896, 480   // Position du t√©l√©port (un peu plus haut)
      );
      
      console.log('[VillageScene] ‚úÖ Manager Psyduck initialis√© - spawn √† (896, 528)');
      
    } catch (error) {
      console.error('[VillageScene] ‚ùå Erreur init Psyduck:', error);
    }
  }

  onPsyduckIntroComplete() {
    console.log('[VillageScene] üéâ Intro Psyduck simple compl√©t√©e');
    
    this.hasPlayedIntro = true;
    
    // ‚úÖ PAS DE SAUVEGARDE localStorage - permettre de rejouer
    console.log('[VillageScene] Le joueur peut maintenant jouer normalement');
  }

  setupVillageEvents() {
    this.time.delayedCall(1000, () => {
      console.log("üèòÔ∏è Bienvenue √† GreenRoot Village !");
      if (this.infoText) {
        this.infoText.setText('PokeWorld MMO\nGreenRoot Village\nConnected!');
        console.log("InfoText mise √† jour");
      }
    });
  }

  setupNPCs() {
    console.log("‚öôÔ∏è setupNPCs appel√©");
    const npcLayer = this.map.getObjectLayer('NPCs');
    if (npcLayer) {
      console.log(`Layer NPCs trouv√© avec ${npcLayer.objects.length} NPC(s)`);
      npcLayer.objects.forEach(npcObj => this.createNPC(npcObj));
    } else {
      console.warn("‚ö†Ô∏è Layer 'NPCs' non trouv√©");
    }
  }

  createNPC(npcData) {
    console.log(`Cr√©ation NPC: ${npcData.name || 'Sans nom'}`);
    const npc = this.add.rectangle(
      npcData.x + npcData.width / 2,
      npcData.y + npcData.height / 2,
      npcData.width,
      npcData.height,
      0x3498db
    );
    const npcName = this.add.text(
      npc.x,
      npc.y - 30,
      npcData.name || 'NPC',
      {
        fontSize: '12px',
        fontFamily: 'monospace',
        color: '#ffffff',
        backgroundColor: 'rgba(0, 0, 0, 0.7)',
        padding: { x: 4, y: 2 },
      }
    ).setOrigin(0.5);
    npc.setInteractive();
    npc.on('pointerdown', () => {
      this.interactWithNPC(npcData.name || 'Villageois');
    });
    console.log(`üë§ NPC cr√©√© : ${npcData.name || 'Sans nom'}`);
  }

  interactWithNPC(npcName) {
    console.log(`üí¨ Interaction avec ${npcName}`);
    const dialogues = {
      Maire: "Bienvenue √† GreenRoot ! C'est un village paisible.",
      Marchand: "J'ai de super objets √† vendre ! Revenez plus tard.",
      Enfant: "J'ai vu des Pok√©mon pr√®s de la for√™t !",
      Villageois: "Bonjour ! Belle journ√©e, n'est-ce pas ?",
      Professeur: "Rendez-vous au laboratoire si vous voulez un Pok√©mon !",
    };
    const message = dialogues[npcName] || 'Bonjour, voyageur !';
    const dialogueBox = this.add.text(
      this.cameras.main.centerX,
      this.cameras.main.centerY + 100,
      `${npcName}: "${message}"`,
      {
        fontSize: '14px',
        fontFamily: 'monospace',
        color: '#ffffff',
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        padding: { x: 10, y: 8 },
        wordWrap: { width: 300 },
      }
    ).setOrigin(0.5).setScrollFactor(0).setDepth(2000);
    this.time.delayedCall(3000, () => {
      dialogueBox.destroy();
      console.log(`üí¨ Dialogue avec ${npcName} d√©truit`);
    });
  }

  create() {
    super.create();
    
    // ‚úÖ TOUCHES DE TEST pour d√©veloppement
    if (this.input && this.input.keyboard) {
      // Touche Q : Debug statut qu√™te
      this.input.keyboard.on('keydown-Q', () => {
        console.log('[VillageScene] üîç Debug quest status...');
        this.debugQuestStatus();
      });
      
      this.input.keyboard.on('keydown-T', () => {
        console.log('[VillageScene] üß™ Test intro Psyduck SIMPLE...');
        if (this.psyduckIntroManager) {
          this.psyduckIntroManager.testSimpleVillageIntro();
        }
      });

      this.input.keyboard.on('keydown-Y', () => {
        console.log('[VillageScene] üõë Arr√™t forc√© intro Psyduck...');
        if (this.psyduckIntroManager) {
          this.psyduckIntroManager.forceStop();
        }
      });

      this.input.keyboard.on('keydown-U', () => {
        console.log('[VillageScene] üîç Debug Psyduck status...');
        if (this.psyduckIntroManager) {
          this.psyduckIntroManager.debugStatus();
        }
      });

      // ‚úÖ NOUVELLE TOUCHE: Reset pour tester √† nouveau
      this.input.keyboard.on('keydown-R', () => {
        console.log('[VillageScene] üîÑ Reset intro pour test...');
        this.resetPsyduckIntro();
      });

      // ‚úÖ NOUVELLE TOUCHE: Forcer v√©rification qu√™te
      this.input.keyboard.on('keydown-C', () => {
        console.log('[VillageScene] üîç Force v√©rification qu√™te...');
        this.checkQuestAndStartIntro();
      });
    }
  }

  // ‚úÖ M√âTHODE EXISTANTE MISE √Ä JOUR: Debug via syst√®me existant
  debugQuestStatus() {
    console.log(`üîç [VillageScene] === DEBUG QUEST STATUS ===`);
    
    // V√©rifier le syst√®me de qu√™tes global
    if (window.questSystemGlobal || window.questSystem) {
      const questSystem = window.questSystemGlobal || window.questSystem;
      console.log(`‚úÖ [VillageScene] QuestSystem global disponible`);
      
      // Utiliser les m√©thodes existantes
      if (typeof questSystem.hasActiveQuest === 'function') {
        const hasBeachActive = questSystem.hasActiveQuest('beach_intro_quest');
        const hasBeachCompleted = questSystem.hasCompletedQuest?.('beach_intro_quest');
        
        console.log(`üèñÔ∏è [VillageScene] Qu√™te beach - Active: ${hasBeachActive}, Termin√©e: ${hasBeachCompleted}`);
      }
      
      // Debug g√©n√©ral du syst√®me
      if (typeof questSystem.debugQuests === 'function') {
        questSystem.debugQuests();
      }
    } else {
      console.error(`‚ùå [VillageScene] QuestSystem global MANQUANT`);
      
      // Tester la v√©rification serveur
      this.performServerQuestCheck();
    }
    
    console.log(`=======================================`);
  }

  resetPsyduckIntro() {
    this.hasPlayedIntro = false;
    this.questSystemReady = false;
    console.log('[VillageScene] üîÑ Intro Psyduck r√©initialis√©e');
  }

  cleanup() {
    this.transitionCooldowns = {};
    
    if (this.psyduckIntroManager) {
      this.psyduckIntroManager.destroy();
      this.psyduckIntroManager = null;
    }
    
    console.log("‚öôÔ∏è cleanup appel√©");
    super.cleanup();
  }
}

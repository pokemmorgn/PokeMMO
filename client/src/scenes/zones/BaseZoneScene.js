// client/src/scenes/zones/BaseZoneScene.js -

import { QuickLoading } from '../../components/LoadingScreen.js';
import { PlayerManager } from "../../game/PlayerManager.js";
import { CameraManager } from "../../camera/CameraManager.js";
import { NpcManager } from "../../game/NpcManager.ts";
import { InventorySystem } from "../../game/InventorySystem.js";
import { BaseInteractionManager } from "../../game/BaseInteractionManager.js";
import { TransitionIntegration } from '../../transitions/TransitionIntegration.js';
import { integrateShopToScene } from "../../game/ShopIntegration.js";
import { CharacterManager } from "../../game/CharacterManager.js";
import { zoneEnvironmentManager } from "../../managers/ZoneEnvironmentManager.js";
// üÜï NOUVEAU: Import du ClientEncounterManager
import { ClientEncounterManager } from "../../managers/EncounterManager.js";
// üîí MODIFI√â: Import pour MovementBlockHandler
import { movementBlockHandler } from "../../input/MovementBlockHandler.js";
import { InputManager } from "../../input/InputManager.js";
import { integrateMusicToScene } from "../../managers/MapMusicManager.js";
import { sceneToZone, zoneToScene } from '../../config/ZoneMapping.js';
import { PokemonFollowerManager } from "../../game/PokemonFollowerManager.js";
import { OverworldPokemonManager } from "../../game/OverworldPokemonManager.js";
import { WeatherIcon } from '../../ui/WeatherIcon.js';
import { globalWeatherManager } from '../../managers/GlobalWeatherManager.js';
import ObjectManager from "../../managers/ObjectManager.js";


export class BaseZoneScene extends Phaser.Scene {
  constructor(sceneKey, mapKey) {
    super({ key: sceneKey });
    this.mapKey = mapKey;
    this.phaserTilesets = [];
    this.layers = {};
    this.cameraFollowing = false;
    this.lastDirection = 'down';
    this.mySessionId = null;
    this.loadTimer = null;
    this.animatedObjects = null;
    this.lastMoveTime = 0;
    this.lastStopTime = 0;
    this.myPlayerReady = false;
    this.globalWeatherManager = null;
    this.weatherSystemType = null; // 'global', 'fallback'
    this.questModuleInitialized = false;
    this.questModuleAttempts = 0;
    this.maxQuestModuleAttempts = 3;
    this.networkManager = (this.scene?.settings?.data?.networkManager) || window.globalNetworkManager;
    this.room = this.networkManager?.room || window.currentGameRoom;
    this.timeWeatherWidget = null;
    this.weatherIcon = null; // Remplace l'ancienne ic√¥ne

    // Inventaire
    this.inventorySystem = null;
    this.inventoryInitialized = false;
        // ‚úÖ NOUVEAU: Propri√©t√©s pour les Pok√©mon overworld
    this.overworldPokemonManager = null;
    this.overworldPokemonInitialized = false;
    // Zone et √©tat r√©seau
    this.zoneName = null;
    this.serverZoneConfirmed = false;
    this.isSceneReady = false;
    this.networkSetupComplete = false;

    // Grace period pour √©viter les transitions involontaires
    this.justArrivedAtZone = false;

    // ‚úÖ BaseInteractionManager (architecture modulaire) au lieu de ShopIntegration direct
    this.interactionManager = null;

    // ‚úÖ Syst√®me d'√©quipe avec protection
    this.teamSystemInitialized = false;
    this.teamInitializationAttempts = 0;
    this.maxTeamInitAttempts = 3;
    this.pokemonFollowerManager = null;
    this.followerSystemInitialized = false;
    // üÜï NOUVEAU: ClientEncounterManager
    this.encounterManager = null;
    this.encounterInitialized = false;
    this.lastEncounterCheck = 0;
    this.encounterCheckInterval = 100; // V√©rifier toutes les 100ms

    // üîí NOUVEAU: Propri√©t√©s MovementBlockHandler
    this.movementBlockHandlerInitialized = false;
    this.movementBlockInitAttempts = 0;
    this.maxMovementBlockInitAttempts = 5;
    
    // üîí NOUVEAU: InputManager
    this.inputManager = null;
    this.inputManagerReady = false;

  // ‚úÖ NOUVEAU: Tracking initialisation UI
    this.uiInitialized = false;
    this.uiInitializationAttempts = 0;
    this.maxUIInitAttempts = 3;
  }

  preload() {
    const ext = 'tmj';
    this.load.tilemapTiledJSON(this.mapKey, `assets/maps/${this.mapKey}.${ext}`);

    this.load.spritesheet('BoyWalk', 'assets/character/BoyWalk.png', {
      frameWidth: 24,
      frameHeight: 24,
    });
  }

create() {
    console.log(`üåç === CR√âATION ZONE: ${this.scene.key} ===`);
    console.log(`üìä Scene data re√ßue:`, this.scene.settings.data);
    
    // ‚úÖ SETUP DES TRANSITIONS (garde √ßa)
    TransitionIntegration.setupTransitions(this);
    
    // ‚úÖ UN SEUL APPEL - startOptimizedLoading() fait TOUT
    this.startOptimizedLoading();
}

  
// ‚úÖ NOUVELLE M√âTHODE: Chargement optimis√© avec LoadingScreen
startOptimizedLoading() {
    console.log(`üöÄ [${this.scene.key}] === CHARGEMENT DIRECT SANS √âCRAN ===`);
    
    // ‚úÖ Faire tout le chargement DIRECTEMENT (pas d'√©cran)
    this.createPlayerAnimations();
    this.setupManagers();
    this.initPlayerSpawnFromSceneData();
    this.justArrivedAtZone = true;
    this.time.delayedCall(500, () => { this.justArrivedAtZone = false; });
    
    this.loadMap();
    this.setupInputs();
    this.createUI();
    this.myPlayerReady = false;
    this.isSceneReady = true;
    
    this.initializeWithExistingConnection();
    this.setupPlayerReadyHandler();
    this.setupCleanupHandlers();

    this.events.once('shutdown', this.cleanup, this);
    this.events.once('destroy', this.cleanup, this);
    
    // ‚úÖ Initialiser les syst√®mes en arri√®re-plan
    this.initializeGameSystems();
}

// ‚úÖ NOUVELLE M√âTHODE - UI EN SILENCE TOTALE
async initializeUIQuietly() {
    console.log(`ü§´ [${this.scene.key}] UI en silence...`);
    
    if (this.uiInitialized) return;
    
    try {
        // ‚úÖ DIRECT - SANS AUCUN √âCRAN
        if (typeof initializePokemonUI === 'function') {
            const result = await initializePokemonUI();
            
            if (result.success) {
                this.uiInitialized = true;
                console.log(`‚úÖ [${this.scene.key}] UI pr√™te en silence`);
            }
        }
    } catch (error) {
        console.error(`‚ùå [${this.scene.key}] Erreur UI silencieuse:`, error);
    }
}

  // ‚úÖ NOUVELLE M√âTHODE: D√©marrer LoadingScreen avec UI int√©gr√©e
  startIntegratedLoadingScreen() {
    console.log(`üéÆ [${this.scene.key}] === CHARGEMENT INT√âGR√â ZONE + UI ===`);
    
    // Cr√©er un LoadingScreen personnalis√© pour cette zone avec UI int√©gr√©e
    if (window.globalLoadingScreen) {
      // √âtapes combin√©es : zone + UI
      const integratedSteps = [
        "Chargement de la carte...",
        "Initialisation des joueurs...",
        "Configuration r√©seau...",
        "D√©marrage interface utilisateur...",
        "Chargement modules UI...",
        "Configuration des ic√¥nes...",
        "Finalisation de l'interface...",
        "Zone pr√™te !"
      ];
      
      // D√©marrer l'√©cran de chargement personnalis√©
      window.globalLoadingScreen.showCustomLoading(integratedSteps, {
        title: `Chargement ${this.scene.key}`,
        icon: 'üåç',
        stepDelay: 400
      }).then(() => {
        console.log(`‚úÖ [${this.scene.key}] Chargement int√©gr√© termin√©`);
        // L'√©cran se ferme automatiquement
      });
      
    } else {
      console.warn(`‚ö†Ô∏è [${this.scene.key}] GlobalLoadingScreen non disponible`);
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Initialisation UI PENDANT le chargement (pas apr√®s)
  async initializeUISystemsDuringLoading() {
    console.log(`üéÆ [${this.scene.key}] === INITIALISATION UI PENDANT CHARGEMENT ===`);
    
    // Protection contre initialisations multiples
    if (this.uiInitialized) {
      console.log(`‚ÑπÔ∏è [${this.scene.key}] UI d√©j√† initialis√©e`);
      return;
    }
    
    if (this.uiInitializationAttempts >= this.maxUIInitAttempts) {
      console.warn(`‚ö†Ô∏è [${this.scene.key}] Trop de tentatives d'initialisation UI - abandon`);
      return;
    }
    
    this.uiInitializationAttempts++;
    console.log(`üéÆ [${this.scene.key}] Tentative UI ${this.uiInitializationAttempts}/${this.maxUIInitAttempts}`);
    
    try {
      // V√©rifier que les pr√©-requis sont pr√™ts
      if (!window.globalNetworkManager?.isConnected) {
        console.warn(`‚ö†Ô∏è [${this.scene.key}] NetworkManager pas pr√™t, retry dans 1s...`);
        this.time.delayedCall(1000, () => {
          this.initializeUISystemsDuringLoading();
        });
        return;
      }
      
      // ‚úÖ NOUVEAU: Initialiser directement sans LoadingScreen s√©par√©
      if (typeof window.initializePokemonUI === 'function') {
        console.log(`üöÄ [${this.scene.key}] Initialisation directe PokemonUI...`);
        
        const result = await window.initializePokemonUI();
        
        if (result.success) {
          this.uiInitialized = true;
          console.log(`‚úÖ [${this.scene.key}] Interface utilisateur initialis√©e !`);
          
          // D√©clencher notification de succ√®s
          if (typeof window.showGameNotification === 'function') {
            window.showGameNotification('Interface pr√™te !', 'success', { 
              duration: 1500, 
              position: 'bottom-center' 
            });
          }
          
        } else {
          console.error(`‚ùå [${this.scene.key}] Erreur initialisation UI:`, result.error);
          this.handleUIInitializationFailure(result.error);
        }
        
      } else {
        console.error(`‚ùå [${this.scene.key}] window.initializePokemonUI non disponible !`);
        this.handleUIInitializationFailure("Fonction d'initialisation UI manquante");
      }
      
    } catch (error) {
      console.error(`‚ùå [${this.scene.key}] Erreur critique initialisation UI:`, error);
      this.handleUIInitializationFailure(error.message);
    }
  }
  
  // ‚úÖ NOUVELLE M√âTHODE: Initialisation UI avec LoadingScreen
  async initializeUISystemsWithLoading() {
    console.log(`üéÆ [${this.scene.key}] === INITIALISATION UI AVEC CHARGEMENT ===`);
    
    // Protection contre initialisations multiples
    if (this.uiInitialized) {
      console.log(`‚ÑπÔ∏è [${this.scene.key}] UI d√©j√† initialis√©e`);
      return;
    }
    
    if (this.uiInitializationAttempts >= this.maxUIInitAttempts) {
      console.warn(`‚ö†Ô∏è [${this.scene.key}] Trop de tentatives d'initialisation UI - abandon`);
      return;
    }
    
    this.uiInitializationAttempts++;
    console.log(`üéÆ [${this.scene.key}] Tentative UI ${this.uiInitializationAttempts}/${this.maxUIInitAttempts}`);
    
    try {
      // V√©rifier que les pr√©-requis sont pr√™ts
      if (!window.globalNetworkManager?.isConnected) {
        console.warn(`‚ö†Ô∏è [${this.scene.key}] NetworkManager pas pr√™t, retry dans 2s...`);
        this.time.delayedCall(2000, () => {
          this.initializeUISystemsWithLoading();
        });
        return;
      }
      
      // D√©clencher l'initialisation UI avec LoadingScreen
      if (typeof window.initializeUIWithLoading === 'function') {
        console.log(`üöÄ [${this.scene.key}] Lancement initialisation UI avec √©cran de chargement...`);
        
        const result = await window.initializeUIWithLoading();
        
        if (result.success) {
          this.uiInitialized = true;
          console.log(`‚úÖ [${this.scene.key}] Interface utilisateur initialis√©e avec succ√®s !`);
          
          // Cacher l'ancien overlay s'il existe
          if (window.hideLoadingOverlay) {
            window.hideLoadingOverlay();
          }
          
        } else {
          console.error(`‚ùå [${this.scene.key}] Erreur initialisation UI:`, result.error);
          this.handleUIInitializationFailure(result.error);
        }
        
      } else {
        console.error(`‚ùå [${this.scene.key}] window.initializeUIWithLoading non disponible !`);
        this.handleUIInitializationFailure("Fonction d'initialisation UI manquante");
      }
      
    } catch (error) {
      console.error(`‚ùå [${this.scene.key}] Erreur critique initialisation UI:`, error);
      this.handleUIInitializationFailure(error.message);
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE: Gestion des √©checs d'initialisation UI
  handleUIInitializationFailure(errorMessage) {
    if (this.uiInitializationAttempts < this.maxUIInitAttempts) {
      console.log(`üîÑ [${this.scene.key}] Retry initialisation UI dans 3s... (${this.uiInitializationAttempts}/${this.maxUIInitAttempts})`);
      this.time.delayedCall(3000, () => {
        this.initializeUISystemsWithLoading();
      });
    } else {
      console.error(`‚ùå [${this.scene.key}] √âchec d√©finitif d'initialisation UI`);
      
      // Afficher un fallback notification
      if (typeof window.showGameNotification === 'function') {
        window.showGameNotification('Interface utilisateur indisponible', 'error', {
          duration: 5000,
          position: 'top-center'
        });
      }
      
      // Cacher l'overlay m√™me en cas d'√©chec pour ne pas bloquer le jeu
      if (window.hideLoadingOverlay) {
        window.hideLoadingOverlay();
      }
    }
  }
  // ‚úÖ M√âTHODE INCHANG√âE: Utiliser la connexion existante de main.js
 initializeWithExistingConnection() {
  console.log(`üì° [${this.scene.key}] === UTILISATION CONNEXION EXISTANTE ===`);

   
  if (!window.globalNetworkManager) {
    console.error(`‚ùå [${this.scene.key}] NetworkManager global manquant!`);
    this.showErrorState("NetworkManager global introuvable");
    return;
  }

  if (!window.globalNetworkManager.isConnected) {
    console.error(`‚ùå [${this.scene.key}] NetworkManager global non connect√©!`);
    this.showErrorState("Connexion r√©seau inactive");
    return;
  }

  this.networkManager = this.networkManager || window.globalNetworkManager;
  console.log('[BaseZoneScene] NetworkManager utilis√© :', this.networkManager, 'Room:', this.room);
  this.mySessionId = this.networkManager.getSessionId();

  console.log(`‚úÖ [${this.scene.key}] NetworkManager r√©cup√©r√©:`, {
    sessionId: this.mySessionId,
    isConnected: this.networkManager.isConnected,
    currentZone: this.networkManager.getCurrentZone()
  });

  this.setupNetworkHandlers();
  this.networkSetupComplete = true;

  // ‚úÖ Initialiser les syst√®mes de jeu
  this.initializeGameSystems();

  this.requestServerZone();
  this.verifyNetworkState();

  // CRITIQUE : Toujours refaire le setup apr√®s toute nouvelle room !
  if (this.networkManager && this.networkManager.room) {
    this.networkManager._networkHandlersSetup = false;
    this.networkManager._worldHandlersSetup = false;
    this.networkManager.setupRoomListeners();
    this.networkManager.restoreCustomCallbacks?.();
    
    // ‚úÖ AJOUT CRITIQUE: Re-initialiser le syst√®me de combat
    if (window.battleSystem && this.networkManager.battleNetworkHandler) {
      console.log('üîó [BaseZoneScene] Re-connexion BattleManager...');
      window.battleSystem.battleConnection = this.networkManager.battleNetworkHandler;
      
      // ‚úÖ NOUVEAU: Re-setup des √©v√©nements de combat
      if (window.battleSystem.battleConnection.networkHandler) {
        window.battleSystem.battleConnection.networkHandler = this.networkManager.battleNetworkHandler;
        window.battleSystem.battleConnection.setupNetworkEvents();
      }
    }
    
    // ‚úÖ NOUVEAU: V√©rifier que BattleNetworkHandler a le bon client
    if (this.networkManager.battleNetworkHandler && window.client) {
      this.networkManager.battleNetworkHandler.client = window.client;
      console.log('‚úÖ [BaseZoneScene] BattleNetworkHandler client mis √† jour');
    }
  }

  // üîí NOUVEAU: Initialiser MovementBlockHandler apr√®s NetworkManager
  this.initializeMovementBlockHandler();
  this.networkSetupComplete = true;

  if (this.networkManager?.interactionHandler && !this.networkManager.interactionHandler.isInitialized) {
    console.log(`üîß [${this.scene.key}] Initialisation NetworkInteractionHandler...`);
    this.networkManager.interactionHandler.initialize();
  }
   
  // === [HOOK ROOM READY] ===
  if (this.networkManager && this.networkManager.room) {
    this.room = this.networkManager.room; // Synchronise la r√©f√©rence locale
    if (typeof this.onRoomAvailable === "function") {
      this.onRoomAvailable(this.room);
    }
  }
}


  // üîí NOUVELLE M√âTHODE: Initialisation MovementBlockHandler avec protection
  initializeMovementBlockHandler() {
    console.log(`üîí [${this.scene.key}] Initialisation MovementBlockHandler...`);
    
    // ‚úÖ PROTECTION CONTRE LES INITIALISATIONS MULTIPLES
    if (this.movementBlockHandlerInitialized) {
      console.log(`‚è≠Ô∏è [${this.scene.key}] MovementBlockHandler d√©j√† initialis√© pour cette sc√®ne`);
      return;
    }
    
    // ‚úÖ PROTECTION CONTRE TROP DE TENTATIVES
    this.movementBlockInitAttempts++;
    
    if (this.movementBlockInitAttempts > this.maxMovementBlockInitAttempts) {
      console.error(`‚ùå [${this.scene.key}] Trop de tentatives d'init MovementBlockHandler - abandon`);
      return;
    }
    
    console.log(`üîí [${this.scene.key}] Tentative ${this.movementBlockInitAttempts}/${this.maxMovementBlockInitAttempts}`);
    
    // ‚úÖ V√âRIFICATION STRICTE: Attendre que l'InputManager soit pr√™t ET setup
    if (!this.inputManager || !this.inputManagerReady || typeof this.inputManager.areInputsEnabled !== 'function') {
      console.warn(`‚ö†Ô∏è [${this.scene.key}] InputManager pas encore pr√™t, retry dans 1s... (tentative ${this.movementBlockInitAttempts})`);
      
      // ‚úÖ D√âLAI PROGRESSIF pour √©viter le spam
      const delay = Math.min(1000 * this.movementBlockInitAttempts, 5000);
      
      setTimeout(() => {
        if (this.scene.isActive()) { // ‚úÖ V√©rifier que la sc√®ne est toujours active
          this.initializeMovementBlockHandler();
        }
      }, delay);
      return;
    }
    
    // ‚úÖ V√âRIFICATION NetworkManager
    if (!this.networkManager || !this.networkManager.isConnected) {
      console.warn(`‚ö†Ô∏è [${this.scene.key}] NetworkManager pas pr√™t, retry dans 2s...`);
      
      setTimeout(() => {
        if (this.scene.isActive()) {
          this.initializeMovementBlockHandler();
        }
      }, 2000);
      return;
    }
    
    try {
      // ‚úÖ INITIALISER avec protection
      console.log(`üîß [${this.scene.key}] Initialisation MovementBlockHandler avec managers...`);
      
      // ‚úÖ V√©rifier que l'instance globale n'est pas d√©j√† sur-initialis√©e
      if (movementBlockHandler.isInitialized && movementBlockHandler.scene && movementBlockHandler.scene !== this) {
        console.log(`üîÑ [${this.scene.key}] Reset MovementBlockHandler pour nouvelle sc√®ne`);
        movementBlockHandler.reset();
      }
      
      // ‚úÖ Initialiser avec les managers requis
      movementBlockHandler.initialize(
        this.inputManager,
        this.networkManager,
        this
      );
      
      // ‚úÖ Marquer comme initialis√© pour cette sc√®ne
      this.movementBlockHandlerInitialized = true;
      
      console.log(`‚úÖ [${this.scene.key}] MovementBlockHandler initialis√© avec succ√®s!`);
      
      // ‚úÖ Test rapide
      setTimeout(() => {
        if (movementBlockHandler.isReady()) {
          console.log(`‚úÖ [${this.scene.key}] MovementBlockHandler confirm√© pr√™t`);
        } else {
          console.warn(`‚ö†Ô∏è [${this.scene.key}] MovementBlockHandler pas pr√™t apr√®s init`);
        }
      }, 500);
      
    } catch (error) {
      console.error(`‚ùå [${this.scene.key}] Erreur initialisation MovementBlockHandler:`, error);
      
      // ‚úÖ Retry avec d√©lai exponentiel en cas d'erreur
      if (this.movementBlockInitAttempts < this.maxMovementBlockInitAttempts) {
        const retryDelay = 2000 * this.movementBlockInitAttempts;
        console.log(`üîÑ [${this.scene.key}] Retry dans ${retryDelay}ms...`);
        
        setTimeout(() => {
          if (this.scene.isActive()) {
            this.initializeMovementBlockHandler();
          }
        }, retryDelay);
      }
    }
  }

setRoom(room) {
  // M√©thode √† appeler pour changer de room (par exemple lors d'une transition de zone)
  console.log(`üîÑ [${this.scene?.key || 'BaseZoneScene'}] setRoom appel√© :`, room);

  this.room = room;
  if (this.networkManager) {
    this.networkManager.room = room;
    console.log(`üîÑ [${this.scene?.key || 'BaseZoneScene'}] Changement de room dans NetworkManager`);
    this.networkManager.setupRoomListeners();
    this.networkManager.restoreCustomCallbacks?.();
  } else {
    console.warn(`‚ö†Ô∏è [${this.scene?.key || 'BaseZoneScene'}] Pas de networkManager pour setRoom`);
  }
  // Re-initialiser certains syst√®mes si besoin
  this.initializeGameSystems();
  console.log(`‚úÖ [${this.scene?.key || 'BaseZoneScene'}] Syst√®mes r√©initialis√©s apr√®s changement de room`);
}


  
  // ‚úÖ M√âTHODE MODIFI√âE: Initialisation des syst√®mes avec ordre et d√©lais s√©curis√©s + EncounterManager
  initializeGameSystems() {
    console.log(`üéÆ [${this.scene.key}] Initialisation des syst√®mes de jeu (ordre s√©curis√©)...`);

    // ‚úÖ ORDRE D'INITIALISATION CRITIQUE pour √©viter les conflits
    
    // 1. Inventaire (plus stable)
    this.initializeInventorySystem();

        // 4. Temps/M√©t√©o (peu de risque de conflit)
    setTimeout(() => {
      this.initializeTimeWeatherSystem();
    }, 300);
    
    // 2. InteractionManager (d√©pend de networkManager)
    setTimeout(() => {
      this.initializeInteractionManager();
    }, 600);
    
    // 3. Qu√™tes (d√©pend de la connexion stable)
    setTimeout(() => {
      this.initializeQuestSystem();
    }, 900);
    
    setTimeout(() => {
      const zoneName = this.normalizeZoneName(this.scene.key);
      console.log(`üåç [${this.scene.key}] Application m√©t√©o finale pour: ${zoneName}`);
      
    // 5. Syst√®me d'√©quipe
    setTimeout(() => {
      // ‚úÖ UTILISER LA FONCTION GLOBALE COMME L'INVENTAIRE
      if (typeof window.initTeamSystem === 'function') {
        console.log(`‚öîÔ∏è [${this.scene.key}] Init team system global`);
        window.initTeamSystem(this.networkManager.room);
      }
    }, 1500);
    }, 1200);
    // üÜï 6. EncounterManager (apr√®s le chargement de la carte)
    setTimeout(() => {
      this.initializeEncounterManager();
    }, 1800);
      setTimeout(() => {
    this.initializeOverworldPokemon();
  }, 2100);
    console.log(`‚úÖ [${this.scene.key}] Planification initialisation syst√®mes termin√©e`);

  }
// ‚úÖ NOUVELLE M√âTHODE: Initialisation des Pok√©mon overworld
initializeOverworldPokemon() {
  console.log(`üåç [${this.scene.key}] === INITIALISATION POK√âMON OVERWORLD ===`);
  
  try {
    if (!this.overworldPokemonManager) {
      console.error(`‚ùå [${this.scene.key}] OverworldPokemonManager non initialis√©`);
      return;
    }
    
    // ‚úÖ UTILISER LA FONCTION EXISTANTE
    const currentZone = this.mapSceneToZone(this.scene.key);
    
    // ‚úÖ V√âRIFIER SI LA ZONE EST CONFIGUR√âE C√îT√â SERVEUR
    const configuredZones = ['village', 'lavandia'];
    
    if (!configuredZones.includes(currentZone)) {
      console.log(`‚ÑπÔ∏è [${this.scene.key}] Zone ${currentZone} non configur√©e pour les Pok√©mon overworld - skip`);
      return;
    }
    
    // Marquer comme initialis√©
    this.overworldPokemonInitialized = true;
    
    // Demander la synchronisation au serveur
    setTimeout(() => {
      if (this.networkManager?.room) {
        console.log(`üîÑ [${this.scene.key}] Demande synchronisation Pok√©mon overworld pour zone: ${currentZone}`);
        this.networkManager.room.send("requestOverworldSync");
      }
    }, 3000); // Apr√®s tous les autres syst√®mes
    
    console.log(`‚úÖ [${this.scene.key}] Pok√©mon overworld initialis√© pour zone: ${currentZone}`);
    
  } catch (error) {
    console.error(`‚ùå [${this.scene.key}] Erreur initialisation Pok√©mon overworld:`, error);
  }
}

  // üÜï NOUVELLE M√âTHODE: Initialisation du ClientEncounterManager
  initializeEncounterManager() {
    console.log(`üé≤ [${this.scene.key}] === INITIALISATION ENCOUNTER MANAGER ===`);

    try {
      // ‚úÖ V√©rifier que la carte est charg√©e
      if (!this.map) {
        console.warn(`‚ö†Ô∏è [${this.scene.key}] Carte pas encore charg√©e, retry dans 1s...`);
        setTimeout(() => this.initializeEncounterManager(), 1000);
        return;
      }

      // ‚úÖ Cr√©er le ClientEncounterManager avec les donn√©es de carte
      this.encounterManager = new ClientEncounterManager();
      
      // ‚úÖ Charger les donn√©es de carte Tiled
      const mapData = this.cache.tilemap.get(this.mapKey);
      if (mapData && mapData.data) {
        console.log(`üó∫Ô∏è [${this.scene.key}] Chargement donn√©es carte pour encounters...`);
        this.encounterManager.loadMapData(mapData.data);
        this.encounterInitialized = true;
        
        console.log(`‚úÖ [${this.scene.key}] EncounterManager initialis√© avec succ√®s!`);
        
        // ‚úÖ Exposer globalement pour debug
        window.encounterManager = this.encounterManager;
        
        // ‚úÖ Debug initial
        this.encounterManager.debugZones();
        
        // ‚úÖ Setup des handlers r√©seau pour les combats
        this.setupEncounterNetworkHandlers();
        
      } else {
        console.error(`‚ùå [${this.scene.key}] Impossible de r√©cup√©rer les donn√©es de carte`);
      }

    } catch (error) {
      console.error(`‚ùå [${this.scene.key}] Erreur initialisation EncounterManager:`, error);
    }
  }

  // üÜï NOUVELLE M√âTHODE: Setup des handlers r√©seau pour les encounters
setupEncounterNetworkHandlers() {
  if (!this.networkManager?.room) {
    console.warn(`‚ö†Ô∏è [${this.scene.key}] Pas de room pour setup encounter handlers`);
    return;
  }

  console.log(`üì° [${this.scene.key}] Setup handlers r√©seau encounters...`);

  // ‚úÖ SEUL HANDLER : Combat confirm√© par le serveur
  this.networkManager.onMessage("wildEncounter", (data) => {
    if (data.success) {
      this.handleWildEncounter(data);
    }
    // ‚úÖ AUCUN ELSE - SILENCE TOTAL SI √âCHEC
  });

  console.log(`‚úÖ [${this.scene.key}] Handlers encounter configur√©s`);
}

  // üÜï NOUVELLE M√âTHODE: Gestion des √©checs d'encounter
handleWildEncounter(data) {
  console.log(`üé≤ [${this.scene.key}] === ENCOUNTER CONFIRM√â ===`);
  console.log(`üëæ Pok√©mon: ${data.pokemon?.name} Niveau ${data.pokemon?.level}`);

  // ‚úÖ Arr√™ter le joueur
  const myPlayer = this.playerManager?.getMyPlayer();
  if (myPlayer && myPlayer.body) {
    myPlayer.body.setVelocity(0, 0);
    myPlayer.anims.play(`idle_${this.lastDirection}`, true);
  }

  // ‚úÖ SEULE NOTIFICATION VISIBLE : Combat confirm√©
  if (window.showGameNotification) {
    window.showGameNotification(
      `ENCOUNTER WITH ${data.pokemon?.name?.toUpperCase() || 'POK√âMON'}!`,
      'encounter',
      { 
        duration: 3000, 
        position: 'top-center',
        bounce: true 
      }
    );
  }

  // ‚úÖ Transition vers combat (TODO)
  this.time.delayedCall(1000, () => {
    console.log(`‚öîÔ∏è [${this.scene.key}] Transition vers combat (TODO)`);
    
    if (window.showGameNotification) {
      window.showGameNotification(
        `Combat non impl√©ment√© - continuez √† explorer !`,
        'info',
        { duration: 2000, position: 'bottom-center' }
      );
    }
  });
}

  // üÜï NOUVELLE M√âTHODE: Gestion des infos de zone
  handleEncounterZoneInfo(data) {
    console.log(`üìç [${this.scene.key}] Info zone encounter mise √† jour:`, data);
    
    // Optionnel: Afficher les infos de zone
    if (data.zoneId && window.showGameNotification) {
      window.showGameNotification(
        `Zone: ${data.zoneId} - ${data.encounterRate ? (data.encounterRate * 100).toFixed(1) + '%' : 'Pas d\'encounter'}`,
        'info',
        { duration: 2000, position: 'bottom-left' }
      );
    }
  }

  // üÜï NOUVELLE M√âTHODE: V√©rification des encounters lors du mouvement
  checkForEncounters(x, y) {
    // ‚úÖ V√©rifier si l'EncounterManager est pr√™t
    if (!this.encounterInitialized || !this.encounterManager) {
      return;
    }

    // ‚úÖ V√©rifier si on vient d'arriver (grace period)
    if (this.justArrivedAtZone) {
      return;
    }

    // ‚úÖ Throttling des v√©rifications
    const now = Date.now();
    if (now - this.lastEncounterCheck < this.encounterCheckInterval) {
      return;
    }
    this.lastEncounterCheck = now;

    // ‚úÖ V√©rifier encounter c√¥t√© client
    const encounterData = this.encounterManager.checkEncounterOnMove(x, y);
    
    if (encounterData.shouldTrigger) {
      console.log(`üé≤ [${this.scene.key}] Encounter possible d√©tect√© - envoi au serveur`);
      
      // ‚úÖ Envoyer au serveur pour validation et traitement
      if (this.networkManager?.room) {
        this.networkManager.room.send("triggerEncounter", {
          x: x,
          y: y,
          zoneId: encounterData.zoneId,
          method: encounterData.method,
          encounterRate: encounterData.encounterRate,
          timestamp: now,
          zone: this.zoneName
        });
      }
    }
  }

  // ‚úÖ M√âTHODE INCHANG√âE: Initialisation s√©curis√©e du syst√®me d'√©quipe
  initializeTeamSystemSafely() {
    console.log(`‚öîÔ∏è [${this.scene.key}] === INITIALISATION TEAM SYSTEM SIMPLE ===`);

    // ‚úÖ PROTECTION CONTRE LES TENTATIVES MULTIPLES
    if (this.teamSystemInitialized) {
      console.log(`‚ÑπÔ∏è [${this.scene.key}] Syst√®me d'√©quipe d√©j√† initialis√©`);
      return;
    }

    if (this.teamInitializationAttempts >= this.maxTeamInitAttempts) {
      console.warn(`‚ö†Ô∏è [${this.scene.key}] Trop de tentatives d'initialisation team - abandon`);
      return;
    }

    this.teamInitializationAttempts++;
    console.log(`‚öîÔ∏è [${this.scene.key}] Tentative ${this.teamInitializationAttempts}/${this.maxTeamInitAttempts}`);

    // ‚úÖ V√âRIFICATION SIMPLE: Juste v√©rifier que la gameRoom existe (comme inventaire)
    if (!this.networkManager?.room) {
      console.warn(`‚ö†Ô∏è [${this.scene.key}] Pas de room - retry dans 2s`);
      setTimeout(() => this.initializeTeamSystemSafely(), 2000);
      return;
    }

    // ‚úÖ V√âRIFIER SI D√âJ√Ä INITIALIS√â GLOBALEMENT
    if (window.TeamManager && window.TeamManager.isInitialized) {
      console.log(`‚ÑπÔ∏è [${this.scene.key}] TeamManager global d√©j√† initialis√© - r√©utilisation`);
      this.teamSystemInitialized = true;
      return;
    }

    try {
      console.log(`üöÄ [${this.scene.key}] Initialisation team system simple...`);
      
      // ‚úÖ UTILISER LA FONCTION DEPUIS MAIN.JS (comme pour inventaire/qu√™tes)
      if (typeof window.initTeamSystem === 'function') {
        console.log(`üéØ [${this.scene.key}] Appel window.initTeamSystem avec room...`);
        
        const teamManager = window.initTeamSystem(this.networkManager.room);
        
        if (teamManager) {
          console.log(`‚úÖ [${this.scene.key}] Syst√®me d'√©quipe initialis√© avec succ√®s!`);
          this.teamSystemInitialized = true;
          
          // ‚úÖ √âV√âNEMENT POUR SIGNALER QUE C'EST PR√äT
          if (typeof window.onSystemInitialized === 'function') {
            window.onSystemInitialized('team');
          }
          
          // ‚úÖ TEST SIMPLE apr√®s un d√©lai
          setTimeout(() => {
            console.log(`‚úÖ [${this.scene.key}] Test: TeamManager exists:`, !!window.TeamManager);
            console.log(`‚úÖ [${this.scene.key}] Test: TeamIcon exists:`, !!document.querySelector('#team-icon'));
          }, 1000);
          
        } else {
          console.error(`‚ùå [${this.scene.key}] window.initTeamSystem a retourn√© null`);
          this.handleTeamInitFailure();
        }
        
      } else {
        console.error(`‚ùå [${this.scene.key}] window.initTeamSystem n'existe pas!`);
        this.handleTeamInitFailure();
      }

    } catch (error) {
      console.error(`‚ùå [${this.scene.key}] Erreur initialisation team:`, error);
      this.handleTeamInitFailure();
    }
  }

  // ‚úÖ M√âTHODE INCHANG√âE: Gestion des √©checs d'initialisation
  handleTeamInitFailure() {
    if (this.teamInitializationAttempts < this.maxTeamInitAttempts) {
      console.log(`üîÑ [${this.scene.key}] Retry initialisation team dans 5s... (${this.teamInitializationAttempts}/${this.maxTeamInitAttempts})`);
      setTimeout(() => this.initializeTeamSystemSafely(), 5000);
    } else {
      console.error(`‚ùå [${this.scene.key}] √âchec d√©finitif d'initialisation du syst√®me d'√©quipe`);
      // Signaler l'√©chec mais ne pas bloquer le jeu
      if (typeof window.showGameNotification === 'function') {
        window.showGameNotification('Syst√®me d\'√©quipe indisponible', 'warning', {
          duration: 5000,
          position: 'top-center'
        });
      }
    }
  }

// ‚úÖ DANS BaseZoneScene.js - REMPLACE initializeTimeWeatherSystem() par :

initializeTimeWeatherSystem() {
  console.log(`üåç [${this.scene.key}] === CONNEXION AU SYST√àME M√âT√âO GLOBAL ===`);

  // ‚úÖ V√âRIFIER QUE LE SYST√àME GLOBAL EXISTE
  if (!window.globalWeatherManager) {
    console.error(`‚ùå [${this.scene.key}] GlobalWeatherManager manquant!`);
    this.setupWeatherFallback();
    return;
  }

  if (!window.globalWeatherManager.isInitialized) {
    console.warn(`‚ö†Ô∏è [${this.scene.key}] GlobalWeatherManager pas encore initialis√©, attente...`);
    
    // Attendre jusqu'√† 5 secondes
    this.waitForGlobalWeatherSystem(0, 25); // 25 x 200ms = 5 secondes
    return;
  }

  // ‚úÖ ENREGISTRER CETTE SC√àNE DANS LE SYST√àME GLOBAL
  this.connectToGlobalWeatherSystem();
}

waitForGlobalWeatherSystem(attempts, maxAttempts) {
  if (attempts >= maxAttempts) {
    console.error(`‚ùå [${this.scene.key}] Timeout attente syst√®me m√©t√©o global - fallback`);
    this.setupWeatherFallback();
    return;
  }

  console.log(`‚è≥ [${this.scene.key}] Attente syst√®me m√©t√©o global... (${attempts + 1}/${maxAttempts})`);

  setTimeout(() => {
    if (window.globalWeatherManager?.isInitialized) {
      console.log(`‚úÖ [${this.scene.key}] Syst√®me m√©t√©o global pr√™t!`);
      this.connectToGlobalWeatherSystem();
    } else {
      this.waitForGlobalWeatherSystem(attempts + 1, maxAttempts);
    }
  }, 200);
}

connectToGlobalWeatherSystem() {
  try {
    const zoneName = this.normalizeZoneName(this.scene.key);
    
    console.log(`üîó [${this.scene.key}] Connexion au syst√®me m√©t√©o global pour zone: ${zoneName}`);

    // ‚úÖ ENREGISTRER CETTE SC√àNE
    const success = window.globalWeatherManager.registerScene(this, zoneName);
    
    if (success) {
      // ‚úÖ MARQUER COMME ACTIVE
      window.globalWeatherManager.setActiveScene(this.scene.key);
      
      // ‚úÖ STOCKER LA R√âF√âRENCE
      this.globalWeatherManager = window.globalWeatherManager;
      this.weatherSystemType = 'global';
      
      console.log(`‚úÖ [${this.scene.key}] Connect√© au syst√®me m√©t√©o global`);
      
      // ‚úÖ INITIALISER L'ENVIRONNEMENT LOCAL
      this.initializeZoneEnvironment();
      
    } else {
      console.error(`‚ùå [${this.scene.key}] √âchec enregistrement dans le syst√®me global`);
      this.setupWeatherFallback();
    }

  } catch (error) {
    console.error(`‚ùå [${this.scene.key}] Erreur connexion syst√®me global:`, error);
    this.setupWeatherFallback();
  }
}

setupWeatherFallback() {
  console.log(`üîÑ [${this.scene.key}] Configuration m√©t√©o fallback...`);
  
  // ‚úÖ SYST√àME MINIMAL LOCAL
  this.globalWeatherManager = {
    isInitialized: true,
    fallbackMode: true,
    getCurrentTime: () => ({ hour: 12, isDayTime: true }),
    getCurrentWeather: () => ({ weather: 'clear', displayName: 'Ciel d√©gag√©' }),
    registerScene: () => false,
    setActiveScene: () => {},
    onZoneChanged: (zone) => console.log(`üå§Ô∏è [FALLBACK] Zone chang√©e: ${zone}`)
  };
  
  this.weatherSystemType = 'fallback';
  this.initializeZoneEnvironment();
  
  console.log(`‚úÖ [${this.scene.key}] M√©t√©o fallback configur√©e`);
}

onZoneChanged(newZoneName) {
  console.log(`üåç [${this.scene.key}] Zone chang√©e: ${newZoneName}`);
  
  // ‚úÖ NOTIFIER LE SYST√àME GLOBAL
  if (this.globalWeatherManager && typeof this.globalWeatherManager.onZoneChanged === 'function') {
    this.globalWeatherManager.onZoneChanged(newZoneName);
  }
  
  // ‚úÖ OU UTILISER LA FONCTION GLOBALE
  if (typeof window.onWeatherZoneChanged === 'function') {
    window.onWeatherZoneChanged(newZoneName);
  }
  
  // ‚úÖ NOUVEAU: Mettre √† jour le widget si n√©cessaire
  if (this.timeWeatherWidget) {
    // Le widget se mettra √† jour automatiquement via les callbacks
    console.log(`üïê [${this.scene.key}] Widget notifi√© du changement de zone`);
  }
}

debugWeatherSystem() {
  console.log(`üîç [${this.scene.key}] === DEBUG SYST√àME M√âT√âO GLOBAL ===`);
  
  const status = {
    weatherSystemType: this.weatherSystemType || 'unknown',
    hasGlobalManager: !!this.globalWeatherManager,
    globalSystemExists: !!window.globalWeatherManager,
    globalSystemInitialized: window.globalWeatherManager?.isInitialized || false,
    environment: this.currentEnvironment,
    zoneName: this.normalizeZoneName(this.scene.key),
    isRegistered: window.globalWeatherManager?.registeredScenes?.has(this.scene.key) || false,
    isActive: window.globalWeatherManager?.activeScenes?.has(this.scene.key) || false
  };
  
  console.log(`üìä Status m√©t√©o ${this.scene.key}:`, status);
  return status;
}

getCurrentTimeWeather() {
  if (window.globalWeatherManager?.isInitialized) {
    return {
      time: window.globalWeatherManager.getCurrentTime(),
      weather: window.globalWeatherManager.getCurrentWeather()
    };
  }
  
  // Fallback
  return {
    time: { hour: 12, isDayTime: true },
    weather: { weather: 'clear', displayName: 'Ciel d√©gag√©' }
  };
}
  // ‚úÖ M√âTHODE INCHANG√âE: Initialiser l'environnement de la zone
initializeZoneEnvironment() {
    const zoneName = this.normalizeZoneName(this.scene.key);
    this.currentEnvironment = zoneEnvironmentManager.getZoneEnvironment(zoneName);
    
    console.log(`üåç [${this.scene.key}] Environnement d√©tect√©: ${this.currentEnvironment}`);
    
    // Debug des informations d'environnement
    if (this.debugMode) {  // ‚Üê AJOUTER cette condition
        zoneEnvironmentManager.debugZoneEnvironment(zoneName);
    }
    
    this.environmentInitialized = true;
}

  // ‚úÖ M√âTHODE INCHANG√âE: Initialisation de l'InteractionManager
initializeInteractionManager() {
  // üïµÔ∏è Debug simple mais efficace
  const caller = new Error().stack.split('\n')[2]?.replace(/.*\//, '').substring(0, 100);
  console.log(`[BaseZoneScene] üö® INIT #${++this._initCount || 1} depuis: ${caller}`);
  
  // ‚úÖ Protection imm√©diate
  if (this.interactionManager?.isInitialized) {
    console.log('[BaseZoneScene] ‚ö†Ô∏è D√âJ√Ä INITIALIS√â - SKIP');
    return this.interactionManager;
  }
    
    if (!this.networkManager) {
      console.warn(`‚ö†Ô∏è [${this.scene.key}] Pas de NetworkManager pour InteractionManager`);
      return;
    }

    try {
     console.log(`üéØ [${this.scene.key}] === INITIALISATION BASE INTERACTION MANAGER ===`);

    // Cr√©er le BaseInteractionManager
    this.interactionManager = new BaseInteractionManager(this);
    
    // L'initialiser avec les dependencies
    this.interactionManager.initialize({
      networkManager: this.networkManager,
      networkInteractionHandler: this.networkManager?.interactionHandler,
      playerManager: this.playerManager,
      npcManager: this.npcManager,
      questSystem: window.questSystem || window.questSystemGlobal,
      shopSystem: this.scene?.shopIntegration?.getShopSystem() || window.shopSystem
    });

      console.log(`‚úÖ [${this.scene.key}] BaseInteractionManager initialis√© avec succ√®s`);

      // ‚úÖ Shop integration
      integrateShopToScene(this, this.networkManager);

      console.log(`‚úÖ [${this.scene.key}] Shop int√©gr√© via BaseInteractionManager`);
      // ‚úÖ AJOUTER : Connecter NetworkManager ‚Üí ObjectManager
      if (this.networkManager && this.objectManager) {
        console.log(`üîó [${this.scene.key}] Connexion NetworkManager ‚Üî ObjectManager...`);
        
        this.networkManager.onZoneObjects((data) => {
          if (this.objectManager) {
            this.objectManager.handleZoneObjectsReceived(data);
          }
        });
        
        console.log(`‚úÖ [${this.scene.key}] Connexion ObjectManager √©tablie`);
      }
    } catch (error) {
      console.error(`‚ùå [${this.scene.key}] Erreur initialisation BaseInteractionManager:`, error);
    }
  }

onPlayerReady(player) {
  console.log(`‚úÖ [${this.scene.key}] === PLAYER READY HOOK ===`);
  console.log(`üë§ Joueur pr√™t: ${player.sessionId} √† (${player.x}, ${player.y})`);
  
  // ‚úÖ MARQUER comme spawn√©
  this._playerFullySpawned = true;
  
  // ‚úÖ NOUVEAU: Mettre √† jour le flag global playerSpawned
  if (typeof window !== "undefined") {
    window.playerSpawned = true;
    console.log('[GLOBAL] playerSpawned = true (joueur pr√™t)');
    
    // ‚úÖ Si le loading screen est d√©j√† ferm√©, marquer playerReady
    if (window.loadingScreenClosed && !window.playerReady) {
      window.playerReady = true;
      console.log('[GLOBAL] playerReady = true (playerSpawned + loading d√©j√† ferm√©)');
    }
  }
  
  // ‚úÖ V√âRIFIER position valide
  if (player.x !== undefined && player.y !== undefined && player.x !== 0 && player.y !== 0) {
    this._playerPositionConfirmed = true;
    console.log(`üìç [${this.scene.key}] Position joueur confirm√©e: (${player.x}, ${player.y})`);
  }
  
  // ‚úÖ Si on attendait le spawn pour envoyer clientReady
  if (this._waitingForPlayerSpawn && !this._clientReadySent) {
    console.log(`üö¶ [${this.scene.key}] Joueur pr√™t, envoi clientReady maintenant`);
    this.time.delayedCall(500, () => {
      this.sendClientReady();
    });
  }
  
  // ‚úÖ D√âLAI S√âCURIS√â avant de pouvoir d√©marrer l'intro
  this.time.delayedCall(1000, () => {
    this._introReadyToStart = true;
    console.log(`üé¨ [${this.scene.key}] Intro maintenant autoris√©e √† d√©marrer`);
    
    // Si on a une intro en attente, la d√©marrer maintenant
    if (this._pendingIntroStart) {
      console.log(`üöÄ [${this.scene.key}] D√©marrage intro qui √©tait en attente`);
      this._pendingIntroStart();
      this._pendingIntroStart = null;
    }
  });
  
  // ‚úÖ Debug final
  console.log('üèÅ [BaseZoneScene] √âtat flags apr√®s onPlayerReady:', {
    playerSpawned: window?.playerSpawned,
    loadingScreenClosed: window?.loadingScreenClosed,
    playerReady: window?.playerReady
  });
}
  
initPlayerSpawnFromSceneData() {
  const data = this.scene.settings.data || {};
  const sessionId = this.mySessionId;
  
  if (!sessionId) {
    console.warn(`‚ö†Ô∏è [${this.scene.key}] sessionId manquant, retry dans 1s...`);
    setTimeout(() => {
      if (this.networkManager?.getSessionId()) {
        this.mySessionId = this.networkManager.getSessionId();
        this.initPlayerSpawnFromSceneData();
      }
    }, 1000);
    return;
  }
  
  // ‚úÖ FIX: Ne plus cr√©er le joueur ici, attendre le serveur
  console.log(`‚è∏Ô∏è [${this.scene.key}] Attente position serveur pour ${sessionId}`);
  
 
}
  // ‚úÖ M√âTHODE INCHANG√âE: Demander la zone au serveur
  requestServerZone() {
    console.log(`üìç [${this.scene.key}] === DEMANDE ZONE AU SERVEUR ===`);
    
    if (!this.networkManager?.room) {
      console.error(`‚ùå [${this.scene.key}] Pas de connexion pour demander la zone`);
      return;
    }
    
    this.networkManager.room.send("requestCurrentZone", {
      sceneKey: this.scene.key,
      timestamp: Date.now()
    });
    
    console.log(`üì§ [${this.scene.key}] Demande de zone envoy√©e au serveur`);
  }

  // ‚úÖ M√âTHODE INCHANG√âE: Setup des handlers r√©seau
  setupNetworkHandlers() {
    if (!this.networkManager) return;

        // ‚úÖ AJOUTER CES LIGNES AU D√âBUT :
    if (this.networkManager._networkHandlersSetup) {
      console.log(`‚ö†Ô∏è [${this.scene.key}] Network handlers d√©j√† configur√©s, skip`);
      return;
    }
    
    console.log(`üì° [${this.scene.key}] Configuration handlers r√©seau...`);

    // ‚úÖ Handler pour recevoir la zone officielle du serveur
    this.networkManager.onMessage("currentZone", (data) => {
      console.log(`üìç [${this.scene.key}] === ZONE RE√áUE DU SERVEUR ===`);
      console.log(`üéØ Zone serveur: ${data.zone}`);
      console.log(`üìä Position serveur: (${data.x}, ${data.y})`);
      
      const oldZone = this.zoneName;
      this.zoneName = data.zone;
      this.serverZoneConfirmed = true;
      
      console.log(`üîÑ [${this.scene.key}] Zone mise √† jour: ${oldZone} ‚Üí ${this.zoneName}`);
      
      const expectedScene = this.mapZoneToScene(data.zone);
      // Comparaison stricte :
      if (this.scene.key !== expectedScene) {
        console.warn(`[${this.scene.key}] üîÑ Redirection n√©cessaire ‚Üí ${expectedScene}`);
        this.redirectToCorrectScene(expectedScene, data);
        return;
      }
      
      if (this.playerManager) {
        this.playerManager.currentZone = this.zoneName;
        this.playerManager.forceResynchronization();
      }
      
      console.log(`‚úÖ [${this.scene.key}] Zone serveur confirm√©e: ${this.zoneName}`);
    });
    this.networkManager.onMessage("overworldPokemon", (data) => {
    //    console.log(`üåç [${this.scene.key}] Message overworld Pok√©mon re√ßu:`, data.type);
    // ‚úÖ AJOUTER : Handler pour objets de zone
    this.networkManager.onMessage("zoneObjects", (data) => {
      console.log(`üì¶ [${this.scene.key}] Objets de zone re√ßus:`, data);
      if (this.objectManager) {
        this.objectManager.handleZoneObjectsReceived(data);
      }
    });
    if (this.overworldPokemonManager) {
      this.overworldPokemonManager.handleServerMessage(data);
    } else {
      console.warn(`‚ö†Ô∏è [${this.scene.key}] OverworldPokemonManager pas pr√™t pour message ${data.type}`);
    }
  });

    // ‚úÖ AJOUTER APR√àS le handler "overworldPokemon" existant :
this.networkManager.send = (messageType, data) => {
  if (this.networkManager?.room) {
    this.networkManager.room.send(messageType, data);
  }
};
    // ‚úÖ Handler d'√©tat avec protection
    this.networkManager.onStateChange((state) => {
      if (!this.isSceneReady || !this.networkSetupComplete) {
        console.log(`‚è≥ [${this.scene.key}] State re√ßu mais sc√®ne pas pr√™te, ignor√©`);
        return;
      }
      
      if (!state || !state.players) return;
      if (!this.playerManager) return;

      this.synchronizeSessionId();
            if (this.pokemonFollowerManager && state && state.players) {
        this.updateFollowersFromState(state);
      }
      this.playerManager.updatePlayers(state);
      this.handleMyPlayerFromState();
    });

    // Handlers de zone WorldRoom
    this.setupWorldRoomHandlers();
    
    // Handler pour les quest statuses
    this.setupQuestStatusHandler();
    
    // Handlers existants (snap, disconnect)
    this.setupExistingHandlers();
    this.networkManager._networkHandlersSetup = true;

    
    // Forcer une premi√®re synchronisation
    this.time.delayedCall(500, () => {
      console.log(`üîÑ [${this.scene.key}] Forcer synchronisation initiale...`);
      if (this.networkManager.room) {
        this.networkManager.room.send("requestInitialState", { 
          zone: this.networkManager.getCurrentZone() 
        });
      }
    });
  }

  // ================================================================================================
// FIX POUR L'ERREUR shouldDisplayPlayer
// ================================================================================================

// REMPLACER la m√©thode updateFollowersFromState dans BaseZoneScene.js

updateFollowersFromState(state) {
  if (!this.pokemonFollowerManager || !this.isSceneReady || !this.playerManager) {
    return;
  }
  
  state.players.forEach((playerState, sessionId) => {
    // ‚úÖ FIX: V√©rifier que le joueur existe c√¥t√© PlayerManager
    const playerExists = this.playerManager.players.has(sessionId);
    
    // Logique simple : si le joueur existe dans PlayerManager, afficher son follower
    const shouldShowPlayer = playerExists;
    
    if (shouldShowPlayer && playerState.follower) {
      // Cr√©er ou mettre √† jour le follower
      if (!this.pokemonFollowerManager.hasFollower(sessionId)) {
        this.pokemonFollowerManager.createFollower(sessionId, {
          pokemonId: playerState.follower.pokemonId,
          nickname: playerState.follower.nickname,
          x: playerState.follower.x,
          y: playerState.follower.y,
          direction: playerState.follower.direction,
          isMoving: playerState.follower.isMoving,
          isShiny: playerState.follower.isShiny,
          level: playerState.follower.level
        });
      } else {
        this.pokemonFollowerManager.updateFollower(sessionId, {
          x: playerState.follower.x,
          y: playerState.follower.y,
          direction: playerState.follower.direction,
          isMoving: playerState.follower.isMoving
        });
      }
    } else {
      // Supprimer le follower si le joueur n'est plus dans la zone ou n'a plus de follower
      if (this.pokemonFollowerManager.hasFollower(sessionId)) {
        this.pokemonFollowerManager.removeFollower(sessionId);
      }
    }
  });
}

// ‚úÖ AJOUTER cette m√©thode fallback dans BaseZoneScene
shouldShowPlayerFallback(sessionId, playerState) {
  // Toujours afficher notre propre joueur
  if (sessionId === this.mySessionId) {
    return true;
  }
  
  // Pour les autres joueurs, v√©rifier la zone
  if (playerState.currentZone && this.zoneName) {
    return playerState.currentZone === this.zoneName;
  }
  
  // Si pas d'info de zone, afficher par d√©faut
  return true;
}
  
  // ‚úÖ M√âTHODE INCHANG√âE: Redirection vers la bonne sc√®ne
  redirectToCorrectScene(correctScene, serverData) {
    console.warn('=== [DEBUG] REDIRECTION SCENE ===');
    console.warn('FROM:', this.scene.key, 'TO:', correctScene);
    console.warn('serverData:', serverData);

    const transitionData = {
      fromZone: serverData.zone,
      fromTransition: true,
      networkManager: this.networkManager,
      mySessionId: this.mySessionId,
      spawnX: serverData.x,
      spawnY: serverData.y,
      serverForced: true,
      preservePlayer: true,
      weatherData: this.dayNightWeatherManager?.getCurrentStateForTransition()

    };

    if (window.showLoadingOverlay) window.showLoadingOverlay("Changement de zone...");

    this.scene.start(correctScene, transitionData);
  }

  // ‚úÖ M√âTHODE INCHANG√âE: Synchronisation sessionId
  synchronizeSessionId() {
    if (!this.networkManager) return;
    
    const currentNetworkSessionId = this.networkManager.getSessionId();
    if (this.mySessionId !== currentNetworkSessionId) {
      console.warn(`‚ö†Ô∏è [${this.scene.key}] SessionId d√©synchronis√©: ${this.mySessionId} ‚Üí ${currentNetworkSessionId}`);
      this.mySessionId = currentNetworkSessionId;
      
      if (this.playerManager) {
        this.playerManager.setMySessionId(this.mySessionId);
      }
    }
  }

  // ‚úÖ M√âTHODE INCHANG√âE: Gestion du joueur local depuis le state
  handleMyPlayerFromState() {
    if (this.myPlayerReady) return;
    
    const myPlayer = this.playerManager.getMyPlayer();
    if (myPlayer && !this.myPlayerReady) {
      this.myPlayerReady = true;
      console.log(`‚úÖ [${this.scene.key}] Joueur local trouv√©: ${this.mySessionId}`);
      if (window.hideLoadingOverlay) window.hideLoadingOverlay();

      if (!myPlayer.visible) {
        console.log(`üîß [${this.scene.key}] Forcer visibilit√© joueur local`);
        myPlayer.setVisible(true);
        myPlayer.setActive(true);
      }
      
      this.cameraManager.followPlayer(myPlayer);
      this.cameraFollowing = true;
      this.positionPlayer(myPlayer);
      
      if (typeof this.onPlayerReady === 'function') {
        this.onPlayerReady(myPlayer);
      }
    }
  }

  // ‚úÖ M√âTHODE INCHANG√âE: Setup des handlers WorldRoom
  setupWorldRoomHandlers() {
    console.log(`üì° [${this.scene.key}] === SETUP WORLD ROOM HANDLERS ===`);

    // ‚úÖ AJOUTER CES LIGNES AU D√âBUT :
    if (this.networkManager._worldHandlersSetup) {
      console.log(`‚ö†Ô∏è [${this.scene.key}] World handlers d√©j√† configur√©s, skip`);
      return;
    }

    this.networkManager.onZoneData((data) => {
      console.log(`üó∫Ô∏è [${this.scene.key}] Zone data re√ßue:`, data);
      this.handleZoneData(data);
    });

    this.networkManager.onNpcList((npcs) => {
      console.log(`ü§ñ [${this.scene.key}] === HANDLER NPCS APPEL√â ===`);
      console.log(`üìä NPCs re√ßus: ${npcs.length}`);
      
      if (!this.npcManager) {
        console.error(`‚ùå [${this.scene.key}] NpcManager MANQUANT !`);
        return;
      }
      
      if (!npcs || npcs.length === 0) {
        console.log(`‚ÑπÔ∏è [${this.scene.key}] Aucun NPC √† spawner`);
        return;
      }
      
      console.log(`‚úÖ [${this.scene.key}] APPEL spawnNpcs() avec ${npcs.length} NPCs`);
      this.npcManager.spawnNpcs(npcs);
    });

    this.networkManager.onTransitionSuccess((result) => {
      console.log(`‚úÖ [${this.scene.key}] Transition r√©ussie:`, result);
      
      const targetScene = this.mapZoneToScene(result.currentZone || result.zone || result.targetZone);
      
      if (this.scene.key !== targetScene) {
        console.warn(`[Transition] Redirection auto vers ${targetScene}`);
        this.scene.start(targetScene, {
          fromZone: this.zoneName,
          fromTransition: true,
          networkManager: this.networkManager,
          mySessionId: this.mySessionId,
          spawnX: result.position?.x,
          spawnY: result.position?.y,
          preservePlayer: true
        });
      }
    });

    this.networkManager.onTransitionError((result) => {
      console.error(`‚ùå [${this.scene.key}] Transition √©chou√©e:`, result);
      this.handleTransitionError(result);
    });

    // ‚úÖ AJOUTER CETTE LIGNE √Ä LA FIN :
    this.networkManager._worldHandlersSetup = true;
    console.log(`‚úÖ [${this.scene.key}] Tous les handlers WorldRoom configur√©s`);
}

  // ‚úÖ M√âTHODE INCHANG√âE: Setup handler quest statuses
  setupQuestStatusHandler() {
    console.log(`üéØ [${this.scene.key}] Configuration handler quest statuses...`);
    
    this.networkManager.onMessage("questStatuses", (data) => {
      console.log(`üéØ [${this.scene.key}] Quest statuses re√ßus:`, data);
      
      if (this.npcManager && data.questStatuses && data.questStatuses.length > 0) {
        console.log(`‚úÖ [${this.scene.key}] Mise √† jour des indicateurs de qu√™te`);
        this.npcManager.updateQuestIndicators(data.questStatuses);
      }
    });
  }
  
  // ‚úÖ M√âTHODE MODIFI√âE: Setup des handlers existants avec nettoyage team
  setupExistingHandlers() {
    this.networkManager.onSnap((data) => {
      if (this.playerManager) {
        this.playerManager.snapMyPlayerTo(data.x, data.y);
      }
    });
    
    this.networkManager.onDisconnect(() => {
      this.updateInfoText(`PokeWorld MMO\n${this.scene.key}\nDisconnected from WorldRoom`);
      
      // ‚úÖ NOUVEAU: Nettoyer le team system si d√©connexion
      if (window.TeamManager) {
        console.log(`üßπ [${this.scene.key}] Nettoyage TeamManager suite √† d√©connexion`);
        if (typeof window.TeamManager.destroy === 'function') {
          window.TeamManager.destroy();
        }
      }
      this.teamSystemInitialized = false;
    });
  }

  // ‚úÖ M√âTHODE INCHANG√âE: Initialisation du syst√®me d'inventaire
  initializeInventorySystem() {
    if (window.inventorySystem) {
      console.log(`[${this.scene.key}] R√©utilisation de l'inventaire global existant`);
      if (this.networkManager?.room) {
        window.inventorySystem.gameRoom = this.networkManager.room;
        window.inventorySystem.setupServerListeners();
      }
      this.inventorySystem = window.inventorySystem;
      this.inventoryInitialized = true;
      return;
    }

    try {
      console.log(`üéí [${this.scene.key}] Initialisation du syst√®me d'inventaire...`);
      this.inventorySystem = new InventorySystem(this, this.networkManager.room);

      if (this.inventorySystem.inventoryUI) {
        this.inventorySystem.inventoryUI.currentLanguage = 'en';
      }

      window.inventorySystem = this.inventorySystem;
      window.inventorySystemGlobal = this.inventorySystem;

      this.setupInventoryEventHandlers();

      if (typeof window.connectInventoryToServer === 'function') {
        window.connectInventoryToServer(this.networkManager.room);
      }

      this.inventoryInitialized = true;
      console.log(`‚úÖ [${this.scene.key}] Syst√®me d'inventaire initialis√©`);

      this.time.delayedCall(2000, () => {
        this.testInventoryConnection();
      });

    } catch (error) {
      console.error(`‚ùå [${this.scene.key}] Erreur initialisation inventaire:`, error);
    }
  }

  testInventoryConnection() {
    if (!this.inventorySystem || !this.networkManager?.room) {
      console.warn(`‚ö†Ô∏è [${this.scene.key}] Cannot test inventory: no system or room`);
      return;
    }

    console.log(`üß™ [${this.scene.key}] Test de connexion inventaire...`);
    this.inventorySystem.requestInventoryData();
  }
  
  setupInventoryEventHandlers() { }
  
  // ‚úÖ M√âTHODE INCHANG√âE: Setup du handler joueur pr√™t
  setupPlayerReadyHandler() {
    if (!this.playerManager) return;
    
    this.playerManager.onMyPlayerReady((myPlayer) => {
      if (!this.myPlayerReady) {
        this.myPlayerReady = true;
        console.log(`‚úÖ [${this.scene.key}] Mon joueur est pr√™t:`, myPlayer.x, myPlayer.y);

        if (this.cameraManager) {
          this.cameraManager.followPlayer(myPlayer);
          this.cameraFollowing = true;
        } else {
          console.warn(`‚ö†Ô∏è [${this.scene.key}] CameraManager pas encore pr√™t, attente...`);
          this.time.delayedCall(500, () => {
            if (this.cameraManager) {
              console.log(`üîÑ [${this.scene.key}] CameraManager pr√™t, activation cam√©ra`);
              this.cameraManager.followPlayer(myPlayer);
              this.cameraFollowing = true;
            } else {
              console.error(`‚ùå [${this.scene.key}] CameraManager toujours absent apr√®s 500ms`);
            }
          });
        }

        this.positionPlayer(myPlayer);
        
        if (typeof this.onPlayerReady === 'function') {
          this.onPlayerReady(myPlayer);
        }
      }
    });
  }

  // ‚úÖ M√âTHODE INCHANG√âE: V√©rification de l'√©tat r√©seau
  verifyNetworkState() {
    if (!this.networkManager) {
      console.error(`‚ùå [${this.scene.key}] NetworkManager manquant`);
      return;
    }
    
    console.log(`üîç [${this.scene.key}] V√©rification √©tat r√©seau...`);
    
    this.networkManager.debugState();
    this.networkManager.checkZoneSynchronization(this.scene.key);
    
    if (this.playerManager) {
      this.time.delayedCall(500, () => {
        this.playerManager.forceResynchronization();
      });
    }
  }

  // ‚úÖ M√âTHODE CORRIG√âE: Position du joueur avec priorit√© serveur
positionPlayer(player) {
  const initData = this.scene.settings.data;
  
  console.log(`üìç [${this.scene.key}] Positionnement joueur...`);
  console.log(`üìä InitData:`, initData);
  console.log(`üë§ Position actuelle du joueur: (${player.x}, ${player.y})`);
  
  // ‚úÖ PRIORIT√â 1: Transition avec donn√©es explicites (M√äME SI le joueur a d√©j√† une position)
  if (initData?.fromTransition && initData?.spawnX !== undefined && initData?.spawnY !== undefined) {
    console.log(`üìç [${this.scene.key}] OVERRIDE - Position depuis transition: ${initData.spawnX}, ${initData.spawnY}`);
    player.x = initData.spawnX;
    player.y = initData.spawnY;
    player.targetX = initData.spawnX;
    player.targetY = initData.spawnY;
    
    // Forcer la mise √† jour visuelle
    player.setPosition(initData.spawnX, initData.spawnY);
  } 
  // ‚úÖ PRIORIT√â 2: Si le joueur a d√©j√† une position valide du serveur ET qu'on n'est pas en transition
  else if (player.x !== undefined && player.y !== undefined && 
           player.x !== 0 && player.y !== 0) {
    console.log(`üìç [${this.scene.key}] Position serveur conserv√©e: (${player.x}, ${player.y})`);
  } 
  // ‚úÖ PRIORIT√â 3: Fallback seulement si vraiment aucune position
  else {
    console.warn(`‚ö†Ô∏è [${this.scene.key}] FALLBACK - Aucune position valide trouv√©e`);
    const defaultPos = this.getDefaultSpawnPosition(initData?.fromZone);
    console.log(`üìç [${this.scene.key}] Position par d√©faut: ${defaultPos.x}, ${defaultPos.y}`);
    player.x = defaultPos.x;
    player.y = defaultPos.y;
    player.targetX = defaultPos.x;
    player.targetY = defaultPos.y;
  }

  // Setup final du joueur
  player.setVisible(true);
  player.setActive(true);
  player.setDepth(5);

  if (player.indicator) {
    player.indicator.x = player.x;
    player.indicator.y = player.y - 32;
    player.indicator.setVisible(true);
  }

  if (this.networkManager && this.networkManager.isConnected) {
    this.networkManager.sendMove(player.x, player.y, 'down', false);
  }

  this.onPlayerPositioned(player, initData);
}

  // ‚úÖ M√âTHODE INCHANG√âE: Affichage d'√©tat d'erreur
  showErrorState(message) {
    if (window.hideLoadingOverlay) window.hideLoadingOverlay();

    this.updateInfoText(`PokeWorld MMO\n${this.scene.key}\n${message}`);
    
    this.time.delayedCall(5000, () => {
      if (!this.networkSetupComplete) {
        console.log(`üîÑ [${this.scene.key}] Tentative de reconnexion...`);
        this.initializeWithExistingConnection();
      }
    });
  }

  // ‚úÖ M√âTHODE INCHANG√âE: Mise √† jour du texte d'info
  updateInfoText(text) {
    if (this.infoText) {
      this.infoText.setText(text);
    }
  }

  // ‚úÖ M√âTHODE MODIFI√âE: Update principal avec v√©rification d'encounters
  update() {
    TransitionIntegration.updateTransitions(this);
    
    if (this.time.now % 1000 < 16) {
      this.checkPlayerState();
    }

    if (this.playerManager) this.playerManager.update();
    if (this.cameraManager) this.cameraManager.update();
// ‚úÖ CORRIGER EN :
if (this.overworldPokemonManager) {
    this.overworldPokemonManager.update(this.game.loop.delta);
}
    
    if (this.sys.animatedTiles && typeof this.sys.animatedTiles.update === 'function') {
      this.sys.animatedTiles.update();
    }

    const myPlayer = this.playerManager?.getMyPlayer();
    if (myPlayer && this.coordsText) {
      this.coordsText.setText(`Player: x:${Math.round(myPlayer.x)}, y:${Math.round(myPlayer.y)}`);
    }

    if (!this.networkManager?.getSessionId()) return;
    const myPlayerState = this.networkManager.getPlayerState(this.networkManager.getSessionId());
    if (!myPlayerState) return;
    if (this.pokemonFollowerManager) {
      this.pokemonFollowerManager.update();
    }
    this.handleMovement(myPlayerState);

    // üÜï NOUVEAU: V√©rifier les encounters pendant le mouvement
    if (myPlayer && myPlayer.isMovingLocally) {
     // this.checkForEncounters(myPlayer.x, myPlayer.y);
    }
  }

  isSceneStillValid(expectedScene) {
    return this.scene && this.scene.key === expectedScene && this.scene.isActive();
  }
  
  // ‚úÖ M√âTHODE MODIFI√âE: Cleanup avec TeamManager, EncounterManager et MovementBlockHandler
  cleanup() {
    TransitionIntegration.cleanupTransitions(this);

    if (this.scene.isActive(this.scene.key)) {
      this.scene.stop(this.scene.key);
      console.log(`[${this.scene.key}] ‚õî Scene stopp√©e (cleanup)`);
    }
      // ‚úÖ NOUVEAU: Nettoyer le widget temps/m√©t√©o
  if (this.timeWeatherWidget) {
    this.timeWeatherWidget.destroy();
    this.timeWeatherWidget = null;
    console.log(`üßπ [${this.scene.key}] Widget temps/m√©t√©o nettoy√©`);
  }
  // ‚úÖ NOUVEAU: Nettoyer les Pok√©mon overworld
    if (this.overworldPokemonManager) {
      this.overworldPokemonManager.cleanup();
      this.overworldPokemonManager = null;
      this.overworldPokemonInitialized = false;
      console.log(`üßπ [${this.scene.key}] OverworldPokemonManager nettoy√©`);
    }
    if (this.objectManager) {
      this.objectManager.destroy();
      this.objectManager = null;
      console.log(`üßπ [${this.scene.key}] ObjectManager nettoy√©`);
    }
    if (this.networkManager?.room) {
      this.networkManager.room.removeAllListeners("currentZone");
      this.networkManager.room.removeAllListeners("snap");
      this.networkManager.room.removeAllListeners("questStatuses");
      // üÜï NOUVEAU: Nettoyer les handlers d'encounter
      this.networkManager.room.removeAllListeners("wildEncounter");
      this.networkManager.room.removeAllListeners("encounterFailed");
      this.networkManager.room.removeAllListeners("encounterZoneInfo");
      console.log(`[${this.scene.key}] üéß Nettoyage des √©couteurs r√©seau`);
    }
    if (this.pokemonFollowerManager) {
      this.pokemonFollowerManager.cleanup();
      this.pokemonFollowerManager = null;
    }
    console.log(`üßπ [${this.scene.key}] Nettoyage optimis√©...`);

    // AJOUTER JUSTE APR√àS :
    // ‚úÖ D√âSENREGISTRER DU SYST√àME M√âT√âO GLOBAL
    if (window.globalWeatherManager && this.scene.key) {
      console.log(`üå§Ô∏è [${this.scene.key}] D√©senregistrement du syst√®me m√©t√©o global`);
      window.globalWeatherManager.unregisterScene(this.scene.key);
    }
    
    // ‚úÖ NETTOYER LES R√âF√âRENCES LOCALES
    this.globalWeatherManager = null;
    this.weatherSystemType = null;
    const isTransition = this.networkManager && this.networkManager.isTransitionActive;
    
    if (!isTransition) {
      if (this.playerManager) {
        this.playerManager.clearAllPlayers();
      }
    } else {
      console.log(`üîÑ [${this.scene.key}] Nettoyage l√©ger pour transition`);
    }

    // ‚úÖ NOUVEAU: Nettoyer l'InteractionManager
    if (this.interactionManager) {
      this.interactionManager.destroy();
      this.interactionManager = null;
    }

    // ‚úÖ NOUVEAU: Nettoyage conditionnel du TeamManager
    if (this.teamSystemInitialized && window.TeamManager) {
      // Ne nettoyer que si on n'est pas en transition
      if (!isTransition) {
        console.log(`üßπ [${this.scene.key}] Nettoyage TeamManager (non-transition)`);
        if (typeof window.TeamManager.destroy === 'function') {
          window.TeamManager.destroy();
        }
        this.teamSystemInitialized = false;
      } else {
        console.log(`üîÑ [${this.scene.key}] TeamManager conserv√© pour transition`);
      }
    }

    // üîí NOUVEAU: Nettoyage MovementBlockHandler
    if (this.movementBlockHandlerInitialized) {
      console.log(`üßπ [${this.scene.key}] Nettoyage MovementBlockHandler...`);
      
      // ‚úÖ Reset des flags pour cette sc√®ne
      this.movementBlockHandlerInitialized = false;
      this.movementBlockInitAttempts = 0;
      
      // ‚úÖ Reset du MovementBlockHandler si c'est notre sc√®ne
      if (movementBlockHandler && movementBlockHandler.scene === this) {
        console.log(`üßπ [${this.scene.key}] Reset MovementBlockHandler pour cette sc√®ne`);
        movementBlockHandler.reset();
      }
    }
    if (this.questModuleInitialized && !isTransition) {
      console.log(`üßπ [${this.scene.key}] Nettoyage Quest Module (non-transition)`);
      
      // Le nouveau syst√®me se nettoie automatiquement
      // Juste reset nos flags locaux
      this.questModuleInitialized = false;
      this.questModuleAttempts = 0;
    } else if (isTransition) {
      console.log(`üîÑ [${this.scene.key}] Quest Module conserv√© pour transition`);
    }
    // üîí NOUVEAU: Nettoyage InputManager
    if (this.inputManager) {
      console.log(`üßπ [${this.scene.key}] Nettoyage InputManager...`);
      this.inputManager.destroy();
      this.inputManager = null;
      this.inputManagerReady = false;
    }
    
    // üÜï NOUVEAU: Nettoyer l'EncounterManager
    if (this.encounterManager) {
      // L'EncounterManager n'a pas besoin de cleanup sp√©cial, juste le d√©r√©f√©rencer
      this.encounterManager = null;
      this.encounterInitialized = false;
      console.log(`üßπ [${this.scene.key}] EncounterManager nettoy√©`);
    }

    if (this.npcManager) {
      this.npcManager.clearAllNpcs();
    }
    
    
    if (this.animatedObjects) {
      this.animatedObjects.clear(true, true);
      this.animatedObjects = null;
    }

    this.time.removeAllEvents();
    this.cameraFollowing = false;
    this.myPlayerReady = false;
    this.isSceneReady = false;
    this.networkSetupComplete = false;
    
    console.log(`‚úÖ [${this.scene.key}] Nettoyage termin√©`);
  }

  setupCleanupHandlers() {
    this.events.on('shutdown', () => {
      console.log(`üì§ [${this.scene.key}] Shutdown - nettoyage`);
      this.cleanup();
    });
    
    this.events.on('destroy', () => {
      console.log(`üíÄ [${this.scene.key}] Destroy - nettoyage final`);
      this.cleanup();
    });
  }

  // üîí M√âTHODE MODIFI√âE: Gestion du mouvement avec MovementBlockHandler
  handleMovement(myPlayerState) {
    const myPlayer = this.playerManager.getMyPlayer();
    if (!myPlayer || !myPlayer.body) return;

    // üîí √âTAPE 1: V√âRIFICATION BLOCAGE AVANT TOUT via InputManager
    if (this.inputManager && !this.inputManager.areInputsEnabled()) {
      // Arr√™ter imm√©diatement le joueur
      myPlayer.body.setVelocity(0, 0);
      myPlayer.anims.play(`idle_${this.lastDirection}`, true);
      myPlayer.isMovingLocally = false;
      
      // Envoyer l'arr√™t au serveur si pas encore fait
      const now = Date.now();
      if (!this.lastStopTime || now - this.lastStopTime > 100) {
        this.networkManager.sendMove(
          myPlayer.x,
          myPlayer.y,
          this.lastDirection,
          false  // isMoving = false
        );
        this.lastStopTime = now;
      }
      
      return; // ‚úÖ SORTIR - Pas de mouvement autoris√©
    }

    // üîí √âTAPE 2: TRAITEMENT NORMAL DU MOUVEMENT
    const speed = 80;
    let vx = 0, vy = 0;
    let inputDetected = false, direction = null;
    
    // üîí PRIORIT√â 1: Utiliser l'InputManager s'il est pr√™t
    if (this.inputManager && this.inputManagerReady) {
      if (this.inputManager.isKeyDown('left')) {
        vx = -speed; inputDetected = true; direction = 'left';
      } else if (this.inputManager.isKeyDown('right')) {
        vx = speed; inputDetected = true; direction = 'right';
      }
      if (this.inputManager.isKeyDown('up')) {
        vy = -speed; inputDetected = true; direction = 'up';
      } else if (this.inputManager.isKeyDown('down')) {
        vy = speed; inputDetected = true; direction = 'down';
      }
    } else {
      // üîí FALLBACK vers cursors directs si InputManager pas pr√™t
      console.log(`‚ö†Ô∏è [${this.scene.key}] Fallback vers cursors directs`);
      
      if (this.cursors?.left.isDown || this.wasd?.A.isDown) {
        vx = -speed; inputDetected = true; direction = 'left';
      } else if (this.cursors?.right.isDown || this.wasd?.D.isDown) {
        vx = speed; inputDetected = true; direction = 'right';
      }
      if (this.cursors?.up.isDown || this.wasd?.W.isDown) {
        vy = -speed; inputDetected = true; direction = 'up';
      } else if (this.cursors?.down.isDown || this.wasd?.S.isDown) {
        vy = speed; inputDetected = true; direction = 'down';
      }
    }
    
    let actuallyMoving = inputDetected;
    myPlayer.body.setVelocity(vx, vy);
    
    // ‚úÖ NORMALISER LA VITESSE DIAGONALE
    if (vx !== 0 && vy !== 0) {
      myPlayer.body.setVelocity(vx * 0.707, vy * 0.707); // ‚àö2 ‚âà 0.707
    }
    
    if (inputDetected && direction) {
      this.lastDirection = direction;
      
      if (actuallyMoving) {
        myPlayer.anims.play(`walk_${direction}`, true);
        myPlayer.isMovingLocally = true;
      } else {
        myPlayer.anims.play(`idle_${direction}`, true);
        myPlayer.isMovingLocally = false;
      }
    } else {
      myPlayer.anims.play(`idle_${this.lastDirection}`, true);
      myPlayer.isMovingLocally = false;
    }
    
    if (inputDetected) {
      const now = Date.now();
      if (!this.lastMoveTime || now - this.lastMoveTime > 50) {
        this.networkManager.sendMove(
          myPlayer.x,
          myPlayer.y,
          direction,
          actuallyMoving
        );
        this.lastMoveTime = now;
      }
    } 
    // ‚úÖ ENVOYER AUSSI QUAND ON S'ARR√äTE !
    else {
      const now = Date.now();
      if (!this.lastStopTime || now - this.lastStopTime > 100) {
        this.networkManager.sendMove(
          myPlayer.x,
          myPlayer.y,
          this.lastDirection,
          false  // ‚Üê isMoving = false
        );
        this.lastStopTime = now;
      }
    }
  }

  // === M√âTHODES UTILITAIRES CONSERV√âES ===

 // Remplacer les m√©thodes mapSceneToZone et mapZoneToScene
mapSceneToZone(sceneName) {
  return sceneToZone(sceneName);
}

mapZoneToScene(zoneName) {
  return zoneToScene(zoneName);
}

  normalizeZoneName(sceneName) {
    return this.mapSceneToZone(sceneName);
  }

  getProperty(object, propertyName) {
    if (!object.properties) return null;
    const prop = object.properties.find(p => p.name === propertyName);
    return prop ? prop.value : null;
  }

  // ‚úÖ M√âTHODE INCHANG√âE: Chargement de la carte
  loadMap() {
    console.log('‚Äî DEBUT loadMap ‚Äî');
    this.map = this.make.tilemap({ key: this.mapKey });

    let needsLoading = false;
    this.map.tilesets.forEach(tileset => {
      if (!this.textures.exists(tileset.name)) {
        this.load.image(tileset.name, `assets/sprites/${tileset.name}.png`);
        needsLoading = true;
      }
    });

    const finishLoad = () => {
      this.phaserTilesets = this.map.tilesets.map(ts => {
        return this.map.addTilesetImage(ts.name, ts.name);
      });
      
      this.layers = {};
      const depthOrder = {
        'BelowPlayer': 1,
        'BelowPlayer2': 2,
        'World': 3,
        'AbovePlayer': 4,
        'Grass': 1.5
      };

      this.map.layers.forEach(layerData => {
        const layer = this.map.createLayer(layerData.name, this.phaserTilesets, 0, 0);
        this.layers[layerData.name] = layer;
        
        const depth = depthOrder[layerData.name] ?? 0;
        layer.setDepth(depth);
      });

      if (this.sys.animatedTiles) {
        this.sys.animatedTiles.init(this.map);
      }

      Object.values(this.layers).forEach(layer => {
        if (layer && typeof layer.setCollisionByProperty === 'function') {
          layer.setCollisionByProperty({ collides: true });
        }
      });

      this.setupAnimatedObjects();
      this.setupScene();

      // üÜï NOUVEAU: Initialiser l'EncounterManager apr√®s le chargement de la carte
      setTimeout(() => {
        this.initializeEncounterManager();
      }, 500);
    };

    if (needsLoading) {
      this.load.once('complete', finishLoad);
      this.load.start();
    } else {
      finishLoad();
    }
  }

  setupAnimatedObjects() {
    if (this.map.objects && this.map.objects.length > 0) {
      this.map.objects.forEach(objectLayer => {
        objectLayer.objects.forEach(obj => {
          if (obj.gid) {
            const sprite = this.add.sprite(obj.x, obj.y - obj.height, 'dude');
            if (obj.properties && obj.properties.length > 0) {
              const animationProp = obj.properties.find(prop => prop.name === 'animation');
              if (animationProp && animationProp.value) {
                if (this.anims.exists(animationProp.value)) {
                  sprite.play(animationProp.value);
                }
              }
            }
            if (!this.animatedObjects) {
              this.animatedObjects = this.add.group();
            }
            this.animatedObjects.add(sprite);
          }
        });
      });
    }
  }

  
  setupScene() {
    console.log('‚Äî DEBUT setupScene ‚Äî');
    this.cameras.main.setBounds(0, 0, this.map.widthInPixels, this.map.heightInPixels);
    
    const baseWidth = this.scale.width;
    const baseHeight = this.scale.height;
    const zoomX = baseWidth / this.map.widthInPixels;
    const zoomY = baseHeight / this.map.heightInPixels;
    const zoom = Math.min(zoomX, zoomY);
    
    this.cameras.main.setZoom(zoom);
    this.cameras.main.setBackgroundColor('#2d5a3d');
    this.cameras.main.setRoundPixels(true);
    
    this.cameraManager = new CameraManager(this);
    
    // ‚úÖ PHYSICS WORLD SETUP
    this.physics.world.setBounds(0, 0, this.map.widthInPixels, this.map.heightInPixels);
    
    // ‚úÖ STOCKER LES LAYERS POUR COLLISIONS
    // ‚úÖ STOCKER LES LAYERS POUR COLLISIONS
this.collisionLayers = [];
Object.values(this.layers).forEach(layer => {
  if (layer && layer.layer) {
    const layerName = layer.layer.name.toLowerCase();
    // Inclure les layers "world" ET "bellowplayer2"
    if (layerName.includes('world') || layerName.includes('bellowplayer2')) {
      layer.setCollisionByProperty({ collides: true });
      this.collisionLayers.push(layer);
      console.log(`[BaseZoneScene] Collisions activ√©es pour: ${layer.layer.name}`);
    }
  }
});
    
    // üî• NOUVEAU: CR√âER LES COLLIDERS
    this.time.delayedCall(100, () => {
      this.setupPlayerCollisions();
    });
// üîß FIX: INT√âGRER LA MUSIQUE ICI, quand tout est pr√™t
this.time.delayedCall(300, () => {
    console.log(`üéµ [${this.scene.key}] === INT√âGRATION MUSIQUE (D√âLAI) ===`);
    try {
        integrateMusicToScene(this); // ‚Üê UTILISER L'IMPORT STATIQUE
        console.log(`‚úÖ [${this.scene.key}] Musique int√©gr√©e avec succ√®s`);
    } catch (error) {
        console.error(`‚ùå [${this.scene.key}] Erreur int√©gration musique:`, error);
    }
});
  }

  getDefaultSpawnPosition(fromZone) {
    return { x: 100, y: 100 };
  }

onPlayerPositioned(player, initData) {
  console.log(`üìç [${this.scene.key}] Joueur positionn√©`);
  
  // ‚úÖ MARQUER CETTE SC√àNE COMME ACTIVE DANS LE SYST√àME GLOBAL
  if (this.globalWeatherManager && this.globalWeatherManager.setActiveScene) {
    this.globalWeatherManager.setActiveScene(this.scene.key);
    console.log(`üéØ [${this.scene.key}] Sc√®ne marqu√©e comme active dans le syst√®me m√©t√©o`);
  }
    // ‚úÖ AJOUTER : Demander les objets de la zone
  if (this.objectManager && this.networkManager?.room) {
    const zoneName = this.mapSceneToZone(this.scene.key);
    console.log(`üì¶ [${this.scene.key}] Demande objets pour zone: ${zoneName}`);
    this.networkManager.room.send("requestZoneObjects", { zone: zoneName });
  }
  // ‚úÖ NOUVEAU: Forcer la mise √† jour du widget apr√®s positionnement
  if (this.timeWeatherWidget) {
    this.time.delayedCall(1000, () => {
      this.connectWidgetToWeatherSystem();
    });
  }
}
  
  // ‚úÖ M√âTHODE MODIFI√âE: Setup des managers avec InteractionManager
  setupManagers() {
    this.playerManager = new PlayerManager(this);
    this.npcManager = new NpcManager(this);
    
    // AJOUTER
    this.pokemonFollowerManager = new PokemonFollowerManager(this);
    console.log("‚úÖ PokemonFollowerManager initialis√©");

      // ‚úÖ AJOUTER CETTE LIGNE MANQUANTE :
  this.overworldPokemonManager = new OverworldPokemonManager(this);
  console.log("‚úÖ OverworldPokemonManager initialis√©");
        // ‚úÖ AJOUTER : ObjectManager
    this.objectManager = new ObjectManager(this);
    this.objectManager.initialize();
    console.log("‚úÖ ObjectManager initialis√©");
    if (this.mySessionId) {
      this.playerManager.setMySessionId(this.mySessionId);
    }
  }

  createPlayerAnimations() {
    if (!this.textures.exists('dude') || this.anims.exists('walk_left')) return;

    this.anims.create({
      key: 'walk_left',
      frames: this.anims.generateFrameNumbers('dude', { start: 0, end: 3 }),
      frameRate: 10, repeat: -1
    });
    this.anims.create({ key: 'idle_left', frames: [{ key: 'dude', frame: 4 }], frameRate: 1 });
    this.anims.create({
      key: 'walk_right',
      frames: this.anims.generateFrameNumbers('dude', { start: 5, end: 8 }),
      frameRate: 10, repeat: -1
    });
    this.anims.create({ key: 'idle_right', frames: [{ key: 'dude', frame: 5 }], frameRate: 1 });
    this.anims.create({
      key: 'walk_up',
      frames: this.anims.generateFrameNumbers('dude', { start: 0, end: 3 }),
      frameRate: 10, repeat: -1
    });
    this.anims.create({ key: 'idle_up', frames: [{ key: 'dude', frame: 4 }], frameRate: 1 });
    this.anims.create({
      key: 'walk_down',
      frames: this.anims.generateFrameNumbers('dude', { start: 5, end: 8 }),
      frameRate: 10, repeat: -1
    });
    this.anims.create({ key: 'idle_down', frames: [{ key: 'dude', frame: 5 }], frameRate: 1 });
  }

  // üîí M√âTHODE MODIFI√âE: Setup des inputs avec InputManager
  setupInputs() {
    console.log(`‚å®Ô∏è [${this.scene.key}] Setup inputs avec InputManager...`);
    
    // ‚úÖ TOUJOURS cr√©er les cursors de base pour le fallback
    this.cursors = this.input.keyboard.createCursorKeys();
    this.wasd = this.input.keyboard.addKeys('W,S,A,D');
    this.input.keyboard.enableGlobalCapture();
    this.input.keyboard.on('keydown-O', () => {
      this.debugOverworldPokemon();
    });

    this.input.keyboard.on('keydown-P', () => {
      this.forceSpawnOverworldPokemon();
    });

    this.input.keyboard.on('keydown-L', () => {
      this.clearCurrentOverworldArea();
    });
    try {
      // üîí Cr√©er l'InputManager ici AVANT tout le reste
      this.inputManager = new InputManager(this);
      this.inputManagerReady = true;
      
      console.log(`‚úÖ [${this.scene.key}] InputManager cr√©√© et pr√™t`);
      
    } catch (error) {
      console.error(`‚ùå [${this.scene.key}] Erreur cr√©ation InputManager:`, error);
      
      // üîí Fallback d√©j√† configur√© ci-dessus
      console.log(`üîÑ [${this.scene.key}] Utilisation fallback cursors directs...`);
      this.inputManagerReady = false;
    }
    
    // ‚úÖ Raccourcis clavier debug (garder ceux existants)
    this.input.keyboard.on('keydown-C', () => {
      this.debugCollisions();
    });

    this.input.keyboard.on('keydown-F', () => {
      this.debugEncounters();
    });

    this.input.keyboard.on('keydown-G', () => {
      this.forceEncounterTest();
    });

    // üîí NOUVEAU: Raccourci pour debug MovementBlockHandler
    this.input.keyboard.on('keydown-M', () => {
      this.debugMovementBlockHandler();
    });

    // üîí NOUVEAU: Raccourci pour debug InputManager
    this.input.keyboard.on('keydown-I', () => {
      this.debugInputManager();
    });
  }

  createUI() {
  this.infoText = this.add.text(16, 16, `PokeWorld MMO\n${this.scene.key}`, {
    fontSize: '14px',
    fontFamily: 'monospace',
    color: '#fff',
    backgroundColor: 'rgba(0, 50, 0, 0.8)',
    padding: { x: 8, y: 6 }
  }).setScrollFactor(0).setDepth(1000);

  this.coordsText = this.add.text(this.scale.width - 16, 16, 'Player: x:0, y:0', {
    fontSize: '14px',
    fontFamily: 'monospace',
    color: '#fff',
    backgroundColor: 'rgba(255, 0, 0, 0.8)',
    padding: { x: 6, y: 4 }
  }).setScrollFactor(0).setDepth(1000).setOrigin(1, 0);

  // üÜï NOUVEAU: Texte d'info encounters
  this.encounterText = this.add.text(16, this.scale.height - 60, 'Encounters: Not initialized', {
    fontSize: '12px',
    fontFamily: 'monospace',
    color: '#fff',
    backgroundColor: 'rgba(0, 0, 255, 0.8)',
    padding: { x: 6, y: 4 }
  }).setScrollFactor(0).setDepth(1000);

  // üîí NOUVEAU: Texte d'info MovementBlock
  this.movementBlockText = this.add.text(16, this.scale.height - 100, 'Movement: OK', {
    fontSize: '12px',
    fontFamily: 'monospace',
    color: '#fff',
    backgroundColor: 'rgba(0, 255, 0, 0.8)',
    padding: { x: 6, y: 4 }
  }).setScrollFactor(0).setDepth(1000);
  
}


  handleZoneData(data) {
    console.log(`üó∫Ô∏è [${this.scene.key}] Handling zone data for: ${data.zone}`);
    
    if (data.zone !== this.zoneName) {
      console.warn(`[${this.scene.key}] Zone data pour ${data.zone} mais nous sommes dans ${this.zoneName}`);
      return;
    }

    if (data.music && this.sound) {
      this.sound.stopAll();
      this.sound.play(data.music, { loop: true, volume: 0.5 });
    }

    console.log(`‚úÖ [${this.scene.key}] Zone data appliqu√©e`);
  }

  handleTransitionError(result) {
    console.error(`‚ùå [${this.scene.key}] Erreur transition: ${result.reason}`);
    this.showNotification(`Transition impossible: ${result.reason}`, 'error');
  }

  checkPlayerState() {
    const myPlayer = this.playerManager?.getMyPlayer();
    if (!myPlayer) {
      if (this.playerManager && this.mySessionId) {
        this.playerManager.forceResynchronization();
      }
      return false;
    }
    
    let fixed = false;
    
    if (!myPlayer.visible) {
      myPlayer.setVisible(true);
      fixed = true;
    }
    
    if (!myPlayer.active) {
      myPlayer.setActive(true);
      fixed = true;
    }
    
    if (myPlayer.depth !== 3.5) {
      myPlayer.setDepth(3.5);
      fixed = true;
    }
    
    if (myPlayer.indicator) {
      if (!myPlayer.indicator.visible) {
        myPlayer.indicator.setVisible(true);
        fixed = true;
      }
      
      if (Math.abs(myPlayer.indicator.x - myPlayer.x) > 1 || 
          Math.abs(myPlayer.indicator.y - (myPlayer.y - 24)) > 1) {
        myPlayer.indicator.x = myPlayer.x;
        myPlayer.indicator.y = myPlayer.y - 24;
        fixed = true;
      }
    }

    // üÜï NOUVEAU: Mettre √† jour l'affichage des encounters
    this.updateEncounterDisplay(myPlayer);
    
    // üîí NOUVEAU: Mettre √† jour l'affichage MovementBlock
    this.updateMovementBlockDisplay();
    
    return true;
  }

  // üÜï NOUVELLE M√âTHODE: Mettre √† jour l'affichage des encounters
  updateEncounterDisplay(myPlayer) {
    if (!this.encounterText || !this.encounterManager || !myPlayer) return;

    const posInfo = this.encounterManager.getPositionInfo(myPlayer.x, myPlayer.y);
    const stats = this.encounterManager.getStats();
    
    let displayText = `Encounters: `;
    
    if (this.encounterInitialized) {
      displayText += `‚úÖ | Zone: ${posInfo.zoneId || 'None'} | `;
      displayText += `Grass: ${posInfo.isOnGrass ? '‚úÖ' : '‚ùå'} | `;
      displayText += `Water: ${posInfo.isOnWater ? '‚ùå' : '‚ùå'} | `;
      displayText += `Can: ${posInfo.canEncounter ? '‚úÖ' : '‚ùå'}`;
    } else {
      displayText += `‚ùå Not initialized`;
    }
    
    this.encounterText.setText(displayText);
  }

  // üîí NOUVELLE M√âTHODE: Mettre √† jour l'affichage MovementBlock
  updateMovementBlockDisplay() {
    if (!this.movementBlockText) return;

    let displayText = `Movement: `;
    let bgColor = 'rgba(0, 255, 0, 0.8)'; // Vert par d√©faut
    
    if (!this.inputManagerReady) {
      displayText += `‚ùå InputManager not ready`;
      bgColor = 'rgba(255, 0, 0, 0.8)'; // Rouge
    } else if (!this.movementBlockHandlerInitialized) {
      displayText += `‚ö†Ô∏è BlockHandler not initialized`;
      bgColor = 'rgba(255, 165, 0, 0.8)'; // Orange
    } else if (this.inputManager && !this.inputManager.areInputsEnabled()) {
      displayText += `üö´ BLOCKED`;
      bgColor = 'rgba(255, 0, 0, 0.8)'; // Rouge
      
      // Ajouter la raison si disponible
      if (movementBlockHandler && movementBlockHandler.blockReason) {
        displayText += ` (${movementBlockHandler.blockReason})`;
      }
    } else {
      displayText += `‚úÖ FREE`;
      bgColor = 'rgba(0, 255, 0, 0.8)'; // Vert
    }
    
    this.movementBlockText.setText(displayText);
    this.movementBlockText.setBackgroundColor(bgColor);
  }

  showNotification(message, type = 'info') {
    if (this.interactionManager) {
      this.interactionManager.showInteractionMessage(message, type);
      return;
    }

    // Fallback vers notification Phaser
    const notification = this.add.text(
      this.cameras.main.centerX,
      50,
      message,
      {
        fontSize: '16px',
        fontFamily: 'Arial',
        color: type === 'error' ? '#ff4444' : type === 'warning' ? '#ffaa44' : '#44ff44',
        backgroundColor: 'rgba(0, 0, 0, 0.8)',
        padding: { x: 10, y: 5 }
      }
    ).setOrigin(0.5).setScrollFactor(0).setDepth(2000);

    this.time.delayedCall(3000, () => {
      if (notification && notification.scene) {
        notification.destroy();
      }
    });
  }

  setupPlayerCollisions() {
    const myPlayer = this.playerManager?.getMyPlayer();
    if (!myPlayer || !myPlayer.body) {
      this.time.delayedCall(200, () => this.setupPlayerCollisions());
      return;
    }
    
    if (!this.collisionLayers || this.collisionLayers.length === 0) {
      return;
    }
    
    this.collisionLayers.forEach((layer, index) => {
      const collider = this.physics.add.collider(myPlayer, layer, (player, tile) => {
        console.log(`üí• COLLISION! √† (${Math.round(player.x)}, ${Math.round(player.y)})`);
      }, null, this);
      
      if (!myPlayer.colliders) myPlayer.colliders = [];
      myPlayer.colliders.push(collider);
    });
  }

  
  debugCollisions() {
    console.log("üîç === DEBUG COLLISIONS ===");
    
    const myPlayer = this.playerManager?.getMyPlayer();
    if (!myPlayer) {
      console.log("‚ùå Pas de joueur pour debug");
      return;
    }
    
    console.log("üë§ Joueur:", {
      x: myPlayer.x.toFixed(1),
      y: myPlayer.y.toFixed(1),
      hasBody: !!myPlayer.body,
      bodySize: myPlayer.body ? `${myPlayer.body.width}x${myPlayer.body.height}` : 'N/A',
      colliders: myPlayer.colliders ? myPlayer.colliders.length : 0
    });
  }

  // üÜï NOUVELLES M√âTHODES DE DEBUG POUR LES ENCOUNTERS

  debugEncounters() {
    console.log("üé≤ === DEBUG ENCOUNTERS ===");
    
    if (!this.encounterManager) {
      console.log("‚ùå EncounterManager non initialis√©");
      return;
    }
    
    const myPlayer = this.playerManager?.getMyPlayer();
    if (!myPlayer) {
      console.log("‚ùå Pas de joueur pour debug");
      return;
    }
    
    console.log("üìä Stats EncounterManager:", this.encounterManager.getStats());
    console.log("üìç Position actuelle:", {
      x: myPlayer.x.toFixed(1),
      y: myPlayer.y.toFixed(1)
    });
    
    const posInfo = this.encounterManager.getPositionInfo(myPlayer.x, myPlayer.y);
    console.log("üó∫Ô∏è Info position:", posInfo);
    
    // Debug zones
    this.encounterManager.debugZones();
    
    // Afficher notification
    this.showNotification(`Debug encounters dans la console`, 'info');
  }

  forceEncounterTest() {
    console.log("üîß === FORCE TEST ENCOUNTER ===");
    
    if (!this.encounterManager) {
      console.log("‚ùå EncounterManager non initialis√©");
      this.showNotification("EncounterManager non initialis√©", 'error');
      return;
    }
    
    const myPlayer = this.playerManager?.getMyPlayer();
    if (!myPlayer) {
      console.log("‚ùå Pas de joueur pour test");
      this.showNotification("Pas de joueur trouv√©", 'error');
      return;
    }
    
    console.log("üéØ Force check encounter √† position:", myPlayer.x, myPlayer.y);
    
    // Forcer un check encounter
    const encounterData = this.encounterManager.forceEncounterCheck(myPlayer.x, myPlayer.y);
    
    console.log("üìä R√©sultat force check:", encounterData);
    
    if (encounterData.shouldTrigger) {
      console.log("‚úÖ Encounter forc√© - envoi au serveur");
      
      // Envoyer au serveur
      if (this.networkManager?.room) {
        this.networkManager.room.send("triggerEncounter", {
          x: myPlayer.x,
          y: myPlayer.y,
          zoneId: encounterData.zoneId,
          method: encounterData.method,
          encounterRate: encounterData.encounterRate,
          forced: true,
          timestamp: Date.now()
        });
        
        this.showNotification("Encounter forc√© envoy√© au serveur!", 'success');
      } else {
        this.showNotification("Pas de connexion serveur", 'error');
      }
    } else {
      this.showNotification("Impossible de forcer encounter ici", 'warning');
    }
  }

  // üîí NOUVELLES M√âTHODES DE DEBUG POUR MOVEMENTBLOCKHANDLER

  debugMovementBlockHandler() {
    console.log("üîí === DEBUG MOVEMENT BLOCK HANDLER ===");
    
    if (!this.movementBlockHandlerInitialized) {
      console.log("‚ùå MovementBlockHandler non initialis√©");
      this.showNotification("MovementBlockHandler non initialis√©", 'error');
      return;
    }
    
    console.log("üìä Status MovementBlockHandler:", movementBlockHandler.getStatus());
    console.log("üìä Initialization Status:", movementBlockHandler.getInitializationStatus());
    
    // Test de fonctionnement
    console.log("üß™ Test isMovementBlocked():", movementBlockHandler.isMovementBlocked());
    console.log("üìä Stats blocages:", movementBlockHandler.getStats());
    
    // Afficher notification
    this.showNotification(`Debug MovementBlockHandler dans la console`, 'info');
  }

  debugInputManager() {
    console.log("‚å®Ô∏è === DEBUG INPUT MANAGER ===");
    
    if (!this.inputManager) {
      console.log("‚ùå InputManager non initialis√©");
      this.showNotification("InputManager non initialis√©", 'error');
      return;
    }
    
    // Utiliser la m√©thode debug de l'InputManager
    this.inputManager.debug();
    
    // Test de connexion MovementBlockHandler
    const testResult = this.inputManager.testMovementBlockHandlerConnection();
    console.log("üîó Test connexion MovementBlockHandler:", testResult);
    
    // Afficher notification
    this.showNotification(`Debug InputManager dans la console`, 'info');
  }

  testEncounterAtPosition(x, y) {
    if (!this.encounterManager) {
      console.log("‚ùå EncounterManager non disponible");
      return null;
    }
    
    console.log(`üß™ Test encounter √† (${x}, ${y})`);
    return this.encounterManager.forceEncounterCheck(x, y);
  }

  // ‚úÖ NOUVELLES M√âTHODES: Gestion du syst√®me d'√©quipe
  getTeamSystemStatus() {
    return {
      initialized: this.teamSystemInitialized,
      attempts: this.teamInitializationAttempts,
      maxAttempts: this.maxTeamInitAttempts,
      globalManagerExists: !!window.TeamManager,
      globalManagerInitialized: window.TeamManager?.isInitialized || false
    };
  }
    getQuestModuleStatus() {
      return {
        initialized: this.questModuleInitialized,
        attempts: this.questModuleAttempts,
        maxAttempts: this.maxQuestModuleAttempts,
        globalSystemExists: !!window.questSystem,
        globalSystemReady: !!window.questSystemReady,
        uiManagerExists: !!window.uiManager
      };
    }
  // üÜï NOUVELLES M√âTHODES: Gestion du syst√®me d'encounter
  getEncounterSystemStatus() {
    return {
      initialized: this.encounterInitialized,
      managerExists: !!this.encounterManager,
      mapLoaded: !!this.map,
      stats: this.encounterManager?.getStats() || null
    };
  }

  // üîí NOUVELLES M√âTHODES: Gestion du syst√®me MovementBlock
  getMovementBlockSystemStatus() {
    return {
      initialized: this.movementBlockHandlerInitialized,
      attempts: this.movementBlockInitAttempts,
      maxAttempts: this.maxMovementBlockInitAttempts,
      inputManagerReady: this.inputManagerReady,
      inputManagerExists: !!this.inputManager,
      globalHandlerExists: !!movementBlockHandler,
      globalHandlerReady: movementBlockHandler?.isReady() || false,
      isBlocked: movementBlockHandler?.isMovementBlocked() || false,
      blockReason: movementBlockHandler?.blockReason || null
    };
  }

  forceTeamSystemInit() {
    console.log(`üîß [${this.scene.key}] Force r√©initialisation syst√®me d'√©quipe...`);
    this.teamSystemInitialized = false;
    this.teamInitializationAttempts = 0;
    
    setTimeout(() => {
      this.initializeTeamSystemSafely();
    }, 1000);
  }

  forceEncounterSystemInit() {
    console.log(`üîß [${this.scene.key}] Force r√©initialisation syst√®me d'encounter...`);
    this.encounterInitialized = false;
    this.encounterManager = null;
    
    setTimeout(() => {
      this.initializeEncounterManager();
    }, 1000);
  }

  // üîí NOUVELLE M√âTHODE: Force r√©init MovementBlock
  forceMovementBlockSystemInit() {
    console.log(`üîß [${this.scene.key}] Force r√©initialisation syst√®me MovementBlock...`);
    this.movementBlockHandlerInitialized = false;
    this.movementBlockInitAttempts = 0;
    
    // Reset du handler global si n√©cessaire
    if (movementBlockHandler && movementBlockHandler.scene === this) {
      movementBlockHandler.reset();
    }
    
    setTimeout(() => {
      this.initializeMovementBlockHandler();
    }, 1000);
  }

  // üîí NOUVELLE M√âTHODE: Force r√©init InputManager
  forceInputManagerInit() {
    console.log(`üîß [${this.scene.key}] Force r√©initialisation InputManager...`);
    
    if (this.inputManager) {
      this.inputManager.destroy();
    }
    
    this.inputManager = null;
    this.inputManagerReady = false;
    
    setTimeout(() => {
      this.setupInputs();
    }, 500);
  }

  isTeamSystemReady() {
    return this.teamSystemInitialized && window.TeamManager && window.TeamManager.isInitialized;
  }

  isEncounterSystemReady() {
    return this.encounterInitialized && !!this.encounterManager;
  }

  // üîí NOUVELLES M√âTHODES: Status MovementBlock
  isMovementBlockSystemReady() {
    return this.movementBlockHandlerInitialized && 
           this.inputManagerReady && 
           movementBlockHandler?.isReady();
  }

  isInputManagerReady() {
    return this.inputManagerReady && !!this.inputManager;
  }

  getTeamManager() {
    return this.isTeamSystemReady() ? window.TeamManager : null;
  }

  getEncounterManager() {
    return this.isEncounterSystemReady() ? this.encounterManager : null;
  }

  // üîí NOUVELLES M√âTHODES: Getters MovementBlock
  getMovementBlockHandler() {
    return this.isMovementBlockSystemReady() ? movementBlockHandler : null;
  }

  getInputManager() {
    return this.isInputManagerReady() ? this.inputManager : null;
  }

  // ‚úÖ M√âTHODES DE DEBUG √âTENDUES
  debugScene() {
    console.log(`üîç [${this.scene.key}] === DEBUG SCENE COMPL√àTE ===`);
    console.log(`üìä Managers:`, {
      playerManager: !!this.playerManager,
      npcManager: !!this.npcManager,
      networkManager: !!this.networkManager,
      baseInteractionManager: !!this.interactionManager,
      inventorySystem: !!this.inventorySystem,
      encounterManager: !!this.encounterManager, // üÜï
      inputManager: !!this.inputManager, // üîí
      movementBlockHandler: !!movementBlockHandler // üîí
    });
    
    console.log(`üìä √âtat sc√®ne:`, {
      isReady: this.isSceneReady,
      networkSetup: this.networkSetupComplete,
      playerReady: this.myPlayerReady,
      zoneName: this.zoneName,
      sessionId: this.mySessionId,
      teamSystemInitialized: this.teamSystemInitialized,
      teamInitAttempts: this.teamInitializationAttempts,
      encounterSystemInitialized: this.encounterInitialized, // üÜï
      movementBlockSystemInitialized: this.movementBlockHandlerInitialized, // üîí
      inputManagerReady: this.inputManagerReady // üîí
    });
  }

  debugAllSystems() {
    console.log(`üîç [${this.scene.key}] === DEBUG TOUS LES SYST√àMES ===`);
    
    this.debugScene();
    
    console.log(`‚öîÔ∏è Team System:`, this.getTeamSystemStatus());
    
    // üÜï NOUVEAU: Debug encounter system
    console.log(`üé≤ Encounter System:`, this.getEncounterSystemStatus());
    
    // üîí NOUVEAU: Debug movement block system
    console.log(`üîí MovementBlock System:`, this.getMovementBlockSystemStatus());
    
    console.log(`üéí Inventory:`, {
      exists: !!this.inventorySystem,
      initialized: this.inventoryInitialized,
      global: !!window.inventorySystem
    });
    
    console.log(`üéØ Interaction:`, {
      exists: !!this.interactionManager,
      shopSystem: !!this.interactionManager?.shopSystem
    });

    
    console.log(`üéÆ Network:`, {
      manager: !!this.networkManager,
      connected: this.networkManager?.isConnected,
      room: !!this.networkManager?.room,
      sessionId: this.mySessionId
    });
  }

  testTeamConnection() {
    console.log(`üß™ [${this.scene.key}] Test connexion Team System...`);
    
    if (!this.isTeamSystemReady()) {
      console.log(`‚ùå Team System pas pr√™t, status:`, this.getTeamSystemStatus());
      return false;
    }
    
    try {
      const teamManager = this.getTeamManager();
      teamManager.requestTeamData();
      console.log(`‚úÖ Test connexion team r√©ussi`);
      return true;
    } catch (error) {
      console.error(`‚ùå Erreur test connexion team:`, error);
      return false;
    }
  }

  // üÜï NOUVELLE M√âTHODE: Test du syst√®me d'encounter
  testEncounterConnection() {
    console.log(`üß™ [${this.scene.key}] Test connexion Encounter System...`);
    
    if (!this.isEncounterSystemReady()) {
      console.log(`‚ùå Encounter System pas pr√™t, status:`, this.getEncounterSystemStatus());
      return false;
    }
    
    try {
      const myPlayer = this.playerManager?.getMyPlayer();
      if (!myPlayer) {
        console.log(`‚ùå Pas de joueur pour test encounter`);
        return false;
      }
      
      const encounterData = this.encounterManager.checkEncounterOnMove(myPlayer.x, myPlayer.y);
      console.log(`‚úÖ Test encounter r√©ussi:`, encounterData);
      return true;
    } catch (error) {
      console.error(`‚ùå Erreur test encounter:`, error);
      return false;
    }
  }

  // üîí NOUVELLE M√âTHODE: Test du syst√®me MovementBlock
  testMovementBlockConnection() {
    console.log(`üß™ [${this.scene.key}] Test connexion MovementBlock System...`);
    
    if (!this.isMovementBlockSystemReady()) {
      console.log(`‚ùå MovementBlock System pas pr√™t, status:`, this.getMovementBlockSystemStatus());
      return false;
    }
    
    try {
      const handler = this.getMovementBlockHandler();
      const inputManager = this.getInputManager();
      
      console.log(`üîí Handler status:`, handler.getStatus());
      console.log(`‚å®Ô∏è InputManager status:`, inputManager.getStatus());
      
      // Test de base
      const isBlocked = handler.isMovementBlocked();
      const areInputsEnabled = inputManager.areInputsEnabled();
      
      console.log(`‚úÖ Test MovementBlock r√©ussi:`, {
        isBlocked,
        areInputsEnabled,
        consistent: isBlocked !== areInputsEnabled
      });
      
      return true;
    } catch (error) {
      console.error(`‚ùå Erreur test MovementBlock:`, error);
      return false;
    }
  }

  // ‚úÖ M√âTHODES UTILITAIRES POUR LE SHOP ET AUTRES SYST√àMES
  getShopSystem() {
    return this.interactionManager?.modules?.npcInteractionManager?.dependencies?.shopSystem || null;
  }
  
  isShopOpen() {
    const shopSystem = this.getShopSystem();
    return shopSystem?.isShopOpen() || false;
  }

  debugShop() {
    if (this.interactionManager) {
      const debugInfo = this.interactionManager.getDebugInfo();
      console.log(`üîç [${this.scene.key}] BaseInteractionManager debug:`, debugInfo);
      
      // Debug sp√©cifique du shop via les modules
      const shopSystem = this.interactionManager.modules?.npcInteractionManager?.dependencies?.shopSystem;
      if (shopSystem) {
        console.log(`üè™ [${this.scene.key}] ShopSystem disponible:`, !!shopSystem);
      }
    } else {
      console.log(`üîç [${this.scene.key}] Aucun BaseInteractionManager`);
    }
  }

  requestTime() {
    if (this.networkManager?.room) {
      this.networkManager.room.send("getTime");
    }
  }

  requestWeather() {
    if (this.networkManager?.room) {
      this.networkManager.room.send("getWeather");
    }
  }


  // üÜï NOUVELLES M√âTHODES UTILITAIRES POUR LES ENCOUNTERS

  getCurrentEncounterInfo() {
    const myPlayer = this.playerManager?.getMyPlayer();
    if (!myPlayer || !this.encounterManager) {
      return null;
    }
    
    return {
      position: { x: myPlayer.x, y: myPlayer.y },
      positionInfo: this.encounterManager.getPositionInfo(myPlayer.x, myPlayer.y),
      stats: this.encounterManager.getStats()
    };
  }

  resetEncounterCooldowns() {
    if (this.encounterManager) {
      this.encounterManager.resetCooldowns();
      console.log(`üîÑ [${this.scene.key}] Cooldowns encounter reset`);
      this.showNotification("Cooldowns encounter reset", 'info');
    }
  }

  simulateEncounterSteps(count = 5) {
    if (this.encounterManager) {
      this.encounterManager.simulateSteps(count);
      console.log(`üëü [${this.scene.key}] ${count} pas simul√©s`);
      this.showNotification(`${count} pas simul√©s pour encounter`, 'info');
    }
  }

  // üîí NOUVELLES M√âTHODES UTILITAIRES POUR MOVEMENTBLOCK

  getCurrentMovementBlockInfo() {
    if (!this.isMovementBlockSystemReady()) {
      return {
        error: "MovementBlock system not ready"
      };
    }
    
    return {
      handler: movementBlockHandler.getStatus(),
      inputManager: this.inputManager.getStatus(),
      isBlocked: movementBlockHandler.isMovementBlocked(),
      blockReason: movementBlockHandler.blockReason,
      blockMessage: movementBlockHandler.blockMessage
    };
  }

    // AJOUTER ces m√©thodes apr√®s getCurrentMovementBlockInfo() :

testGlobalWeatherConnection() {
  console.log(`üß™ [${this.scene.key}] Test connexion syst√®me m√©t√©o global...`);
  
  if (!window.globalWeatherManager?.isInitialized) {
    console.error(`‚ùå [${this.scene.key}] Syst√®me m√©t√©o global pas pr√™t`);
    return false;
  }
  
  try {
    // Test des fonctions de base
    const currentTime = window.globalWeatherManager.getCurrentTime();
    const currentWeather = window.globalWeatherManager.getCurrentWeather();
    
    console.log(`‚è∞ Temps global:`, currentTime);
    console.log(`üå¶Ô∏è M√©t√©o globale:`, currentWeather);
    
    // Test de l'enregistrement de cette sc√®ne
    const stats = window.globalWeatherManager.getStats();
    console.log(`üìä Stats syst√®me global:`, stats);
    
    // Test de force update
    window.globalWeatherManager.forceUpdate();
    
    console.log(`‚úÖ [${this.scene.key}] Test connexion m√©t√©o global r√©ussi`);
    return true;
    
  } catch (error) {
    console.error(`‚ùå [${this.scene.key}] Erreur test m√©t√©o global:`, error);
    return false;
  }
}

forceWeatherRefresh() {
  console.log(`üîÑ [${this.scene.key}] Force refresh m√©t√©o...`);
  
  if (window.globalWeatherManager?.isInitialized) {
    // D√©senregistrer et re-enregistrer pour forcer un refresh
    window.globalWeatherManager.unregisterScene(this.scene.key);
    
    setTimeout(() => {
      this.connectToGlobalWeatherSystem();
    }, 100);
    
  } else {
    console.warn(`‚ö†Ô∏è [${this.scene.key}] Syst√®me global pas disponible pour refresh`);
  }
}
    
debugMusicSystem() {
    console.log(`üîç [${this.scene.key}] === DEBUG SYST√àME MUSIQUE ===`);
    
    // V√©rifier si le MapMusicManager est charg√©
    if (window.mapMusicManager) {
        console.log(`‚úÖ [${this.scene.key}] MapMusicManager global disponible`);
        window.mapMusicManager.debugState();
    } else {
        console.error(`‚ùå [${this.scene.key}] MapMusicManager global MANQUANT`);
    }
    
    // V√©rifier si cette sc√®ne a l'int√©gration
    if (this.musicManager) {
        console.log(`‚úÖ [${this.scene.key}] MusicManager local disponible`);
        console.log(`üéØ Zone actuelle:`, this.musicManager.currentZone);
        console.log(`üéµ Track actuelle:`, this.musicManager.currentTrack?.key);
    } else {
        console.error(`‚ùå [${this.scene.key}] MusicManager local MANQUANT`);
    }
    
    // V√©rifier les assets audio
    if (this.cache?.audio) {
        const audioKeys = this.cache.audio.getKeys();
        console.log(`üéº [${this.scene.key}] Assets audio (${audioKeys.length}):`, audioKeys);
        
        // V√©rifier les tracks sp√©cifiques
        const requiredTracks = ['road1_theme', 'village_theme', 'lavandia_theme'];
        requiredTracks.forEach(track => {
            const exists = this.cache.audio.exists(track);
            console.log(`${exists ? '‚úÖ' : '‚ùå'} [${this.scene.key}] ${track}: ${exists ? 'DISPONIBLE' : 'MANQUANT'}`);
        });
    } else {
        console.error(`‚ùå [${this.scene.key}] Cache audio MANQUANT`);
    }
    
    // V√©rifier le SoundManager
    if (this.sound) {
        console.log(`‚úÖ [${this.scene.key}] SoundManager disponible`);
        console.log(`üîß [${this.scene.key}] Context state:`, this.sound.context?.state || 'unknown');
        console.log(`üîä [${this.scene.key}] Volume global:`, this.sound.volume);
        console.log(`üîá [${this.scene.key}] Muted:`, this.sound.mute);
    } else {
        console.error(`‚ùå [${this.scene.key}] SoundManager MANQUANT`);
    }
}
  forceUnblockMovement() {
    if (movementBlockHandler) {
      movementBlockHandler.requestForceUnblock();
      console.log(`üîì [${this.scene.key}] Demande d√©blocage forc√© envoy√©e`);
      this.showNotification("Demande d√©blocage forc√© envoy√©e", 'info');
    }
  }

  requestMovementBlockStatus() {
    if (movementBlockHandler) {
      movementBlockHandler.requestBlockStatus();
      console.log(`üìä [${this.scene.key}] Demande status blocage envoy√©e`);
      this.showNotification("Demande status blocage envoy√©e", 'info');
    }
  }

  // ‚úÖ NOUVELLES M√âTHODES DE DEBUG M√âT√âO
  debugWeatherSystem() {
  console.log(`üîç [${this.scene.key}] === DEBUG SYST√àME M√âT√âO GLOBAL ===`);
  
  const status = {
    weatherSystemType: this.weatherSystemType || 'unknown',
    hasGlobalManager: !!this.globalWeatherManager,
    globalSystemExists: !!window.globalWeatherManager,
    globalSystemInitialized: window.globalWeatherManager?.isInitialized || false,
    environment: this.currentEnvironment,
    zoneName: this.normalizeZoneName(this.scene.key),
    isRegistered: window.globalWeatherManager?.registeredScenes?.has(this.scene.key) || false,
    isActive: window.globalWeatherManager?.activeScenes?.has(this.scene.key) || false
  };
  
  console.log(`üìä Status m√©t√©o ${this.scene.key}:`, status);
  return status;
}

  
  // üÜï M√âTHODES D'EXPOSITION GLOBALE POUR LE DEBUG
  exposeDebugFunctions() {
    // Exposer les fonctions de debug sur window pour usage en console
    window[`debug_${this.scene.key}`] = {
      debugScene: () => this.debugScene(),
      debugAllSystems: () => this.debugAllSystems(),
      debugEncounters: () => this.debugEncounters(),
      forceEncounter: () => this.forceEncounterTest(),
      testEncounter: () => this.testEncounterConnection(),
      resetEncounterCooldowns: () => this.resetEncounterCooldowns(),
      simulateSteps: (count) => this.simulateEncounterSteps(count),
      getEncounterInfo: () => this.getCurrentEncounterInfo(),
      getEncounterStatus: () => this.getEncounterSystemStatus(),
      // üîí NOUVELLES FONCTIONS MOVEMENTBLOCK
      debugMovementBlock: () => this.debugMovementBlockHandler(),
      debugInputManager: () => this.debugInputManager(),
      testMovementBlock: () => this.testMovementBlockConnection(),
      forceUnblock: () => this.forceUnblockMovement(),
      requestBlockStatus: () => this.requestMovementBlockStatus(),
      getMovementBlockInfo: () => this.getCurrentMovementBlockInfo(),
      getMovementBlockStatus: () => this.getMovementBlockSystemStatus(),
      forceMovementBlockInit: () => this.forceMovementBlockSystemInit(),
      forceInputManagerInit: () => this.forceInputManagerInit(),
      // ‚úÖ NOUVELLES FONCTIONS BASEINTERACTIONMANAGER
      debugBaseInteraction: () => this.interactionManager?.getDebugInfo(),
      testNpcInteraction: (npcId) => this.interactionManager?.manualInteraction({id: npcId}, {type: 'npc'}),
      testObjectInteraction: (objectId) => this.interactionManager?.manualInteraction({id: objectId}, {type: 'object'}),
      searchHiddenItems: (x, y, radius) => this.interactionManager?.searchHiddenItems({x, y}, radius),
      blockInteractions: (duration, reason) => this.interactionManager?.blockInteractions(duration, reason),
      unblockInteractions: () => this.interactionManager?.unblockInteractions(),
    debugWeather: () => this.debugWeatherSystem(),
    testWeather: () => this.testGlobalWeatherConnection(),
    forceWeatherRefresh: () => this.forceWeatherRefresh(),
    getCurrentWeather: () => this.getCurrentTimeWeather()
    };
    
    console.log(`üîß [${this.scene.key}] Fonctions debug expos√©es: window.debug_${this.scene.key}`);
  }
  // ‚úÖ M√âTHODES DE CHARGEMENT ASYNC
async loadZoneComponents() {
    return new Promise(resolve => {
        this.createPlayerAnimations();
        this.setupManagers();
        this.initPlayerSpawnFromSceneData();
        this.justArrivedAtZone = true;
        this.time.delayedCall(500, () => { this.justArrivedAtZone = false; });
        
        this.loadMap();
        this.setupInputs();
        this.createUI();
        this.myPlayerReady = false;
        this.isSceneReady = true;
        
        this.initializeWithExistingConnection();
        this.setupPlayerReadyHandler();
        this.setupCleanupHandlers();

        this.events.once('shutdown', this.cleanup, this);
        this.events.once('destroy', this.cleanup, this);
        
        setTimeout(resolve, 300);
    });
}

async initializeUIComponents() {
    return new Promise(async resolve => {
        try {
            if (typeof initializePokemonUI === 'function') {
                await initializePokemonUI();
                console.log(`‚úÖ [${this.scene.key}] Interface utilisateur initialis√©e`);
            } else {
                console.warn(`‚ö†Ô∏è [${this.scene.key}] initializePokemonUI non disponible`);
            }
            resolve();
        } catch (error) {
            console.error(`‚ùå [${this.scene.key}] Erreur UI:`, error);
            resolve(); // Continuer m√™me en cas d'erreur
        }
    });
}

performDirectLoading() {
    console.log(`üîÑ [${this.scene.key}] Chargement direct de secours...`);
    
    this.createPlayerAnimations();
    this.setupManagers();
    this.initPlayerSpawnFromSceneData();
    this.justArrivedAtZone = true;
    this.time.delayedCall(500, () => { this.justArrivedAtZone = false; });
    
    this.loadMap();
    this.setupInputs();
    this.createUI();
    this.myPlayerReady = false;
    this.isSceneReady = true;
    
    this.initializeWithExistingConnection();
    this.setupPlayerReadyHandler();
    this.setupCleanupHandlers();

    this.events.once('shutdown', this.cleanup, this);
    this.events.once('destroy', this.cleanup, this);
    
    this.initializeGameSystems();
  this.initializeOverworldPokemon();

}

// ‚úÖ FONCTIONS UTILITAIRES
delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

promisifyMethod(method) {
    return new Promise(resolve => {
        try {
            method();
            setTimeout(resolve, 200);
        } catch (error) {
            console.error('Erreur dans promisifyMethod:', error);
            resolve();
        }
    });
}
  // ‚úÖ NOUVELLES M√âTHODES DE DEBUG pour Pok√©mon overworld

debugOverworldPokemon() {
  console.log(`üîç [${this.scene.key}] === DEBUG POK√âMON OVERWORLD ===`);
  
  // ‚úÖ UTILISER LA FONCTION EXISTANTE
  const currentZone = this.mapSceneToZone(this.scene.key); // Utilise la m√©thode existante
  
  // ‚úÖ V√âRIFIER SI LA ZONE EST CONFIGUR√âE C√îT√â SERVEUR
  const configuredZones = ['village', 'lavandia']; // Zones avec des Pok√©mon overworld
  
  if (!configuredZones.includes(currentZone)) {
    console.log(`‚ÑπÔ∏è [${this.scene.key}] Zone ${currentZone} non configur√©e pour les Pok√©mon overworld`);
    this.showNotification(`Zone ${currentZone} : pas de Pok√©mon overworld`, 'info');
    return;
  }
  
  if (!this.overworldPokemonManager) {
    console.log("‚ùå OverworldPokemonManager non initialis√©");
    return;
  }
  
  this.overworldPokemonManager.debugOverworldPokemon();
  
  if (this.networkManager?.room) {
    this.networkManager.room.send("debugOverworldPokemon");
  }
  
  this.showNotification(`Debug Pok√©mon overworld dans la console`, 'info');
}

forceSpawnOverworldPokemon() {
  console.log(`üéØ [${this.scene.key}] Force spawn Pok√©mon overworld`);
  
  // ‚úÖ UTILISER LA FONCTION EXISTANTE
  const currentZone = this.mapSceneToZone(this.scene.key);
  
  // ‚úÖ V√âRIFIER SI LA ZONE EST CONFIGUR√âE C√îT√â SERVEUR
  const configuredZones = ['village', 'lavandia'];
  
  if (!configuredZones.includes(currentZone)) {
    console.log(`‚ÑπÔ∏è [${this.scene.key}] Zone ${currentZone} non configur√©e pour les Pok√©mon overworld`);
    this.showNotification(`Zone ${currentZone} : pas de Pok√©mon overworld`, 'warning');
    return;
  }
  
  const myPlayer = this.playerManager?.getMyPlayer();
  if (!myPlayer) {
    console.log("‚ùå Pas de joueur pour spawn");
    this.showNotification("Pas de joueur trouv√©", 'error');
    return;
  }
  
  if (this.networkManager?.room) {
    this.networkManager.room.send("forceSpawnOverworldPokemon", {
      areaId: currentZone, // ‚úÖ Utiliser directement le nom de zone
      pokemonId: 17, // Roucoups par d√©faut
      x: myPlayer.x,
      y: myPlayer.y
    });
    
    this.showNotification(`Force spawn Roucoups dans ${currentZone}`, 'success');
  } else {
    this.showNotification("Pas de connexion serveur", 'error');
  }
}

clearCurrentOverworldArea() {
  console.log(`üßπ [${this.scene.key}] Nettoyage zone overworld actuelle`);
  
  // ‚úÖ UTILISER LA FONCTION EXISTANTE
  const currentZone = this.mapSceneToZone(this.scene.key);
  
  // ‚úÖ V√âRIFIER SI LA ZONE EST CONFIGUR√âE C√îT√â SERVEUR
  const configuredZones = ['village', 'lavandia'];
  
  if (!configuredZones.includes(currentZone)) {
    console.log(`‚ÑπÔ∏è [${this.scene.key}] Zone ${currentZone} non configur√©e pour les Pok√©mon overworld`);
    this.showNotification(`Zone ${currentZone} : pas de Pok√©mon overworld`, 'warning');
    return;
  }
  
  if (this.networkManager?.room) {
    this.networkManager.room.send("clearOverworldArea", {
      areaId: currentZone // ‚úÖ Utiliser directement le nom de zone
    });
    
    this.showNotification(`Zone ${currentZone} nettoy√©e`, 'success');
  } else {
    this.showNotification("Pas de connexion serveur", 'error');
  }
}

}

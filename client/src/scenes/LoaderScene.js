// ===============================================
// LoaderScene.js - VERSION INVISIBLE (pas d'UI de chargement)
// ===============================================
import { 
  generateMapLoadConfig, 
  zoneToScene, 
  getAllZones 
} from "../config/ZoneMapping.js";

export class LoaderScene extends Phaser.Scene {
  constructor() {
    super({ key: 'LoaderScene' });
    window.PokemonSpriteConfig = null;
    
    // ‚úÖ Guards contre double appel
    this._gameStarted = false;
    this._isStarting = false;
  }
  
  preload() {
    // ‚úÖ PAS D'UI DE CHARGEMENT - c'est g√©r√© par ExtendedLoadingScreen
    console.log('üîá [LoaderScene] Chargement silencieux (UI g√©r√©e par ExtendedLoadingScreen)');

    // ‚úÖ CHARGEMENT AUTOMATIQUE DE TOUTES LES MAPS
    console.log('üó∫Ô∏è [LoaderScene] Chargement automatique des maps...');
    const mapConfigs = generateMapLoadConfig();
    
    mapConfigs.forEach(config => {
      this.load.tilemapTiledJSON(config.key, config.path);
      console.log(`üìã [LoaderScene] Map ajout√©e: ${config.key} ‚Üí ${config.path}`);
    });
    
    console.log(`‚úÖ [LoaderScene] ${mapConfigs.length} maps charg√©es automatiquement`);

    // ‚úÖ Tilesets
    this.load.image('Assets', 'assets/sprites/Assets.png');
    this.load.image('Greenroot', 'assets/sprites/Greenroot.png');
    this.load.image('LaboInterior', 'assets/sprites/LaboInterior.png');
    this.load.image('LaboInterior2', 'assets/sprites/LaboInterior2.png');
    this.load.image('FloatingRing_1', 'assets/sprites/FloatingRing_1.png');
    this.load.image('RockFloating_1', 'assets/sprites/RockFloating_1.png');
    this.load.image('RockFloating_2', 'assets/sprites/RockFloating_2.png');
    this.load.image('RockFloating_3', 'assets/sprites/Rockfloating_3.png');
    this.load.image('Umbrella', 'assets/sprites/Umbrella.png');
    this.load.image('Water', 'assets/sprites/Water.png');
    this.load.image('Water_2', 'assets/sprites/Water_2.png');
    this.load.image('Water_3', 'assets/sprites/Water_3.png');

    // üéµ MUSIQUES
    this.load.audio('village_theme', 'assets/audio/music/village_theme.mp3');
    this.load.audio('lavandia_theme', 'assets/audio/music/lavandia_theme.mp3');
    this.load.audio('road1_theme', 'assets/audio/music/road1_theme.mp3');
    
    // Npcs
    this.load.spritesheet('oldman1', 'assets/npc/oldman1.png', { frameWidth: 32, frameHeight: 32 });
    this.load.spritesheet('Scientist', 'assets/npc/scientist1.png', { frameWidth: 32, frameHeight: 32 });
    this.load.spritesheet('OldLady', 'assets/npc/oldlady1.png', { frameWidth: 32, frameHeight: 32 });
    this.load.spritesheet('floristvillage', 'assets/npc/floristvillage.png', { frameWidth: 32, frameHeight: 32 });
    this.load.spritesheet('scientist1', 'assets/npc/scientist1.png', { frameWidth: 32, frameHeight: 32 });
    this.load.spritesheet('oldlady1', 'assets/npc/oldlady1.png', { frameWidth: 32, frameHeight: 32 });
    this.load.spritesheet('fatman1', 'assets/npc/fatman1.png', { frameWidth: 32, frameHeight: 32 });
    this.load.spritesheet('blondegirl', 'assets/npc/blondegirl.png', { frameWidth: 32, frameHeight: 32 });
    this.load.spritesheet('kid1', 'assets/npc/kid1.png', { frameWidth: 32, frameHeight: 32 });

    // ‚úÖ Pok√©mon sprites
    this.load.spritesheet('pokemon_001_back', 'assets/pokemon/001/back.png', {
      frameWidth: 38,
      frameHeight: 38
    });

    // ‚úÖ DEBUG pour voir si √ßa marche
    this.load.on('filecomplete-spritesheet-pokemon_1_back', () => {
      console.log('‚úÖ pokemon_001_back spritesheet charg√© avec succ√®s ! (38x38)');
    });

    this.load.on('loaderror', (file) => {
      if (file.key === 'pokemon_1_back') {
        console.error('‚ùå √âCHEC chargement pokemon_1_back:', file.src, file.error);
      }
    });
    
    // Charger le spritesheet du joueur
    this.load.spritesheet('BoyWalk', 'assets/character/BoyWalk.png', {
      frameWidth: 32,
      frameHeight: 32,
    });
    
    // ‚úÖ PAS DE PROGRESS BAR - juste des logs
    this.load.on('progress', (progress) => {
      // ‚úÖ LOG SILENCIEUX au lieu de UI
      if (progress % 0.2 < 0.05) { // Log tous les 20%
        console.log(`üì¶ [LoaderScene] Progression: ${Math.round(progress * 100)}%`);
      }
    });

    // ‚úÖ Event 'complete' avec guard
    this.load.on('complete', () => {
      console.log('‚úÖ [LoaderScene] Tous les assets sont charg√©s !');
      
      // ‚úÖ GUARD: Ne pas d√©marrer si d√©j√† en cours
      if (!this._gameStarted && !this._isStarting) {
        console.log('üöÄ [LoaderScene] D√©marrage du jeu depuis preload.complete');
        this._isStarting = true;
        this.startGame();
      } else {
        console.log('‚ÑπÔ∏è [LoaderScene] startGame d√©j√† appel√©, ignor√©');
      }
    });

    // ‚úÖ Error handling
    this.load.on('loaderror', (file) => {
      console.error('‚ùå Erreur de chargement:', file.src);
    });
  }

  // ‚úÖ PAS DE createLoadingBar() - on utilise ExtendedLoadingScreen

  async startGame() {
    // ‚úÖ GUARD PRINCIPAL: Emp√™cher double ex√©cution
    if (this._gameStarted) {
      console.log('‚ö†Ô∏è [LoaderScene] startGame d√©j√† ex√©cut√©, abandon');
      return;
    }
    
    // ‚úÖ MARQUER COMME D√âMARR√â IMM√âDIATEMENT
    this._gameStarted = true;
    console.log('üéØ [LoaderScene] === D√âMARRAGE UNIQUE DU JEU ===');

    // R√©cup√©rer la derni√®re position et d√©marrer la bonne sc√®ne
    const getWalletFromUrl = () => {
      const params = new URLSearchParams(window.location.search);
      return params.get('wallet');
    };

    let identifier = getWalletFromUrl();
    if (!identifier && window.app?.currentAccount?.address) {
      identifier = window.app.currentAccount.address;
    }
    if (!identifier) {
      alert("Aucun wallet connect√© !");
      return;
    }

    try {
      const res = await fetch(`/api/playerData?username=${encodeURIComponent(identifier)}`);
      if (res.ok) {
        const data = await res.json();
        const lastMap = data.lastMap || 'beach';
        
        // ‚úÖ CONVERSION AUTOMATIQUE ZONE ‚Üí SC√àNE
        const targetScene = zoneToScene(lastMap);
        
        console.log(`üéØ [LoaderScene] Redirection automatique: ${lastMap} ‚Üí ${targetScene}`);
        
        // ‚úÖ D√âLAI COURT pour s'assurer que ExtendedLoadingScreen a le temps de se fermer
        setTimeout(() => {
          if (this.scene.isActive(targetScene)) {
            console.log('‚ö†Ô∏è [LoaderScene] Sc√®ne cible d√©j√† active, restart au lieu de start');
            this.scene.restart(targetScene);
          } else {
            this.scene.start(targetScene);
          }
        }, 500);
        
      } else {
        console.log('üìç [LoaderScene] Pas de donn√©es utilisateur, d√©marrage BeachScene');
        setTimeout(() => {
          this.scene.start('BeachScene');
        }, 500);
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è [LoaderScene] Erreur API, d√©marrage BeachScene", e);
      setTimeout(() => {
        this.scene.start('BeachScene');
      }, 500);
    }
  }
  
  async create() {
    console.log('üîß [LoaderScene] create() appel√© (mode invisible)');
    
    // ‚úÖ CHARGEMENT JSON SEULEMENT
    try {
      const res = await fetch('assets/pokemon/PokemonSpriteConfig.json');
      window.PokemonSpriteConfig = await res.json();
      console.log('‚úÖ PokemonSpriteConfig charg√© !', window.PokemonSpriteConfig);
    } catch (err) {
      console.warn('‚ùå Impossible de charger PokemonSpriteConfig.json, fallback utilis√©.', err);
      window.PokemonSpriteConfig = {
        default: { offsetX: 0, offsetY: 0, scale: 1, spriteWidth: 64, spriteHeight: 64, sheetCols: 9, sheetRows: 9 }
      };
    }

    // ‚úÖ PAS DE startGame() ICI - g√©r√© par preload.complete
    console.log('‚úÖ [LoaderScene] create() termin√© (mode invisible, pas de UI)');
  }

  // ‚úÖ M√âTHODES DE DEBUG
  getLoaderStatus() {
    return {
      gameStarted: this._gameStarted,
      isStarting: this._isStarting,
      loadComplete: this.load.isLoading() === false,
      sceneActive: this.scene.isActive(),
      sceneVisible: this.scene.isVisible(),
      totalLoaded: this.load.totalComplete,
      totalToLoad: this.load.totalToLoad,
      mode: 'invisible' // Indique qu'on utilise ExtendedLoadingScreen
    };
  }

  resetLoaderState() {
    console.log('üîÑ [LoaderScene] Reset √©tat loader');
    this._gameStarted = false;
    this._isStarting = false;
  }

  forceStartGame() {
    console.log('üöÄ [LoaderScene] Force start game (debug)');
    this.resetLoaderState();
    this.startGame();
  }

  // ‚úÖ M√âTHODE POUR RENDRE VISIBLE (si n√©cessaire)
  makeVisible() {
    console.log('üëÅÔ∏è [LoaderScene] Rendre visible');
    this.scene.setVisible(true);
  }

  makeInvisible() {
    console.log('üëª [LoaderScene] Rendre invisible'); 
    this.scene.setVisible(false);
  }
}

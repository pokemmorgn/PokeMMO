// client/src/scenes/BattleScene.js - √âTAPE 1: Chargement et affichage sprites Pok√©mon

export class BattleScene extends Phaser.Scene {
  constructor() {
    super({ key: 'BattleScene' });
    
    // Managers
    this.battleManager = null;
    this.gameManager = null;
    this.networkHandler = null;
    
    // √âtat de la sc√®ne
    this.isActive = false;
    this.isVisible = false;
    
    // üÜï SPRITES POK√âMON
    this.playerPokemonSprite = null;
    this.opponentPokemonSprite = null;
    this.battleBackground = null;
    
    // Donn√©es actuelles
    this.currentPlayerPokemon = null;
    this.currentOpponentPokemon = null;
    
    // üÜï POSITIONS DES POK√âMON (bas√©es sur l'image de r√©f√©rence)
    this.pokemonPositions = {
      player: { x: 0.25, y: 0.75 },      // Premier plan √† gauche
      opponent: { x: 0.75, y: 0.35 }     // Arri√®re-plan √† droite
    };
    
    console.log('‚öîÔ∏è [BattleScene] Constructeur initialis√© - Focus sprites Pok√©mon');
  }

  // === INITIALISATION ===

  init(data = {}) {
    console.log('üîß [BattleScene] Init avec data:', data);
    
    this.gameManager = data.gameManager || this.scene.get('GameScene')?.gameManager;
    this.networkHandler = data.networkHandler || this.scene.get('GameScene')?.networkHandler;
    
    if (!this.gameManager || !this.networkHandler) {
      console.error('‚ùå [BattleScene] Managers manquants dans init');
      return;
    }
    
    console.log('‚úÖ [BattleScene] Managers r√©cup√©r√©s');
  }

  // üÜï PRELOAD: Chargement de TOUS les sprites Pok√©mon n√©cessaires
  preload() {
    console.log('üìÅ [BattleScene] Pr√©chargement sprites Pok√©mon...');
    
    // Background de combat
    if (!this.textures.exists('battlebg01')) {
      this.load.image('battlebg01', 'assets/battle/bg_battle_01.png');
    }
    
    // üÜï SPRITES POK√âMON - Charger comme SPRITESHEETS avec frame 0
    this.loadPokemonSpritesheets();
    
    console.log('‚úÖ [BattleScene] Pr√©chargement en cours...');
  }

  // üÜï M√âTHODE: Chargement sprites Pok√©mon en spritesheets
  loadPokemonSpritesheets() {
    console.log('üêæ [BattleScene] Chargement sprites Pok√©mon (spritesheets)...');
    
    // Liste des Pok√©mon de base avec sprites disponibles
    const pokemonSprites = [
      // Starters Kanto
      { id: 1, name: 'bulbasaur' },
      { id: 2, name: 'ivysaur' },
      { id: 3, name: 'venusaur' },
      { id: 4, name: 'charmander' },
      { id: 5, name: 'charmeleon' },
      { id: 6, name: 'charizard' },
      { id: 7, name: 'squirtle' },
      { id: 8, name: 'wartortle' },
      { id: 9, name: 'blastoise' },
      
      // Pok√©mon courants
      { id: 10, name: 'caterpie' },
      { id: 11, name: 'metapod' },
      { id: 12, name: 'butterfree' },
      { id: 13, name: 'weedle' },
      { id: 14, name: 'kakuna' },
      { id: 15, name: 'beedrill' },
      
      // Pikachu et √©volutions
      { id: 25, name: 'pikachu' },
      { id: 26, name: 'raichu' },
      
      // Autres populaires
      { id: 39, name: 'jigglypuff' },
      { id: 40, name: 'wigglytuff' },
      { id: 52, name: 'meowth' },
      { id: 54, name: 'psyduck' },
      { id: 150, name: 'mewtwo' }
    ];
    
    // ‚úÖ CORRECTION: Charger comme spritesheets avec frame 0
    pokemonSprites.forEach(pokemon => {
      const frontKey = `pokemon_${pokemon.id}_front`;
      const backKey = `pokemon_${pokemon.id}_back`;
      
      // V√©rifier si pas d√©j√† charg√©
      if (!this.textures.exists(frontKey)) {
        // Charger comme spritesheet avec frame size appropri√©e
        this.load.spritesheet(frontKey, `assets/pokemon/${pokemon.name}/front.png`, {
          frameWidth: 96,  // Taille standard frame front
          frameHeight: 96
        });
      }
      
      if (!this.textures.exists(backKey)) {
        // Charger comme spritesheet avec frame size appropri√©e  
        this.load.spritesheet(backKey, `assets/pokemon/${pokemon.name}/back.png`, {
          frameWidth: 96,  // Taille standard frame back
          frameHeight: 96
        });
      }
    });
    
    // üÜï PLACEHOLDERS si sprites manquent
    if (!this.textures.exists('pokemon_placeholder_front')) {
      this.load.spritesheet('pokemon_placeholder_front', 'assets/pokemon/placeholder_front.png', {
        frameWidth: 96,
        frameHeight: 96
      });
    }
    
    if (!this.textures.exists('pokemon_placeholder_back')) {
      this.load.spritesheet('pokemon_placeholder_back', 'assets/pokemon/placeholder_back.png', {
        frameWidth: 96,
        frameHeight: 96
      });
    }
    
    console.log(`‚úÖ [BattleScene] ${pokemonSprites.length} Pok√©mon spritesheets en cours de chargement`);
  }

  create() {
    console.log('üé® [BattleScene] Cr√©ation de la sc√®ne...');
    
    try {
      // 1. Cr√©er le background de combat
      this.createBattleBackground();
      
      // 2. ‚úÖ CORRECTION: Calculer les positions AVANT tout
      this.createPokemonPositions();
      
      // 3. Initialiser le BattleManager (simplifi√© pour cette √©tape)
      this.setupBasicBattleManager();
      
      // 4. Setup √©v√©nements de base
      this.setupBasicEvents();
      
      this.isActive = true;
      console.log('‚úÖ [BattleScene] Sc√®ne cr√©√©e - Pr√™te pour sprites Pok√©mon');
      console.log('üêæ [BattleScene] Positions calcul√©es:', this.pokemonPositions);
      
    } catch (error) {
      console.error('‚ùå [BattleScene] Erreur lors de la cr√©ation:', error);
    }
  }

  // üÜï M√âTHODE: Cr√©ation du background de combat
  createBattleBackground() {
    console.log('üñºÔ∏è [BattleScene] Cr√©ation background de combat...');
    
    const { width, height } = this.cameras.main;
    
    if (this.textures.exists('battlebg01')) {
      this.battleBackground = this.add.image(width/2, height/2, 'battlebg01');
      
      // Ajuster la taille pour couvrir l'√©cran
      const scaleX = width / this.battleBackground.width;
      const scaleY = height / this.battleBackground.height;
      const scale = Math.max(scaleX, scaleY);
      
      this.battleBackground.setScale(scale);
      this.battleBackground.setDepth(-100);
      
      console.log('‚úÖ [BattleScene] Background charg√© et mis √† l\'√©chelle');
    } else {
      console.warn('‚ö†Ô∏è [BattleScene] Background manquant, cr√©ation fallback...');
      this.createFallbackBackground();
    }
  }

  // üÜï M√âTHODE: Background de secours
  createFallbackBackground() {
    const { width, height } = this.cameras.main;
    
    const bg = this.add.graphics();
    
    // D√©grad√© ciel/herbe style Pok√©mon
    bg.fillGradientStyle(
      0x87CEEB, 0x87CEEB,  // Bleu ciel
      0x32CD32, 0x228B22   // Vert herbe
    );
    bg.fillRect(0, 0, width, height);
    bg.setDepth(-100);
    
    this.battleBackground = bg;
  }

  // üÜï M√âTHODE: Pr√©paration positions Pok√©mon
  createPokemonPositions() {
    console.log('üêæ [BattleScene] Pr√©paration positions Pok√©mon...');
    
    const { width, height } = this.cameras.main;
    
    // ‚úÖ CORRECTION: S'assurer que les propri√©t√©s existent
    if (!this.pokemonPositions.playerAbsolute) {
      this.pokemonPositions.playerAbsolute = {};
    }
    if (!this.pokemonPositions.opponentAbsolute) {
      this.pokemonPositions.opponentAbsolute = {};
    }
    
    // Calculer positions absolues bas√©es sur l'image de r√©f√©rence
    this.pokemonPositions.playerAbsolute.x = width * this.pokemonPositions.player.x;
    this.pokemonPositions.playerAbsolute.y = height * this.pokemonPositions.player.y;
    
    this.pokemonPositions.opponentAbsolute.x = width * this.pokemonPositions.opponent.x;
    this.pokemonPositions.opponentAbsolute.y = height * this.pokemonPositions.opponent.y;
    
    console.log('‚úÖ [BattleScene] Positions calcul√©es:', {
      player: this.pokemonPositions.playerAbsolute,
      opponent: this.pokemonPositions.opponentAbsolute,
      screen: { width, height }
    });
  }

  // üÜï M√âTHODE: Affichage d'un Pok√©mon joueur (vue de dos)
  displayPlayerPokemon(pokemonData) {
    console.log('üë§ [BattleScene] Affichage Pok√©mon joueur:', pokemonData);
    
    // ‚úÖ CORRECTION: V√©rifier que les positions sont disponibles
    if (!this.pokemonPositions?.playerAbsolute) {
      console.error('‚ùå [BattleScene] Positions non calcul√©es, recalcul...');
      this.createPokemonPositions();
    }
    
    // ‚úÖ CORRECTION: Supprimer l'ancien sprite proprement
    if (this.playerPokemonSprite) {
      console.log('üóëÔ∏è [BattleScene] Suppression ancien sprite joueur');
      this.playerPokemonSprite.destroy();
      this.playerPokemonSprite = null;
    }
    
    if (!pokemonData) {
      console.warn('‚ö†Ô∏è [BattleScene] Pas de donn√©es Pok√©mon joueur');
      return;
    }
    
    // Obtenir la cl√© du sprite (vue de dos)
    const spriteKey = this.getPokemonSpriteKey(pokemonData.pokemonId || pokemonData.id, 'back');
    
    try {
      // ‚úÖ CORRECTION: Cr√©er le sprite avec frame 0 pour spritesheet
      this.playerPokemonSprite = this.add.sprite(
        this.pokemonPositions.playerAbsolute.x,
        this.pokemonPositions.playerAbsolute.y,
        spriteKey,
        0  // ‚úÖ FRAME 0 pour spritesheet
      );
      
      // ‚úÖ MARQUER le sprite pour le nettoyage
      this.playerPokemonSprite.setData('isPokemon', true);
      this.playerPokemonSprite.setData('pokemonType', 'player');
      
      // Configuration du sprite joueur
      this.playerPokemonSprite.setScale(2.5);  // Plus grand (premier plan)
      this.playerPokemonSprite.setDepth(20);
      this.playerPokemonSprite.setOrigin(0.5, 1);  // Ancr√© au sol
      
      // Animation d'entr√©e
      this.animatePokemonEntry(this.playerPokemonSprite, 'player');
      
      // Stocker les donn√©es
      this.currentPlayerPokemon = pokemonData;
      
      console.log(`‚úÖ [BattleScene] Pok√©mon joueur affich√©: ${pokemonData.name} (${spriteKey}, frame 0)`);
      
    } catch (error) {
      console.error('‚ùå [BattleScene] Erreur affichage Pok√©mon joueur:', error);
      // Cr√©er un placeholder
      this.createPokemonPlaceholder('player', pokemonData);
    }
  }

  // üÜï M√âTHODE: Affichage d'un Pok√©mon adversaire (vue de face)
  displayOpponentPokemon(pokemonData) {
    console.log('üëπ [BattleScene] Affichage Pok√©mon adversaire:', pokemonData);
    
    // ‚úÖ CORRECTION: V√©rifier que les positions sont disponibles
    if (!this.pokemonPositions?.opponentAbsolute) {
      console.error('‚ùå [BattleScene] Positions non calcul√©es, recalcul...');
      this.createPokemonPositions();
    }
    
    // ‚úÖ CORRECTION: Supprimer l'ancien sprite proprement
    if (this.opponentPokemonSprite) {
      console.log('üóëÔ∏è [BattleScene] Suppression ancien sprite adversaire');
      this.opponentPokemonSprite.destroy();
      this.opponentPokemonSprite = null;
    }
    
    if (!pokemonData) {
      console.warn('‚ö†Ô∏è [BattleScene] Pas de donn√©es Pok√©mon adversaire');
      return;
    }
    
    // Obtenir la cl√© du sprite (vue de face)
    const spriteKey = this.getPokemonSpriteKey(pokemonData.pokemonId || pokemonData.id, 'front');
    
    try {
      // ‚úÖ CORRECTION: Cr√©er le sprite avec frame 0 pour spritesheet
      this.opponentPokemonSprite = this.add.sprite(
        this.pokemonPositions.opponentAbsolute.x,
        this.pokemonPositions.opponentAbsolute.y,
        spriteKey,
        0  // ‚úÖ FRAME 0 pour spritesheet
      );
      
      // ‚úÖ MARQUER le sprite pour le nettoyage
      this.opponentPokemonSprite.setData('isPokemon', true);
      this.opponentPokemonSprite.setData('pokemonType', 'opponent');
      
      // Configuration du sprite adversaire
      this.opponentPokemonSprite.setScale(2.0);  // Plus petit (arri√®re-plan)
      this.opponentPokemonSprite.setDepth(15);
      this.opponentPokemonSprite.setOrigin(0.5, 1);  // Ancr√© au sol
      
      // Effet shiny si applicable
      if (pokemonData.shiny) {
        this.addShinyEffect(this.opponentPokemonSprite);
      }
      
      // Animation d'entr√©e
      this.animatePokemonEntry(this.opponentPokemonSprite, 'opponent');
      
      // Stocker les donn√©es
      this.currentOpponentPokemon = pokemonData;
      
      console.log(`‚úÖ [BattleScene] Pok√©mon adversaire affich√©: ${pokemonData.name} (${spriteKey}, frame 0)`);
      
    } catch (error) {
      console.error('‚ùå [BattleScene] Erreur affichage Pok√©mon adversaire:', error);
      // Cr√©er un placeholder
      this.createPokemonPlaceholder('opponent', pokemonData);
    }
  }

  // üÜï M√âTHODE: Obtenir cl√© de sprite
  getPokemonSpriteKey(pokemonId, view = 'front') {
    const spriteKey = `pokemon_${pokemonId}_${view}`;
    
    // V√©rifier si le sprite existe
    if (this.textures.exists(spriteKey)) {
      return spriteKey;
    } else {
      console.warn(`‚ö†Ô∏è [BattleScene] Sprite manquant: ${spriteKey}, utilisation placeholder`);
      return `pokemon_placeholder_${view}`;
    }
  }

  // üÜï M√âTHODE: Placeholder si sprite manquant
  createPokemonPlaceholder(type, pokemonData) {
    console.log(`üé≠ [BattleScene] Cr√©ation placeholder ${type}:`, pokemonData.name);
    
    // ‚úÖ CORRECTION: V√©rifier que les positions sont calcul√©es
    if (!this.pokemonPositions?.playerAbsolute || !this.pokemonPositions?.opponentAbsolute) {
      console.error('‚ùå [BattleScene] Positions non calcul√©es, recalcul...');
      this.createPokemonPositions();
    }
    
    const position = type === 'player' ? 
      this.pokemonPositions.playerAbsolute : 
      this.pokemonPositions.opponentAbsolute;
    
    if (!position) {
      console.error(`‚ùå [BattleScene] Position ${type} non disponible`);
      return;
    }
    
    // Couleur selon le type principal du Pok√©mon
    const primaryType = pokemonData.types?.[0] || 'normal';
    const typeColor = this.getTypeColor(primaryType);
    
    // Cr√©er un cercle color√© avec le nom
    const placeholder = this.add.circle(position.x, position.y, 60, typeColor, 0.8);
    placeholder.setStroke(4, 0x000000);
    
    const nameText = this.add.text(
      position.x, position.y,
      pokemonData.name || 'Pok√©mon',
      {
        fontSize: '16px',
        fontFamily: 'Arial, sans-serif',
        color: '#FFFFFF',
        fontWeight: 'bold',
        stroke: '#000000',
        strokeThickness: 3
      }
    ).setOrigin(0.5);
    
    // Configuration selon le type
    const scale = type === 'player' ? 2.5 : 2.0;
    const depth = type === 'player' ? 20 : 15;
    
    placeholder.setScale(scale * 0.5);
    nameText.setScale(scale * 0.5);
    placeholder.setDepth(depth);
    nameText.setDepth(depth + 1);
    
    // Animation d'entr√©e
    this.animatePokemonEntry(placeholder, type);
    
    // Stocker selon le type
    if (type === 'player') {
      this.playerPokemonSprite = placeholder;
      this.currentPlayerPokemon = pokemonData;
    } else {
      this.opponentPokemonSprite = placeholder;
      this.currentOpponentPokemon = pokemonData;
    }
  }

  // üÜï M√âTHODE: Animation d'entr√©e
  animatePokemonEntry(sprite, type) {
    if (!sprite) return;
    
    const originalX = sprite.x;
    const originalY = sprite.y;
    
    // Position de d√©part (hors √©cran)
    const startX = type === 'player' ? -150 : this.cameras.main.width + 150;
    sprite.setPosition(startX, originalY + 50);
    sprite.setAlpha(0);
    sprite.setScale(sprite.scaleX * 0.3);
    
    // Animation d'entr√©e dynamique
    this.tweens.add({
      targets: sprite,
      x: originalX,
      y: originalY,
      alpha: 1,
      scaleX: sprite.scaleX * 3.33,  // Retour √† la taille normale
      scaleY: sprite.scaleY * 3.33,
      duration: 1200,
      ease: 'Back.easeOut',
      onComplete: () => {
        // Animation d'atterrissage
        this.tweens.add({
          targets: sprite,
          y: originalY + 10,
          duration: 400,
          yoyo: true,
          ease: 'Bounce.easeOut'
        });
      }
    });
  }

  // üÜï M√âTHODE: Effet shiny
  addShinyEffect(sprite) {
    if (!sprite) return;
    
    // Effet scintillant pour les Pok√©mon shiny
    this.tweens.add({
      targets: sprite,
      tint: 0xFFD700,
      duration: 1500,
      yoyo: true,
      repeat: -1,
      ease: 'Sine.easeInOut'
    });
    
    console.log('‚ú® [BattleScene] Effet shiny appliqu√©');
  }

  // üÜï M√âTHODE: Couleurs par type
  getTypeColor(type) {
    const typeColors = {
      'normal': 0xA8A878,
      'fire': 0xF08030,
      'water': 0x6890F0,
      'electric': 0xF8D030,
      'grass': 0x78C850,
      'ice': 0x98D8D8,
      'fighting': 0xC03028,
      'poison': 0xA040A0,
      'ground': 0xE0C068,
      'flying': 0xA890F0,
      'psychic': 0xF85888,
      'bug': 0xA8B820,
      'rock': 0xB8A038,
      'ghost': 0x705898,
      'dragon': 0x7038F8,
      'dark': 0x705848,
      'steel': 0xB8B8D0,
      'fairy': 0xEE99AC
    };
    
    return typeColors[type.toLowerCase()] || 0xFFFFFF;
  }

  // üÜï M√âTHODES DE BASE (temporaires pour cette √©tape)
  setupBasicBattleManager() {
    // Version simplifi√©e pour tester les sprites
    console.log('‚öîÔ∏è [BattleScene] Setup BattleManager basique pour tests sprites');
  }

  setupBasicEvents() {
    // √âv√©nements de base pour tests
    console.log('üîó [BattleScene] Setup √©v√©nements basiques');
  }

  // üÜï M√âTHODE DE TEST: Afficher des Pok√©mon de test
  testDisplayPokemon() {
    console.log('üß™ [BattleScene] Test affichage Pok√©mon...');
    
    // ‚úÖ CORRECTION: Nettoyer d'abord tous les sprites existants
    this.clearAllPokemonSprites();
    
    // Pok√©mon joueur test
    const testPlayerPokemon = {
      pokemonId: 4,
      id: 'player_charizard',
      name: 'Charmander',
      level: 5,
      currentHp: 18,
      maxHp: 18,
      types: ['fire']
    };
    
    // Pok√©mon adversaire test
    const testOpponentPokemon = {
      pokemonId: 25,
      id: 'wild_pikachu',
      name: 'Pikachu',
      level: 8,
      currentHp: 25,
      maxHp: 25,
      types: ['electric'],
      shiny: false
    };
    
    // Afficher avec d√©lai pour l'effet
    setTimeout(() => {
      this.displayPlayerPokemon(testPlayerPokemon);
    }, 500);
    
    setTimeout(() => {
      this.displayOpponentPokemon(testOpponentPokemon);
    }, 1200);
  }

  // üÜï M√âTHODE: Nettoyer tous les sprites Pok√©mon
  clearAllPokemonSprites() {
    console.log('üßπ [BattleScene] Nettoyage de tous les sprites Pok√©mon...');
    
    // Supprimer le sprite joueur
    if (this.playerPokemonSprite) {
      this.playerPokemonSprite.destroy();
      this.playerPokemonSprite = null;
    }
    
    // Supprimer le sprite adversaire
    if (this.opponentPokemonSprite) {
      this.opponentPokemonSprite.destroy();
      this.opponentPokemonSprite = null;
    }
    
    // ‚úÖ CORRECTION: Nettoyer TOUS les sprites avec les tags "pokemon"
    // Au cas o√π il y aurait des sprites orphelins
    const allChildren = this.children.list.slice(); // Copie pour √©viter les modifications pendant l'it√©ration
    allChildren.forEach(child => {
      if (child.texture && (
        child.texture.key.includes('pokemon_') || 
        child.texture.key.includes('placeholder') ||
        (child.getData && child.getData('isPokemon'))
      )) {
        console.log('üóëÔ∏è [BattleScene] Suppression sprite orphelin:', child.texture.key);
        child.destroy();
      }
    });
    
    // Nettoyer les donn√©es
    this.currentPlayerPokemon = null;
    this.currentOpponentPokemon = null;
    
    console.log('‚úÖ [BattleScene] Nettoyage termin√©');
  }

  // === M√âTHODES PUBLIQUES ===

  /**
   * üÜï M√âTHODE REQUISE: Gestion du d√©but de rencontre (appel√©e par BattleUITransition)
   */
  handleEncounterStart(encounterData) {
    console.log('üêæ [BattleScene] handleEncounterStart appel√©e:', encounterData);
    
    if (!this.isActive) {
      console.warn('‚ö†Ô∏è [BattleScene] Sc√®ne non active, activation...');
      if (this.scene && this.scene.wake) {
        this.scene.wake();
      }
    }
    
    // S'assurer que les positions sont calcul√©es
    if (!this.pokemonPositions?.playerAbsolute) {
      this.createPokemonPositions();
    }
    
    // Afficher le Pok√©mon adversaire de la rencontre
    if (encounterData.pokemon) {
      console.log('üëπ [BattleScene] Affichage Pok√©mon de la rencontre...');
      this.displayOpponentPokemon(encounterData.pokemon);
    }
    
    // Pour les tests, afficher aussi un Pok√©mon joueur par d√©faut
    if (!this.currentPlayerPokemon) {
      console.log('üë§ [BattleScene] Affichage Pok√©mon joueur par d√©faut...');
      const defaultPlayerPokemon = {
        pokemonId: 4,
        id: 'player_charmander',
        name: 'Charmander',
        level: 5,
        currentHp: 18,
        maxHp: 18,
        types: ['fire']
      };
      this.displayPlayerPokemon(defaultPlayerPokemon);
    }
    
    this.isVisible = true;
    console.log('‚úÖ [BattleScene] Rencontre trait√©e avec succ√®s');
  }

  /**
   * Point d'entr√©e principal pour d√©marrer un combat
   */
  startBattle(battleData) {
    console.log('‚öîÔ∏è [BattleScene] D√©marrage combat avec sprites:', battleData);
    
    if (!this.isActive) {
      console.error('‚ùå [BattleScene] Sc√®ne non active');
      return;
    }
    
    // R√©veiller la sc√®ne si n√©cessaire
    if (this.scene && !this.scene.isActive()) {
      this.scene.wake();
    }
    
    // Afficher les Pok√©mon
    if (battleData.playerPokemon) {
      this.displayPlayerPokemon(battleData.playerPokemon);
    }
    
    if (battleData.opponentPokemon) {
      this.displayOpponentPokemon(battleData.opponentPokemon);
    }
    
    this.isVisible = true;
  }

  /**
   * Masquer la sc√®ne de combat
   */
  hideBattle() {
    console.log('üñ•Ô∏è [BattleScene] Masquage combat...');
    
    this.isVisible = false;
    
    if (this.scene && this.scene.sleep) {
      this.scene.sleep();
    }
  }

  // === NETTOYAGE ===

  destroy() {
    console.log('üíÄ [BattleScene] Destruction...');
    
    // Nettoyer les sprites
    if (this.playerPokemonSprite) {
      this.playerPokemonSprite.destroy();
      this.playerPokemonSprite = null;
    }
    
    if (this.opponentPokemonSprite) {
      this.opponentPokemonSprite.destroy();
      this.opponentPokemonSprite = null;
    }
    
    if (this.battleBackground) {
      this.battleBackground.destroy();
      this.battleBackground = null;
    }
    
    // Nettoyer les donn√©es
    this.currentPlayerPokemon = null;
    this.currentOpponentPokemon = null;
    
    super.destroy();
    
    console.log('‚úÖ [BattleScene] D√©truite');
  }
}

// üÜï FONCTION POUR TESTER DIFF√âRENTES TAILLES DE FRAMES
window.testFrameSize = function(width, height, type = 'both') {
  console.log(`üîç Test de taille de frame: ${width}x${height} pour ${type}`);
  
  const scene = window.game?.scene?.getScene('BattleScene');
  if (scene) {
    // Supprimer les textures existantes selon le type
    const texturesToRemove = [];
    
    if (type === 'back' || type === 'both') {
      texturesToRemove.push('pokemon_4_back');
    }
    if (type === 'front' || type === 'both') {
      texturesToRemove.push('pokemon_25_front');
    }
    
    texturesToRemove.forEach(key => {
      if (scene.textures.exists(key)) {
        scene.textures.remove(key);
        console.log(`üóëÔ∏è Texture ${key} supprim√©e`);
      }
    });
    
    // Recharger avec la nouvelle taille
    if (type === 'back' || type === 'both') {
      scene.load.spritesheet('pokemon_4_back', 'assets/pokemon/charmander/back.png', {
        frameWidth: width,
        frameHeight: height
      });
    }
    
    if (type === 'front' || type === 'both') {
      scene.load.spritesheet('pokemon_25_front', 'assets/pokemon/pikachu/front.png', {
        frameWidth: width,
        frameHeight: height
      });
    }
    
    scene.load.start();
    
    scene.load.once('complete', () => {
      console.log(`‚úÖ Rechargement termin√© avec ${width}x${height} pour ${type}`);
      // Relancer le test
      window.testBattleSprites();
    });
  }
};

// üîß AUTO-CORRECTION DU SYST√àME DE COMBAT R√âEL
window.fixRealBattleSystem = function() {
  console.log('üîß === CORRECTION AUTOMATIQUE DU SYST√àME DE COMBAT ===');
  
  let fixesApplied = 0;
  
  // 1. Corriger BattleUITransition
  if (window.fixBattleUITransition) {
    window.fixBattleUITransition();
    fixesApplied++;
    console.log('‚úÖ BattleUITransition corrig√©e');
  }
  
  if (window.fixBattleEndTransition) {
    window.fixBattleEndTransition();
    fixesApplied++;
    console.log('‚úÖ Fin de combat corrig√©e');
  }
  
  // 2. Corriger le BattleIntegration si disponible
  if (window.gameManager?.battleIntegration) {
    const battleIntegration = window.gameManager.battleIntegration;
    
    if (battleIntegration.handleWildEncounterStart) {
      const originalHandler = battleIntegration.handleWildEncounterStart.bind(battleIntegration);
      
      battleIntegration.handleWildEncounterStart = function(data) {
        console.log('üêæ [BattleIntegration CORRIG√â] Rencontre sauvage avec masquage UI complet');
        
        // ‚úÖ MASQUER COMPL√àTEMENT L'UI AVANT TOUT
        if (window.hideAllUI) {
          const hiddenCount = window.hideAllUI();
          console.log(`‚úÖ [BattleIntegration] ${hiddenCount} √©l√©ments UI masqu√©s`);
        }
        
        // Appeler l'handler original
        return originalHandler(data);
      };
      
      fixesApplied++;
      console.log('‚úÖ BattleIntegration.handleWildEncounterStart corrig√©');
    }
  }
  
  // 3. Corriger directement dans le network handler si accessible
  if (window.globalNetworkManager?.battleNetworkHandler) {
    const battleHandler = window.globalNetworkManager.battleNetworkHandler;
    
    if (battleHandler.handleWildEncounterStart) {
      const originalNetworkHandler = battleHandler.handleWildEncounterStart.bind(battleHandler);
      
      battleHandler.handleWildEncounterStart = function(data) {
        console.log('üåê [BattleNetworkHandler CORRIG√â] Rencontre avec masquage UI');
        
        // ‚úÖ MASQUER L'UI IMM√âDIATEMENT
        if (window.hideAllUI) {
          window.hideAllUI();
        }
        
        return originalNetworkHandler(data);
      };
      
      fixesApplied++;
      console.log('‚úÖ BattleNetworkHandler.handleWildEncounterStart corrig√©');
    }
  }
  
  // 4. Hook sur tous les √©v√©nements wildEncounterStart possibles
  if (window.addEventListener) {
    window.addEventListener('wildEncounterStart', function(event) {
      console.log('üé£ [HOOK] wildEncounterStart intercept√© - masquage UI');
      if (window.hideAllUI) {
        window.hideAllUI();
      }
    });
    fixesApplied++;
    console.log('‚úÖ Hook global wildEncounterStart ajout√©');
  }
  
  console.log(`üéØ ${fixesApplied} corrections appliqu√©es au syst√®me de combat`);
  console.log('‚úÖ Le syst√®me devrait maintenant cacher le QuestTracker automatiquement');
  
  return fixesApplied > 0;
};

// üß™ FONCTION DE TEST DU SYST√àME CORRIG√â
window.testRealBattle = function() {
  console.log('üß™ Test du syst√®me de combat r√©el...');
  
  // Appliquer les corrections
  const fixed = window.fixRealBattleSystem();
  
  if (fixed) {
    console.log('‚úÖ Corrections appliqu√©es, le combat dans l\'herbe devrait maintenant masquer le QuestTracker');
    console.log('üå± Allez dans l\'herbe pour tester !');
  } else {
    console.warn('‚ö†Ô∏è Aucune correction appliqu√©e - v√©rifiez que le syst√®me de combat est charg√©');
  }
  
  // Afficher l'√©tat actuel
  window.debugUIState();
};

// üÜï FONCTION POUR TESTER AVEC CALCUL AUTOMATIQUE
window.testSpritesheetCalculation = function() {
  console.log('üßÆ Test calcul automatique spritesheet 9x9...');
  
  // Exemples de tailles communes
  const commonSizes = [
    { w: 360, h: 360, name: "360x360 (40x40 par frame)" },
    { w: 405, h: 405, name: "405x405 (45x45 par frame)" },
    { w: 576, h: 576, name: "576x576 (64x64 par frame)" },
    { w: 720, h: 720, name: "720x720 (80x80 par frame)" },
    { w: 288, h: 288, name: "288x288 (32x32 par frame)" }
  ];
  
  console.log('üîç Calculs pour diff√©rentes tailles d\'images:');
  commonSizes.forEach(size => {
    const result = window.calculateFrameSize9x9(size.w, size.h);
    console.log(`üìä ${size.name} ‚Üí Frame: ${result.frameWidth}x${result.frameHeight}`);
  });
  
  console.log('üí° Utilisez: window.testFrameSize9x9(imageWidth, imageHeight)');
};

// üÜï FONCTION POUR TESTER UNE TAILLE SP√âCIFIQUE CALCUL√âE
window.testFrameSize9x9 = function(imageWidth, imageHeight) {
  console.log(`üßÆ Test avec image ${imageWidth}x${imageHeight} en grille 9x9...`);
  
  const { frameWidth, frameHeight } = window.calculateFrameSize9x9(imageWidth, imageHeight);
  
  // Tester avec les back sprites
  window.testFrameSize(frameWidth, frameHeight, 'back');
};

// üÜï FONCTION POUR TESTER TAILLES COMMUNES
window.testCommonFrameSizes = function() {
  console.log('üß™ Test des tailles de frames communes...');
  
  const sizes = [
    { w: 32, h: 32, name: 'Mini' },
    { w: 40, h: 45, name: 'Back Pok√©mon (sp√©cialis√©)' }, // ‚úÖ AJOUT√â
    { w: 48, h: 48, name: 'Petite' },
    { w: 64, h: 64, name: 'Classique' },
    { w: 80, h: 80, name: 'Moyenne' },
    { w: 96, h: 96, name: 'Grande' },
    { w: 128, h: 128, name: 'Tr√®s grande' }
  ];
  
  console.log('üìè Tailles disponibles:');
  sizes.forEach((size, index) => {
    console.log(`${index + 1}. ${size.name}: ${size.w}x${size.h} - window.testFrameSize(${size.w}, ${size.h})`);
  });
  
  console.log('üí° Fonctions sp√©cialis√©es:');
  console.log('üéØ Back sprites 40x45: window.testBackSprites40x45()');
  console.log('üéØ Front sprites 64x64: window.testFrameSize(64, 64, "front")');
};

// üÜï FONCTION POUR NETTOYER L'√âCRAN
window.clearBattleScreen = function() {
  console.log('üßπ Nettoyage de l\'√©cran de combat...');
  
  const battleScene = window.game?.scene?.getScene('BattleScene');
  if (battleScene && battleScene.clearAllPokemonSprites) {
    battleScene.clearAllPokemonSprites();
    console.log('‚úÖ √âcran nettoy√©');
  } else {
    console.warn('‚ö†Ô∏è BattleScene non trouv√©e ou m√©thode manquante');
  }
};

// üÜï FONCTION DE TEST GLOBALE AVEC UI FORC√âE (VERSION AM√âLIOR√âE)
window.testBattleSprites = function() {
  console.log('üß™ Test affichage sprites Pok√©mon avec UI cach√©e...');
  
  // ‚úÖ √âTAPE 0: Nettoyer d'abord l'√©cran
  window.clearBattleScreen();
  
  // ‚úÖ √âTAPE 1: UTILISER LA FONCTION QUI FONCTIONNE
  console.log('üéÆ Masquage complet de l\'UI...');
  const hiddenCount = window.hideAllUI();
  console.log(`‚úÖ ${hiddenCount} √©l√©ments UI masqu√©s`);
  
  // ‚úÖ √âTAPE 2: Activer la BattleScene imm√©diatement
  setTimeout(() => {
    const battleScene = window.game?.scene?.getScene('BattleScene');
    if (battleScene) {
      // Activer la BattleScene
      if (!window.game.scene.isActive('BattleScene')) {
        console.log('üé¨ Activation de la BattleScene...');
        window.game.scene.start('BattleScene');
        
        // Attendre que la sc√®ne soit cr√©√©e
        setTimeout(() => {
          const activeBattleScene = window.game.scene.getScene('BattleScene');
          if (activeBattleScene) {
            activeBattleScene.testDisplayPokemon();
          }
        }, 500);
      } else {
        battleScene.testDisplayPokemon();
      }
      
      console.log('‚úÖ Test lanc√© - L\'UI est COMPL√àTEMENT cach√©e (QuestTracker inclus)');
    } else {
      console.error('‚ùå BattleScene non trouv√©e');
    }
  }, 300); // D√©lai r√©duit car hideAllUI() est instantan√©
};

// üÜï FONCTION DE TEST DES RENCONTRES AVEC UI FORC√âE
window.testBattleEncounter = function() {
  console.log('üß™ Test rencontre via BattleUITransition avec UI forc√©e...');
  
  // ‚úÖ FORCER le mode battle
  console.log('üéÆ FOR√áAGE du mode battle...');
  
  if (window.pokemonUISystem) {
    // Mode battle avec force
    window.pokemonUISystem.setGameState('battle', { 
      animated: true,
      force: true 
    });
    
    // Double v√©rification - masquer explicitement
    ['inventory', 'team', 'quest', 'questTracker', 'chat'].forEach(moduleId => {
      window.pokemonUISystem.hideModule(moduleId, { animated: false });
      window.pokemonUISystem.disableModule(moduleId);
    });
    
    console.log('‚úÖ Mode battle forc√© et modules cach√©s');
  }
  
  // Attendre puis lancer la rencontre
  setTimeout(() => {
    const battleScene = window.game?.scene?.getScene('BattleScene');
    if (battleScene) {
      // Simuler une rencontre
      const encounterData = {
        pokemon: {
          pokemonId: 25,
          id: 'wild_pikachu_test',
          name: 'Pikachu',
          level: 8,
          currentHp: 25,
          maxHp: 25,
          types: ['electric'],
          shiny: false
        },
        location: 'test_zone',
        method: 'debug_encounter'
      };
      
      // Activer la sc√®ne si n√©cessaire
      if (!window.game.scene.isActive('BattleScene')) {
        window.game.scene.start('BattleScene');
        setTimeout(() => {
          const activeBattleScene = window.game.scene.getScene('BattleScene');
          if (activeBattleScene) {
            activeBattleScene.handleEncounterStart(encounterData);
          }
        }, 500);
      } else {
        battleScene.handleEncounterStart(encounterData);
      }
      
      console.log('‚úÖ Test de rencontre lanc√© avec UI cach√©e');
    } else {
      console.error('‚ùå BattleScene non trouv√©e');
    }
  }, 800);
};

// üÜï FONCTION DE DEBUG DE L'UI
window.debugUIState = function() {
  console.log('üîç === DEBUG √âTAT UI ===');
  
  if (window.pokemonUISystem) {
    console.log('üìä √âtat global:', window.pokemonUISystem.globalState);
    console.log('üéÆ √âtat de jeu actuel:', window.pokemonUISystem.globalState.currentGameState);
    
    // V√©rifier chaque module
    ['inventory', 'team', 'quest', 'questTracker', 'chat'].forEach(moduleId => {
      const module = window.pokemonUISystem.getModule(moduleId);
      const state = window.pokemonUISystem.getModuleState(moduleId);
      
      console.log(`üî∏ ${moduleId}:`, {
        initialized: window.pokemonUISystem.isModuleInitialized(moduleId),
        state: state,
        visible: state?.visible,
        enabled: state?.enabled,
        domElement: !!module?.iconElement,
        domVisible: module?.iconElement ? 
          window.getComputedStyle(module.iconElement).display !== 'none' : 'N/A'
      });
    });
    
    // V√©rifier les √©l√©ments DOM
    const elementsToCheck = [
      '#inventory-icon', '#team-icon', '#quest-icon', 
      '#questTracker', '#quest-tracker', '#chat'  // ‚úÖ AJOUT√â quest-tracker
    ];
    
    console.log('üîç V√©rification DOM:');
    elementsToCheck.forEach(selector => {
      const element = document.querySelector(selector);
      if (element) {
        const style = window.getComputedStyle(element);
        console.log(`üî∏ ${selector}:`, {
          exists: true,
          display: style.display,
          visibility: style.visibility,
          opacity: style.opacity,
          zIndex: style.zIndex
        });
      } else {
        console.log(`üî∏ ${selector}: NOT FOUND`);
      }
    });
    
    // ‚úÖ NOUVEAU: V√©rifier sp√©cifiquement le QuestTracker
    const questTracker = document.querySelector('#quest-tracker');
    if (questTracker) {
      console.log('üéØ QUEST TRACKER sp√©cifique:', {
        className: questTracker.className,
        style: questTracker.style.cssText,
        offsetParent: !!questTracker.offsetParent,
        clientHeight: questTracker.clientHeight,
        isConnected: questTracker.isConnected
      });
    }
  } else {
    console.error('‚ùå PokemonUISystem non trouv√©');
  }
  
  console.log('üîç === FIN DEBUG ===');
};

// üÜï FONCTION SP√âCIALIS√âE POUR MASQUER COMPL√àTEMENT L'UI
window.hideAllUI = function() {
  console.log('üö´ Masquage complet de toute l\'UI...');
  
  // 1. Via le syst√®me UI
  if (window.pokemonUISystem) {
    window.pokemonUISystem.setGameState('battle', { animated: false, force: true });
    ['inventory', 'team', 'quest', 'questTracker', 'chat'].forEach(moduleId => {
      window.pokemonUISystem.hideModule(moduleId, { animated: false });
      window.pokemonUISystem.disableModule(moduleId);
    });
  }
  
  // 2. Masquage DOM direct de TOUS les √©l√©ments UI possibles
  const allUIElements = [
    // Modules classiques
    '#inventory-icon', '#team-icon', '#quest-icon', '#chat',
    '.inventory-ui', '.team-ui', '.quest-ui', '.chat-container',
    
    // QuestTracker sp√©cifique
    '#questTracker', '#quest-tracker', '.quest-tracker',
    
    // Classes g√©n√©riques
    '.ui-icon', '.game-icon', '.interface-icon',
    '.ui-module', '.game-module',
    
    // Autres √©l√©ments UI potentiels
    '.minimap', '.health-bar', '.status-bar',
    '.notification-container', '.tooltip'
  ];
  
  let hiddenCount = 0;
  allUIElements.forEach(selector => {
    const elements = document.querySelectorAll(selector);
    elements.forEach(el => {
      if (window.getComputedStyle(el).display !== 'none') {
        el.style.display = 'none';
        hiddenCount++;
        console.log(`üî∏ Masqu√©: ${selector}`);
      }
    });
  });
  
  console.log(`‚úÖ ${hiddenCount} √©l√©ments UI masqu√©s`);
  
  // 3. V√©rification finale
  const questTracker = document.querySelector('#quest-tracker');
  if (questTracker && window.getComputedStyle(questTracker).display !== 'none') {
    console.log('üéØ Masquage forc√© final du QuestTracker');
    questTracker.style.display = 'none !important';
    questTracker.style.visibility = 'hidden';
    questTracker.style.opacity = '0';
  }
  
  return hiddenCount;
};

// üÜï FONCTION POUR RESTAURER L'UI
window.showAllUI = function() {
  console.log('üëÅÔ∏è Restauration de l\'UI...');
  
  // 1. Via le syst√®me UI
  if (window.pokemonUISystem) {
    window.pokemonUISystem.setGameState('exploration', { animated: true });
  }
  
  // 2. Restauration DOM
  const allUIElements = document.querySelectorAll('[style*="display: none"]');
  let restoredCount = 0;
  
  allUIElements.forEach(el => {
    if (el.style.display === 'none') {
      el.style.display = '';
      el.style.visibility = '';
      el.style.opacity = '';
      restoredCount++;
    }
  });
  
  console.log(`‚úÖ ${restoredCount} √©l√©ments UI restaur√©s`);
  
  return restoredCount;
};

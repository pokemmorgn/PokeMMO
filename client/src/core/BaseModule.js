// core/BaseModule.js - Module de base g√©n√©rique pour syst√®me MMO
// üéØ √âVITE LA DUPLICATION DE CODE entre modules (Team, Inventory, Quest, etc.)
// üìç INT√âGR√â avec UIManager pour positionnement automatique
// üÜï SUPPORT SINGLETON OPTIONNEL par module

/**
 * Classe de base abstraite pour tous les modules du jeu
 * Fournit la logique UIManager commune et les patterns standards
 */
export class BaseModule {
  constructor(moduleId, gameRoom, scene, options = {}) {
    // === CONFIGURATION DE BASE ===
    this.moduleId = moduleId;
    this.gameRoom = gameRoom;
    this.scene = scene;
    this.options = {
      singleton: false,           // Activer pattern Singleton
      autoCloseUI: true,          // Fermer UI par d√©faut
      keyboardShortcut: null,     // Raccourci clavier (ex: 't')
      responsive: true,           // Support responsive
      ...options
    };
    
    // === GESTION SINGLETON ===
    if (this.options.singleton) {
      const instanceKey = `${this.moduleId}Instance`;
      
      // Retourner instance existante si elle existe
      if (this.constructor[instanceKey]) {
        console.log(`‚ôªÔ∏è [${this.moduleId}Module] Instance singleton existante d√©tect√©e`);
        return this.constructor[instanceKey];
      }
      
      // Stocker nouvelle instance
      this.constructor[instanceKey] = this;
    }
    
    // === COMPOSANTS (√Ä IMPL√âMENTER DANS CLASSES FILLES) ===
    this.manager = null;  // Business logic (ex: TeamManager)
    this.icon = null;     // Ic√¥ne UI (ex: TeamIcon)
    this.ui = null;       // Interface (ex: TeamUI)
    
    // === √âTAT UIMANAGER STANDARDIS√â ===
    this.uiManagerState = {
      visible: true,        // Ic√¥ne visible par d√©faut
      enabled: true,        // Module activ√©
      initialized: false    // Non encore initialis√©
    };
    
    // === CONFIGURATION UIMANAGER PAR D√âFAUT ===
    this.uiManagerConfig = {
      anchor: 'bottom-right',
      order: 0,
      group: 'ui-icons',
      spacing: 10,
      size: { width: 70, height: 80 },
      ...options.uiManagerConfig
    };
    
    console.log(`üÜï [${this.moduleId}Module] Nouvelle instance cr√©√©e`);
  }
  
  // === üéØ M√âTHODES ABSTRAITES (√Ä IMPL√âMENTER) ===
  
  /**
   * Initialisation sp√©cifique du module
   * DOIT √™tre impl√©ment√©e dans les classes filles
   */
  async init() {
    throw new Error(`${this.moduleId}Module: m√©thode init() doit √™tre impl√©ment√©e`);
  }
  
  /**
   * Cr√©ation des composants (manager, icon, ui)
   * DOIT √™tre impl√©ment√©e dans les classes filles
   */
  createComponents() {
    throw new Error(`${this.moduleId}Module: m√©thode createComponents() doit √™tre impl√©ment√©e`);
  }
  
  /**
   * Connexion des composants entre eux
   * DOIT √™tre impl√©ment√©e dans les classes filles
   */
  connectComponents() {
    throw new Error(`${this.moduleId}Module: m√©thode connectComponents() doit √™tre impl√©ment√©e`);
  }
  
  /**
   * Cr√©ation de l'ic√¥ne pour UIManager
   * Peut √™tre surcharg√©e dans les classes filles
   */
  async createIcon() {
    console.log(`üé® [${this.moduleId}Module] Cr√©ation ic√¥ne g√©n√©rique...`);
    
    // Si les composants ne sont pas encore cr√©√©s, les cr√©er
    if (!this.icon) {
      this.createComponents();
    }
    
    // Retourner l'√©l√©ment ic√¥ne si disponible
    if (this.icon && this.icon.iconElement) {
      console.log(`‚úÖ [${this.moduleId}Module] Ic√¥ne disponible pour UIManager`);
      return this.icon.iconElement;
    }
    
    console.warn(`‚ùå [${this.moduleId}Module] Impossible de cr√©er l'ic√¥ne`);
    return null;
  }
  
  // === üöÄ INITIALISATION PROT√âG√âE G√âN√âRIQUE ===
  
  async initializeModule() {
    try {
      // √âviter double initialisation
      if (this.uiManagerState.initialized) {
        console.log(`‚ÑπÔ∏è [${this.moduleId}Module] D√©j√† initialis√©, retour instance existante`);
        return this;
      }
      
      console.log(`üöÄ [${this.moduleId}Module] Initialisation...`);
      
      // 1. Appeler l'initialisation sp√©cifique
      await this.init();
      
      // 2. Cr√©er les composants
      this.createComponents();
      
      // 3. Connecter les composants
      this.connectComponents();
      
      // 4. Marquer comme initialis√©
      this.uiManagerState.initialized = true;
      
      // 5. Fermer UI par d√©faut si activ√©
      if (this.options.autoCloseUI) {
        this.forceCloseUI();
      }
      
      // 6. Setup raccourci clavier si d√©fini
      if (this.options.keyboardShortcut) {
        this.setupKeyboardShortcut();
      }
      
      console.log(`‚úÖ [${this.moduleId}Module] Initialis√© avec succ√®s`);
      return this;
      
    } catch (error) {
      console.error(`‚ùå [${this.moduleId}Module] Erreur initialisation:`, error);
      throw error;
    }
  }
  
  // === üìç CONNEXION UIMANAGER S√âCURIS√âE ===
  
  connectUIManager(uiManager) {
    console.log(`üìç [${this.moduleId}Module] Connexion UIManager...`);
    
    if (!uiManager || !uiManager.registerIconPosition) {
      console.warn(`‚ö†Ô∏è [${this.moduleId}Module] UIManager incompatible`);
      return false;
    }
    
    if (!this.icon || !this.icon.iconElement) {
      console.warn(`‚ö†Ô∏è [${this.moduleId}Module] Ic√¥ne non disponible pour UIManager`);
      return false;
    }
    
    // V√©rifier si d√©j√† connect√© (√©viter double connexion)
    if (this.icon.iconElement.hasAttribute('data-positioned-by-uimanager')) {
      console.log(`‚ÑπÔ∏è [${this.moduleId}Module] D√©j√† connect√© √† UIManager, skip`);
      return true;
    }
    
    try {
      // üÜï AFFICHER L'IC√îNE AVANT CONNEXION UIManager
      if (this.uiManagerState.visible && this.icon.show) {
        this.icon.show();
        console.log(`üëÅÔ∏è [${this.moduleId}Module] Ic√¥ne affich√©e avant connexion UIManager`);
      }
      
      // Enregistrer l'ic√¥ne pour positionnement automatique
      uiManager.registerIconPosition(this.moduleId, this.icon.iconElement, this.uiManagerConfig);
      
      // Marquer comme connect√©
      this.icon.iconElement.setAttribute('data-positioned-by-uimanager', 'true');
      
      console.log(`‚úÖ [${this.moduleId}Module] Connect√© √† UIManager avec succ√®s`);
      return true;
      
    } catch (error) {
      console.error(`‚ùå [${this.moduleId}Module] Erreur connexion UIManager:`, error);
      return false;
    }
  }
  
  // === üîß M√âTHODES UTILITAIRES G√âN√âRIQUES ===
  
  /**
   * Assurer la cr√©ation d'ic√¥ne pour UIManager
   */
  ensureIconForUIManager() {
    console.log(`üîß [${this.moduleId}Module] V√©rification ic√¥ne pour UIManager...`);
    
    if (!this.icon) {
      console.log(`üÜï [${this.moduleId}Module] Cr√©ation ic√¥ne manquante...`);
      this.createComponents();
      this.connectComponents();
    }
    
    if (!this.icon.iconElement) {
      console.warn(`‚ùå [${this.moduleId}Module] Impossible de cr√©er iconElement`);
      return false;
    }
    
    // Reset l'√©tat de positionnement
    this.icon.iconElement.removeAttribute('data-positioned-by-uimanager');
    
    console.log(`‚úÖ [${this.moduleId}Module] Ic√¥ne pr√™te pour UIManager`);
    return true;
  }
  
  /**
   * Fermeture forc√©e de l'UI
   */
  forceCloseUI() {
    console.log(`üîí [${this.moduleId}Module] Force fermeture UI...`);
    
    try {
      // M√©thode 1: Via le module UI
      if (this.ui && this.ui.hide) {
        this.ui.hide();
        console.log('  ‚úÖ UI ferm√©e via module');
      }
      
      // M√©thode 2: Fermeture brutale overlay
      const overlay = document.querySelector(`#${this.moduleId}-overlay`);
      if (overlay) {
        overlay.classList.add('hidden');
        overlay.style.display = 'none';
        overlay.style.opacity = '0';
        overlay.style.pointerEvents = 'none';
        console.log('  ‚úÖ Overlay ferm√© brutalement');
      }
      
      // M√©thode 3: Tous les √©l√©ments du module
      const moduleElements = document.querySelectorAll(
        `.${this.moduleId}-overlay, .${this.moduleId}-modal, .${this.moduleId}-interface, [id*="${this.moduleId}-"]`
      );
      moduleElements.forEach(el => {
        if (el.style) {
          el.style.display = 'none';
        }
      });
      
      if (moduleElements.length > 0) {
        console.log(`  ‚úÖ ${moduleElements.length} √©l√©ments ${this.moduleId} ferm√©s`);
      }
      
      // Marquer UI comme ferm√©e
      if (this.ui) {
        this.ui.isVisible = false;
      }
      
      console.log(`‚úÖ [${this.moduleId}Module] UI ferm√©e avec succ√®s (force)`);
      
    } catch (error) {
      console.error(`‚ùå [${this.moduleId}Module] Erreur force fermeture:`, error);
    }
  }
  
  // === üéõÔ∏è INTERFACE UIMANAGER STANDARDIS√âE ===
  
  /**
   * UIManager appelle cette m√©thode pour afficher le module
   */
  show() {
    this.uiManagerState.visible = true;
    
    // Afficher l'ic√¥ne
    if (this.icon) {
      this.icon.show();
    }
    
    // Demander une mise √† jour des donn√©es si manager pr√©sent
    if (this.manager && typeof this.manager.requestData === 'function') {
      setTimeout(() => {
        this.manager.requestData();
      }, 200);
    }
    
    return true;
  }
  
  /**
   * UIManager appelle cette m√©thode pour cacher le module
   */
  hide() {
    this.uiManagerState.visible = false;
    
    // Cacher l'ic√¥ne
    if (this.icon) {
      this.icon.hide();
    }
    
    // Cacher l'interface si ouverte
    if (this.ui && this.ui.isVisible) {
      this.ui.hide();
    }
    
    return true;
  }
  
  /**
   * UIManager appelle cette m√©thode pour activer/d√©sactiver
   */
  setEnabled(enabled) {
    this.uiManagerState.enabled = enabled;
    
    // Appliquer aux composants
    if (this.icon) {
      this.icon.setEnabled(enabled);
    }
    
    if (this.ui) {
      this.ui.setEnabled(enabled);
    }
    
    return true;
  }
  
  /**
   * UIManager peut appeler cette m√©thode pour obtenir l'√©tat
   */
  getUIManagerState() {
    return {
      ...this.uiManagerState,
      iconVisible: this.icon ? this.icon.isVisible : false,
      interfaceVisible: this.ui ? this.ui.isVisible : false,
      singleton: this.options.singleton,
      moduleId: this.moduleId,
      instanceId: this.constructor.name + '_' + (this.gameRoom?.id || 'unknown')
    };
  }
  
  // === üîß GESTION √âTAT G√âN√âRIQUE ===
  
  applyUIManagerState() {
    if (!this.uiManagerState.initialized) return;
    
    // Appliquer visibilit√©
    if (this.uiManagerState.visible) {
      this.icon?.show();
    } else {
      this.icon?.hide();
      this.ui?.hide();
    }
    
    // Appliquer √©tat enabled
    this.icon?.setEnabled(this.uiManagerState.enabled);
    this.ui?.setEnabled(this.uiManagerState.enabled);
  }
  
  /**
   * V√©rifier si on peut ouvrir l'interface (√† surcharger si n√©cessaire)
   */
  canOpenUI() {
    // V√©rifications g√©n√©riques
    const blockers = [
      document.querySelector('.quest-dialog-overlay'),
      document.querySelector('#dialogue-box:not([style*="display: none"])'),
      document.querySelector('#shop-overlay:not(.hidden)')
    ];
    
    const hasBlocker = blockers.some(el => el !== null);
    const chatFocused = typeof window.isChatFocused === 'function' ? window.isChatFocused() : false;
    const inventoryOpen = typeof window.isInventoryOpen === 'function' ? window.isInventoryOpen() : false;
    
    return !hasBlocker && !chatFocused && !inventoryOpen && this.uiManagerState.enabled;
  }
  
  /**
   * Afficher message d'impossibilit√© d'ouverture
   */
  showCannotOpenMessage() {
    if (typeof window.showGameNotification === 'function') {
      window.showGameNotification(`Cannot open ${this.moduleId} right now`, 'warning', {
        duration: 2000,
        position: 'bottom-center'
      });
    }
  }
  
  // === ‚å®Ô∏è RACCOURCI CLAVIER G√âN√âRIQUE ===
  
  setupKeyboardShortcut() {
    const shortcut = this.options.keyboardShortcut;
    if (!shortcut) return;
    
    // √âviter double setup
    const setupKey = `_${this.moduleId}KeyboardSetup`;
    if (window[setupKey]) {
      console.log(`‚ÑπÔ∏è [${this.moduleId}Keyboard] Raccourcis d√©j√† configur√©s`);
      return;
    }
    
    document.addEventListener('keydown', (e) => {
      if (e.key.toLowerCase() === shortcut.toLowerCase() && 
          !e.target.matches('input, textarea, [contenteditable]') &&
          !e.ctrlKey && !e.altKey && !e.metaKey) {
        
        e.preventDefault();
        
        if (this.canOpenUI()) {
          this.toggleUI();
        }
      }
    });
    
    window[setupKey] = true;
    console.log(`‚å®Ô∏è [${this.moduleId}Keyboard] Raccourci '${shortcut}' configur√©`);
  }
  
  // === üìä API PUBLIQUE G√âN√âRIQUE ===
  
  /**
   * Ouvrir/fermer l'interface
   */
  toggleUI() {
    if (this.ui) {
      this.ui.toggle();
    }
  }
  
  /**
   * Ouvrir l'interface
   */
  open() {
    if (this.ui && this.canOpenUI()) {
      this.ui.show();
    }
  }
  
  /**
   * Fermer l'interface
   */
  close() {
    if (this.ui) {
      this.ui.hide();
    }
  }
  
  // === üÜï M√âTHODES STATIQUES SINGLETON ===
  
  /**
   * Obtenir l'instance singleton du module
   */
  static getInstance(moduleId) {
    const instanceKey = `${moduleId}Instance`;
    return this[instanceKey] || null;
  }
  
  /**
   * Reset l'instance singleton
   */
  static reset(moduleId) {
    const instanceKey = `${moduleId}Instance`;
    if (this[instanceKey]) {
      this[instanceKey].destroy();
      this[instanceKey] = null;
    }
  }
  
  /**
   * V√©rifier si une instance singleton existe
   */
  static hasInstance(moduleId) {
    const instanceKey = `${moduleId}Instance`;
    return this[instanceKey] !== null;
  }
  
  // === üßπ NETTOYAGE G√âN√âRIQUE ===
  
  destroy() {
    try {
      console.log(`üßπ [${this.moduleId}Module] Destruction...`);
      
      // D√©truire les composants dans l'ordre inverse
      if (this.ui) {
        this.ui.destroy?.();
        this.ui = null;
      }
      
      if (this.icon) {
        this.icon.destroy?.();
        this.icon = null;
      }
      
      if (this.manager) {
        this.manager.destroy?.();
        this.manager = null;
      }
      
      // Reset √©tat
      this.uiManagerState.initialized = false;
      
      // Reset singleton si applicable
      if (this.options.singleton) {
        const instanceKey = `${this.moduleId}Instance`;
        if (this.constructor[instanceKey] === this) {
          this.constructor[instanceKey] = null;
          console.log(`üßπ [${this.moduleId}Module] Singleton reset√©`);
        }
      }
      
      console.log(`‚úÖ [${this.moduleId}Module] Destruction termin√©e`);
      
    } catch (error) {
      console.error(`‚ùå [${this.moduleId}Module] Erreur destruction:`, error);
    }
  }
}

// === üè≠ FACTORY G√âN√âRIQUE ===

/**
 * Factory function g√©n√©rique pour cr√©er des modules
 * @param {Class} ModuleClass - Classe du module (ex: TeamModule)
 * @param {string} moduleId - ID du module (ex: 'team')
 * @param {Object} gameRoom - Room de jeu
 * @param {Object} scene - Sc√®ne Phaser
 * @param {Object} options - Options du module
 */
export async function createModule(ModuleClass, moduleId, gameRoom, scene, options = {}) {
  try {
    console.log(`üè≠ [${moduleId}Factory] Cr√©ation/r√©cup√©ration module...`);
    
    // V√©rifier si instance singleton existe si activ√©
    if (options.singleton) {
      const instanceKey = `${moduleId}Instance`;
      let existingInstance = ModuleClass[instanceKey];
      
      if (existingInstance && existingInstance.uiManagerState.initialized) {
        console.log(`‚ôªÔ∏è [${moduleId}Factory] Instance singleton trouv√©e...`);
        
        // Fermer l'UI si elle est ouverte (√©viter conflit)
        existingInstance.forceCloseUI();
        
        // V√©rifier compatibilit√© gameRoom
        if (existingInstance.gameRoom !== gameRoom) {
          console.log(`üîÑ [${moduleId}Factory] GameRoom diff√©rent, mise √† jour...`);
          existingInstance.gameRoom = gameRoom;
          existingInstance.scene = scene;
          
          // Reconnecter le manager si n√©cessaire
          if (existingInstance.manager) {
            existingInstance.manager.gameRoom = gameRoom;
          }
        }
        
        return existingInstance;
      }
    }
    
    // Cr√©er nouvelle instance
    console.log(`üÜï [${moduleId}Factory] Cr√©ation nouvelle instance...`);
    const moduleInstance = new ModuleClass(moduleId, gameRoom, scene, options);
    await moduleInstance.initializeModule();
    
    console.log(`‚úÖ [${moduleId}Factory] Module cr√©√© avec succ√®s`);
    return moduleInstance;
    
  } catch (error) {
    console.error(`‚ùå [${moduleId}Factory] Erreur cr√©ation module:`, error);
    throw error;
  }
}

// === üìã G√âN√âRATEUR DE CONFIGURATION UIMANAGER ===

/**
 * G√©n√©rer la configuration UIManager pour un module
 * @param {string} moduleId - ID du module
 * @param {Object} config - Configuration sp√©cifique
 */
export function generateModuleConfig(moduleId, config = {}) {
  return {
    id: moduleId,
    factory: () => config.factory || (() => createModule(config.moduleClass, moduleId, window.currentGameRoom, window.game?.scene?.getScenes(true)[0], config.options)),
    
    defaultState: {
      visible: true,
      enabled: true,
      initialized: false,
      ...config.defaultState
    },
    
    priority: config.priority || 100,
    critical: config.critical || false,
    
    layout: {
      type: 'icon',
      anchor: 'bottom-right',
      order: config.order || 0,
      spacing: 10,
      ...config.layout
    },
    
    responsive: {
      mobile: { scale: 0.8, position: { right: '15px', bottom: '15px' } },
      tablet: { scale: 0.9 },
      desktop: { scale: 1.0 },
      ...config.responsive
    },
    
    groups: config.groups || ['ui-icons'],
    
    animations: {
      show: { type: 'fadeIn', duration: 300, easing: 'ease-out' },
      hide: { type: 'fadeOut', duration: 200, easing: 'ease-in' },
      enable: { type: 'pulse', duration: 150 },
      disable: { type: 'grayscale', duration: 200 },
      ...config.animations
    },
    
    metadata: {
      name: config.name || `${moduleId} Module`,
      description: config.description || `${moduleId} management system`,
      version: config.version || '1.0.0',
      category: config.category || 'Game Management',
      singleton: config.options?.singleton || false,
      ...config.metadata
    }
  };
}

// === üîß UTILITAIRES DE DEBUG G√âN√âRIQUES ===

/**
 * Debug d'un module sp√©cifique
 */
export function debugModule(moduleId, ModuleClass) {
  const instanceKey = `${moduleId}Instance`;
  const instance = ModuleClass[instanceKey];
  
  const info = {
    hasSingleton: !!instance,
    isInitialized: instance ? instance.uiManagerState.initialized : false,
    hasIcon: instance ? !!instance.icon : false,
    hasUI: instance ? !!instance.ui : false,
    uiVisible: instance ? instance.ui?.isVisible : false,
    iconVisible: instance ? instance.icon?.isVisible : false,
    gameRoom: instance ? !!instance.gameRoom : false,
    
    state: instance ? instance.getUIManagerState() : null,
    
    solutions: instance ? [
      '‚úÖ Instance OK - utilisez forceCloseUI()',
      `üîí window.${moduleId}System.forceCloseUI() pour fermer UI`,
      `üîÑ window.${moduleId}SystemGlobal pour acc√®s direct`
    ] : [
      `üöÄ Cr√©ez avec createModule(${ModuleClass.name}, '${moduleId}', ...)`,
      `üîß Utilisez la factory g√©n√©rique`
    ]
  };
  
  console.log(`üîç === DEBUG ${moduleId.toUpperCase()} MODULE ===`);
  console.table(info);
  
  return info;
}

export default BaseModule;

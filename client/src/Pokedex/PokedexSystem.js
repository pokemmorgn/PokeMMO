// PokedexSystem.js - SYST√àME POK√âDX CORRIG√â AVEC NOTIFICATION UI
// üéÆ Chef d'orchestre qui notifie l'UI

export class PokedexSystem {
  constructor(scene, gameRoom) {
    this.scene = scene;
    this.gameRoom = gameRoom;
    this.pokedxUI = null;
    this.pokedxIcon = null;
    this.pokedxData = {};
    this.playerProgress = {};
    this.isInitialized = false;
    
    console.log('üöÄ [PokedexSystem] Initialisation syst√®me Pok√©dx...');
    this.init();
  }

  async init() {
    try {
      // Initialiser les composants
      await this.initializeUI();
      this.initializeIcon();
      
      // Configuration syst√®me
      this.setupKeyboardShortcuts();
      this.setupSystemIntegrations();
      this.setupInteractions();
      this.setupServerListeners();
      
      // Chargement donn√©es initial
      this.initializeDefaultData();
      
      this.isInitialized = true;
      console.log('‚úÖ [PokedexSystem] Syst√®me Pok√©dx initialis√©');
      
      // Demander les donn√©es du serveur
      this.requestPokedxData();
      
    } catch (error) {
      console.error('‚ùå [PokedexSystem] Erreur initialisation:', error);
    }
  }

  async initializeUI() {
    try {
      const { PokedexUI } = await import('./PokedexUI.js');
      this.pokedxUI = new PokedexUI(this.gameRoom);
      console.log('‚úÖ [PokedexSystem] PokedexUI initialis√©');
    } catch (error) {
      console.error('‚ùå [PokedexSystem] Erreur chargement PokedexUI:', error);
    }
  }

  initializeIcon() {
    try {
      // L'ic√¥ne sera cr√©√©e par le module parent
      console.log('‚úÖ [PokedexSystem] Ic√¥ne configur√©e');
    } catch (error) {
      console.error('‚ùå [PokedexSystem] Erreur ic√¥ne:', error);
    }
  }

  setupKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
      // Raccourci 'P' pour ouvrir/fermer
      if (e.key.toLowerCase() === 'p' && !e.ctrlKey && !e.altKey && !e.metaKey) {
        // V√©rifier que ce n'est pas dans un input
        if (this.canPlayerInteract()) {
          e.preventDefault();
          this.toggle();
        }
      }
    });
    console.log('‚å®Ô∏è [PokedexSystem] Raccourcis clavier configur√©s');
  }

  setupSystemIntegrations() {
    // Int√©gration avec d'autres syst√®mes du jeu
    console.log('üîó [PokedexSystem] Int√©grations syst√®me configur√©es');
  }

  setupInteractions() {
    // Interactions avec le monde du jeu
    console.log('üîó [PokedexSystem] Interactions configur√©es');
  }

  // === üì° LISTENERS SERVEUR - POINT CENTRAL ===
  
  setupServerListeners() {
    if (!this.gameRoom) return;

    // === DONN√âES PRINCIPALES (g√©r√©es par PokedexSystem) ===
    this.gameRoom.onMessage("pokedx:get", (response) => {
      console.log('üìä [PokedexSystem] Donn√©es Pok√©dx re√ßues:', response);
      this.handlePokedxData(response);
    });

    this.gameRoom.onMessage("pokedx:stats", (response) => {
      console.log('üìà [PokedexSystem] Stats re√ßues:', response);
      this.handleStatsData(response);
    });

    // === NOTIFICATIONS GLOBALES ===
    this.gameRoom.onMessage("pokedx:discovery", (data) => {
      console.log('‚ú® [PokedexSystem] Nouvelle d√©couverte:', data);
      this.handleDiscoveryNotification(data);
    });

    this.gameRoom.onMessage("pokedx:capture", (data) => {
      console.log('üéØ [PokedexSystem] Nouvelle capture:', data);
      this.handleCaptureNotification(data);
    });

    this.gameRoom.onMessage("pokedx:streak_record", (data) => {
      console.log('üî• [PokedexSystem] Nouveau record streak:', data);
      this.handleStreakRecord(data);
    });

    console.log('üì° [PokedexSystem] Listeners serveur configur√©s et corrig√©s');
  }

  // === üìä GESTION DES DONN√âES RE√áUES ===

  handlePokedxData(response) {
    if (!response.success) {
      console.error('‚ùå [PokedexSystem] Erreur donn√©es Pok√©dx:', response.error);
      return;
    }

    console.log('üìä [PokedexSystem] Traitement donn√©es Pok√©dx...');
    
    // Stocker les donn√©es dans le syst√®me
    this.pokedxData = response.data;
    
    // Mettre √† jour la progression
    if (response.data.summary) {
      this.playerProgress = {
        totalSeen: response.data.summary.totalSeen || 0,
        totalCaught: response.data.summary.totalCaught || 0,
        seenPercentage: response.data.summary.seenPercentage || 0,
        caughtPercentage: response.data.summary.caughtPercentage || 0,
        totalShiny: response.data.summary.shinies?.count || 0,
        lastActivity: new Date()
      };
      
      console.log(`üìä [PokedexSystem] Progression: ${this.playerProgress.totalCaught}/${response.data.summary.totalAvailable} (${Math.round(this.playerProgress.caughtPercentage)}%)`);
    }

    // üÜï NOTIFIER L'UI SI ELLE EST OUVERTE
    if (this.pokedxUI && this.pokedxUI.isVisible) {
      console.log('üì§ [PokedexSystem] Notification UI avec nouvelles donn√©es');
      this.pokedxUI.receiveDataFromSystem(response.data);
    }

    // Mettre √† jour l'ic√¥ne si disponible
    this.updateIconProgress();
  }

  handleStatsData(response) {
    if (!response.success) {
      console.error('‚ùå [PokedexSystem] Erreur stats:', response.error);
      return;
    }

    console.log('üìà [PokedexSystem] Traitement stats...');
    
    // Stocker les stats
    this.playerProgress = { ...this.playerProgress, ...response.data };

    // üÜï NOTIFIER L'UI SI ELLE EST OUVERTE
    if (this.pokedxUI && this.pokedxUI.isVisible) {
      console.log('üì§ [PokedexSystem] Notification UI avec nouvelles stats');
      this.pokedxUI.receiveStatsFromSystem(response.data);
    }

    this.updateIconProgress();
  }

  handleDiscoveryNotification(data) {
    console.log('‚ú® [PokedexSystem] Nouvelle d√©couverte syst√®me:', data);
    
    // Traitement syst√®me global
    this.updateIconProgress();
    
    // Rafra√Æchir les donn√©es apr√®s d√©couverte
    setTimeout(() => {
      this.requestPokedxData();
    }, 1000);
  }

  handleCaptureNotification(data) {
    console.log('üéØ [PokedexSystem] Nouvelle capture syst√®me:', data);
    
    // Traitement syst√®me global
    this.updateIconProgress();
    
    // Rafra√Æchir les donn√©es apr√®s capture
    setTimeout(() => {
      this.requestPokedxData();
    }, 1000);
  }

  handleStreakRecord(data) {
    console.log('üî• [PokedexSystem] Record streak syst√®me:', data);
    
    // Traitement syst√®me des streaks
    this.updateIconProgress();
  }

  // === üì° REQU√äTES AU SERVEUR ===

  requestPokedxData(filters = {}) {
    if (!this.gameRoom) {
      console.warn('‚ö†Ô∏è [PokedexSystem] GameRoom non disponible');
      return;
    }

    console.log('üì° [PokedexSystem] Demande donn√©es Pok√©dx...', filters);
    
    this.gameRoom.send("pokedx:get", {
      filters: {
        limit: 20,
        offset: 0,
        sortBy: 'id',
        sortOrder: 'asc',
        ...filters
      }
    });
  }

  requestStats() {
    if (!this.gameRoom) {
      console.warn('‚ö†Ô∏è [PokedexSystem] GameRoom non disponible');
      return;
    }

    console.log('üì° [PokedexSystem] Demande statistiques...');
    this.gameRoom.send("pokedx:stats");
  }

  // === üéÆ CONTR√îLES PUBLICS ===

  show() {
    if (!this.pokedxUI) {
      console.warn('‚ö†Ô∏è [PokedexSystem] PokedexUI non initialis√©');
      return;
    }
    
    console.log('üì± [PokedexSystem] Ouverture Pok√©dx...');
    this.pokedxUI.show();
    
    // Demander une mise √† jour des donn√©es √† l'ouverture
    this.requestPokedxData();
  }

  hide() {
    if (!this.pokedxUI) return;
    
    console.log('‚ùå [PokedexSystem] Fermeture Pok√©dx...');
    this.pokedxUI.hide();
  }

  toggle() {
    if (!this.pokedxUI) {
      console.warn('‚ö†Ô∏è [PokedexSystem] PokedexUI non initialis√©');
      return;
    }
    
    console.log('üîÑ [PokedexSystem] Toggle Pok√©dx...');
    this.pokedxUI.toggle();
    
    // Si on ouvre, demander les donn√©es
    if (!this.pokedxUI.isVisible) {
      setTimeout(() => {
        if (this.pokedxUI.isVisible) {
          this.requestPokedxData();
        }
      }, 100);
    }
  }

  openToView(viewName) {
    if (!this.pokedxUI) return;
    
    console.log(`üì± [PokedexSystem] Ouverture vue ${viewName}...`);
    this.pokedxUI.openToView(viewName);
    
    // Demander les donn√©es appropri√©es selon la vue
    switch (viewName) {
      case 'stats':
        this.requestStats();
        break;
      default:
        this.requestPokedxData();
        break;
    }
  }

  // === üéØ GESTION DES DONN√âES ===

  initializeDefaultData() {
    this.pokedxData = {
      entries: [],
      availablePokemon: [],
      summary: {
        totalAvailable: 0,
        totalSeen: 0,
        totalCaught: 0,
        seenPercentage: 0,
        caughtPercentage: 0
      }
    };
    
    this.playerProgress = {
      totalSeen: 0,
      totalCaught: 0,
      totalShiny: 0,
      seenPercentage: 0,
      caughtPercentage: 0,
      favoriteCount: 0,
      lastActivity: new Date()
    };
    
    console.log('üìä [PokedexSystem] Donn√©es par d√©faut initialis√©es');
  }

  updateIconProgress() {
    if (this.pokedxIcon && this.pokedxIcon.updateProgress) {
      this.pokedxIcon.updateProgress(this.playerProgress);
    }
  }

  // === üîó INT√âGRATION AVEC D'AUTRES SYST√àMES ===

  markPokemonSeen(pokemonId, level, location, method = 'wild') {
    if (!this.gameRoom) return;

    console.log(`üëÅÔ∏è [PokedexSystem] Marquer #${pokemonId} comme vu...`);
    
    this.gameRoom.send("pokedx:mark_seen", {
      pokemonId,
      level,
      location,
      method
    });
  }

  markPokemonCaught(pokemonId, level, location, ownedPokemonId, isShiny = false) {
    if (!this.gameRoom) return;

    console.log(`üéØ [PokedexSystem] Marquer #${pokemonId} comme captur√©...`);
    
    this.gameRoom.send("pokedx:mark_caught", {
      pokemonId,
      level,
      location,
      ownedPokemonId,
      isShiny,
      method: 'wild'
    });
  }

  // === üõ†Ô∏è UTILITAIRES ===

  canPlayerInteract() {
    // V√©rifier que le joueur peut interagir (pas dans un menu, dialogue, etc.)
    const questDialogOpen = document.querySelector('.quest-dialog-overlay') !== null;
    const chatFocused = typeof window.isChatFocused === 'function' ? window.isChatFocused() : false;
    const starterHudOpen = typeof window.isStarterHUDOpen === 'function' ? window.isStarterHUDOpen() : false;
    const anyInputFocused = document.activeElement && 
      (document.activeElement.tagName === 'INPUT' || document.activeElement.tagName === 'TEXTAREA');
    
    return !questDialogOpen && !chatFocused && !starterHudOpen && !anyInputFocused;
  }

  isOpen() {
    return this.pokedxUI?.isVisible || false;
  }

  getProgress() {
    return { ...this.playerProgress };
  }

  getPokedxData() {
    return { ...this.pokedxData };
  }

  // === üéØ API POUR MODULES EXTERNES ===

  setIcon(iconInstance) {
    this.pokedxIcon = iconInstance;
    console.log('üîó [PokedexSystem] Ic√¥ne associ√©e');
  }

  getUI() {
    return this.pokedxUI;
  }

  getIcon() {
    return this.pokedxIcon;
  }

  // === üîÑ SYNCHRONISATION ===

  forceSync() {
    console.log('üîÑ [PokedexSystem] Synchronisation forc√©e...');
    
    if (this.gameRoom) {
      this.gameRoom.send("pokedx:quick_action", { action: "force_sync" });
    }
    
    // Recharger les donn√©es
    setTimeout(() => {
      this.requestPokedxData();
      this.requestStats();
    }, 1000);
  }

  // === üßπ NETTOYAGE ===

  destroy() {
    console.log('üßπ [PokedexSystem] Destruction syst√®me...');
    
    // Nettoyer l'UI
    if (this.pokedxUI) {
      this.pokedxUI.destroy();
      this.pokedxUI = null;
    }
    
    // Nettoyer l'ic√¥ne
    if (this.pokedxIcon) {
      this.pokedxIcon.destroy();
      this.pokedxIcon = null;
    }
    
    // Reset donn√©es
    this.pokedxData = {};
    this.playerProgress = {};
    this.isInitialized = false;
    
    console.log('‚úÖ [PokedexSystem] Syst√®me d√©truit');
  }
}

// === üåç EXPORT GLOBAL ===
if (typeof window !== 'undefined') {
  window.PokedexSystem = PokedexSystem;
}

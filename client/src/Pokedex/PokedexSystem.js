// Pokedex/PokedexSystem.js - Syst√®me Pok√©dex avec optionsManager + traductions temps r√©el
// üéÆ Logique principale du Pok√©dex + int√©gration serveur + TRADUCTIONS

import { PokedexUI } from './PokedexUI.js';
import { PokedexIcon } from './PokedexIcon.js';

export class PokedexSystem {
  constructor(scene, gameRoom, optionsManager = null) {  // ‚Üê NOUVEAU PARAM√àTRE
    this.scene = scene;
    this.gameRoom = gameRoom;
    this.optionsManager = optionsManager;  // ‚Üê NOUVEAU
    this.pokedexUI = null;
    this.pokedexIcon = null;
    
    // === DONN√âES POK√âDEX ===
    this.pokedexData = {};      // Entr√©es du Pok√©dex
    this.playerStats = {};      // Statistiques du joueur
    this.notifications = [];    // Notifications Pok√©dex
    this.settings = {};         // Param√®tres utilisateur
    
    // === CACHE LOCAL ===
    this.pokemonCache = new Map();
    this.searchCache = new Map();
    this.lastSyncTime = null;
    
    // === √âTAT ===
    this.isInitialized = false;
    this.isSyncing = false;

    // üÜï PROTECTION CONTRE DEMANDES MULTIPLES
    this._isRequestingData = false;
    this._lastRequestTime = null;
    this._requestCooldown = 2000; // 2 secondes entre les demandes
    
    this.init();
  }

  // === üöÄ INITIALISATION ===
  
  init() {
    console.log('üöÄ [PokedexSystem] Initialisation syst√®me Pok√©dex...');
    console.log('üåê [PokedexSystem] OptionsManager disponible:', !!this.optionsManager);
    
    // Cr√©er l'interface Pok√©dex AVEC optionsManager
    this.pokedexUI = new PokedexUI(this.gameRoom, this.optionsManager);
    
    // ‚úÖ CORRECTION : Cr√©er l'ic√¥ne Pok√©dex AVEC optionsManager
    this.pokedexIcon = new PokedexIcon(this.pokedexUI, this.optionsManager);
    
    // Configurer les interactions entre les composants
    this.setupInteractions();
    
    // Configurer les listeners serveur
    this.setupServerListeners();
    
    // Initialiser les donn√©es par d√©faut
    this.initializeDefaultData();
    
    // Rendre le syst√®me accessible globalement
    window.pokedexSystem = this;
    
    this.isInitialized = true;
    console.log('‚úÖ [PokedexSystem] Syst√®me Pok√©dex initialis√© avec traductions');
  }
  
  setupInteractions() {
    // Connecter ic√¥ne ‚Üí UI
    if (this.pokedexIcon) {
      this.pokedexIcon.onClick = () => {
        if (this.canPlayerInteract()) {
          this.pokedexUI.toggle();
        }
      };
    }
    
    // Configurer les raccourcis clavier
    this.setupKeyboardShortcuts();
    
    // Int√©grer avec les autres syst√®mes
    this.setupSystemIntegration();
    
    console.log('üîó [PokedexSystem] Interactions configur√©es');
  }
  
  setupKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
      // Ne pas traiter les raccourcis si on ne peut pas interagir
      if (!this.canPlayerInteract()) return;

      switch (e.key.toLowerCase()) {
        case 'p':
          e.preventDefault();
          this.togglePokedex();
          break;
        case 'f':
          if (e.ctrlKey && this.pokedexUI.isVisible) {
            e.preventDefault();
            this.pokedexUI.openToView('search');
          }
          break;
      }
    });
    
    console.log('‚å®Ô∏è [PokedexSystem] Raccourcis clavier configur√©s');
  }
  
  setupSystemIntegration() {
    // Int√©gration avec le syst√®me de qu√™tes
    if (window.questSystem) {
      // √âcouter les captures pour les qu√™tes
      this.onPokemonCaptured = (pokemonData) => {
        window.questSystem.triggerCaptureEvent(pokemonData.pokemonId, pokemonData);
      };
    }
    
    // Int√©gration avec le chat
    if (typeof window.isChatFocused === 'function') {
      const chatInput = document.querySelector('#chat-input');
      if (chatInput) {
        chatInput.addEventListener('focus', () => {
          this.pokedexIcon.setEnabled(false);
        });
        chatInput.addEventListener('blur', () => {
          this.pokedexIcon.setEnabled(true);
        });
      }
    }
    
    console.log('üîó [PokedexSystem] Int√©grations syst√®me configur√©es');
  }
  
  initializeDefaultData() {
    this.playerStats = {
      totalSeen: 0,
      totalCaught: 0,
      totalShiny: 0,
      seenPercentage: 0,
      caughtPercentage: 0,
      favoriteCount: 0,
      lastActivity: new Date(),
      streaks: {
        dailyDiscoveries: 0,
        dailyCaptures: 0
      }
    };
    
    this.settings = {
      discoveryNotifications: true,
      captureNotifications: true,
      shinyNotifications: true,
      milestoneNotifications: true,
      soundEnabled: true,
      animationsEnabled: true
    };
    
    // Mettre √† jour l'ic√¥ne avec les stats par d√©faut
    this.updateIconProgress();
    
    console.log('üìä [PokedexSystem] Donn√©es par d√©faut initialis√©es');
  }

  // === üì° COMMUNICATION SERVEUR ===
  
  setupServerListeners() {
    if (!this.gameRoom) return;

    // === R√âCEPTION DONN√âES POK√âDEX ===
    // ‚úÖ RETIRER ":response" de tous les listeners de r√©ponse
    this.gameRoom.onMessage("pokedex:get", (response) => {
      this.handlePokedexDataResponse(response);
    });

    this.gameRoom.onMessage("pokedex:entry", (response) => {
      this.handlePokemonEntryResponse(response);
    });

    this.gameRoom.onMessage("pokedex:stats", (response) => {
      this.handleStatsResponse(response);
    });

    // === √âV√âNEMENTS DE D√âCOUVERTE/CAPTURE ===
    // ‚úÖ GARDER sans ":response" (ce sont des broadcasts)
    this.gameRoom.onMessage("pokedex:discovery", (data) => {
      this.handleDiscoveryEvent(data);
    });

    this.gameRoom.onMessage("pokedex:capture", (data) => {
      this.handleCaptureEvent(data);
    });

    // === R√âPONSES D'ACTIONS ===
    // ‚úÖ RETIRER ":response"
    this.gameRoom.onMessage("pokedex:mark_seen", (response) => {
      this.handleMarkSeenResponse(response);
    });

    this.gameRoom.onMessage("pokedex:mark_caught", (response) => {
      this.handleMarkCaughtResponse(response);
    });

    this.gameRoom.onMessage("pokedex:toggle_favorite", (response) => {
      this.handleFavoriteResponse(response);
    });

    // === NOTIFICATIONS ===
    this.gameRoom.onMessage("pokedex:notifications", (response) => {
      this.handleNotificationsResponse(response);
    });

    // === SYNCHRONISATION ===
    this.gameRoom.onMessage("pokedex:quick_action", (response) => {
      this.handleQuickActionResponse(response);
    });

    console.log('üì° [PokedexSystem] Listeners serveur configur√©s et corrig√©s');
  }

  // === üì§ REQU√äTES SERVEUR ===
  
  requestPokedexData(filters = {}) {
    if (!this.gameRoom) return;
    
    // üõ†Ô∏è PROTECTION CONTRE LES DEMANDES MULTIPLES
    const now = Date.now();
    if (this._isRequestingData) {
      console.warn('‚ö†Ô∏è [PokedexSystem] Demande d√©j√† en cours, ignorer');
      return;
    }
    
    if (this._lastRequestTime && (now - this._lastRequestTime) < this._requestCooldown) {
      console.warn('‚ö†Ô∏è [PokedexSystem] Cooldown actif, ignorer demande');
      return;
    }
    
    this._isRequestingData = true;
    this._lastRequestTime = now;
    
    console.log('üì° [PokedexSystem] Demande donn√©es Pok√©dex...', filters);
    this.gameRoom.send("pokedex:get", {
      filters: {
        sortBy: 'id',
        sortOrder: 'asc',
        limit: 50,
        offset: 0,
        ...filters
      }
    });
    
    // Lib√©rer le verrou apr√®s 3 secondes max
    setTimeout(() => {
      this._isRequestingData = false;
    }, 3000);
  }
  
  requestPokemonEntry(pokemonId) {
    if (!this.gameRoom) return;
    
    console.log(`üì° [PokedexSystem] Demande entr√©e #${pokemonId}...`);
    this.gameRoom.send("pokedex:entry", {
      pokemonId: pokemonId,
      includeEvolutions: true,
      includeRecommendations: true
    });
  }
  
  requestPlayerStats() {
    if (!this.gameRoom) return;
    
    console.log('üì° [PokedexSystem] Demande statistiques...');
    this.gameRoom.send("pokedex:stats");
  }
  
  markPokemonSeen(pokemonId, level, location, options = {}) {
    if (!this.gameRoom) return;
    
    console.log(`üëÅÔ∏è [PokedexSystem] Marquer #${pokemonId} comme vu...`);
    this.gameRoom.send("pokedex:mark_seen", {
      pokemonId: pokemonId,
      level: level,
      location: location,
      method: options.method || 'wild',
      weather: options.weather,
      timeOfDay: options.timeOfDay,
      sessionId: options.sessionId,
      biome: options.biome,
      difficulty: options.difficulty,
      isEvent: options.isEvent || false
    });
  }
  
  markPokemonCaught(pokemonId, level, location, ownedPokemonId, options = {}) {
    if (!this.gameRoom) return;
    
    console.log(`üéØ [PokedexSystem] Marquer #${pokemonId} comme captur√©...`);
    this.gameRoom.send("pokedex:mark_caught", {
      pokemonId: pokemonId,
      level: level,
      location: location,
      ownedPokemonId: ownedPokemonId,
      method: options.method || 'wild',
      weather: options.weather,
      timeOfDay: options.timeOfDay,
      isShiny: options.isShiny || false,
      captureTime: options.captureTime || Date.now(),
      ballType: options.ballType || 'poke_ball',
      isFirstAttempt: options.isFirstAttempt,
      criticalCapture: options.criticalCapture,
      experienceGained: options.experienceGained
    });
  }
  
  togglePokemonFavorite(pokemonId) {
    if (!this.gameRoom) return;
    
    console.log(`‚≠ê [PokedexSystem] Toggle favori #${pokemonId}...`);
    this.gameRoom.send("pokedex:toggle_favorite", {
      pokemonId: pokemonId
    });
  }
  
  searchPokemon(filters = {}) {
    if (!this.gameRoom) return;
    
    // Utiliser le cache pour les recherches rapides
    const cacheKey = JSON.stringify(filters);
    if (this.searchCache.has(cacheKey)) {
      console.log('üíæ [PokedexSystem] R√©sultat de recherche depuis le cache');
      return this.searchCache.get(cacheKey);
    }
    
    console.log('üîç [PokedexSystem] Recherche Pok√©mon...', filters);
    this.requestPokedexData(filters);
    
    return [];
  }
  
  syncPokedex() {
    if (!this.gameRoom || this.isSyncing) return;
    
    console.log('üîÑ [PokedexSystem] Synchronisation Pok√©dex...');
    this.isSyncing = true;
    
    this.gameRoom.send("pokedex:quick_action", {
      action: "force_sync"
    });
  }
  
  markNotificationRead(notificationId) {
    if (!this.gameRoom) return;
    
    console.log(`üìß [PokedexSystem] Marquer notification lue: ${notificationId}`);
    this.gameRoom.send("pokedex:notification_read", {
      notificationId: notificationId
    });
  }
  
  markAllNotificationsRead() {
    if (!this.gameRoom) return;
    
    console.log('üìß [PokedexSystem] Marquer toutes notifications lues');
    this.gameRoom.send("pokedex:notification_read", {
      markAllRead: true
    });
  }

  // === üì• TRAITEMENT R√âPONSES SERVEUR ===
  
  handlePokedexDataResponse(response) {
    if (!response.success) {
      console.error('‚ùå [PokedexSystem] Erreur donn√©es Pok√©dex:', response.error);
      this.showError('Impossible de charger les donn√©es du Pok√©dex');
      return;
    }
    
    console.log('üìä [PokedexSystem] Donn√©es Pok√©dex re√ßues:', response.data);
    
    // Mettre √† jour les donn√©es locales
    this.pokedexData = response.data.entries || [];
    this.playerStats = { ...this.playerStats, ...response.data.summary };
    
    // Mettre √† jour le cache
    if (response.data.entries) {
      response.data.entries.forEach(entry => {
        this.pokemonCache.set(entry.pokemonId, entry);
      });
    }
    
    // Mettre √† jour l'affichage
    this.updateIconProgress();
    this.lastSyncTime = new Date();
    
    console.log('‚úÖ [PokedexSystem] Donn√©es Pok√©dex trait√©es');
  }
  
  handlePokemonEntryResponse(response) {
    if (!response.success) {
      console.error('‚ùå [PokedexSystem] Erreur entr√©e Pok√©mon:', response.error);
      return;
    }
    
    console.log('üìã [PokedexSystem] Entr√©e Pok√©mon re√ßue:', response.data);
    
    // Mettre √† jour le cache
    if (response.data.entry) {
      this.pokemonCache.set(response.data.entry.pokemonId, response.data.entry);
    }
  }
  
  handleStatsResponse(response) {
    if (!response.success) {
      console.error('‚ùå [PokedexSystem] Erreur statistiques:', response.error);
      return;
    }
    
    console.log('üìà [PokedexSystem] Statistiques re√ßues:', response.data);
    
    // Mettre √† jour les stats
    this.playerStats = { ...this.playerStats, ...response.data };
    this.updateIconProgress();
  }
  
  handleDiscoveryEvent(data) {
    console.log('‚ú® [PokedexSystem] Nouvelle d√©couverte:', data);
    
    // Mettre √† jour les donn√©es locales
    if (data.pokemonId) {
      const entry = this.pokemonCache.get(data.pokemonId) || {};
      entry.seen = true;
      entry.firstSeen = entry.firstSeen || new Date();
      this.pokemonCache.set(data.pokemonId, entry);
      
      // Mettre √† jour les stats
      this.playerStats.totalSeen = (this.playerStats.totalSeen || 0) + 1;
    }
    
    // Animations et notifications
    this.pokedexIcon?.animateNewDiscovery();
    this.pokedexIcon?.showDiscoveryNotification(data);
    
    // Son de d√©couverte
    this.pokedexIcon?.playDiscoverySound();
    
    // Ajouter √† la liste des notifications
    this.addNotification({
      type: 'discovery',
      pokemonId: data.pokemonId,
      message: `Nouveau Pok√©mon d√©couvert !`,
      timestamp: new Date(),
      priority: 'medium'
    });
    
    // Mettre √† jour l'affichage
    this.updateIconProgress();
  }
  
  handleCaptureEvent(data) {
    console.log('üéØ [PokedexSystem] Nouvelle capture:', data);
    
    // Mettre √† jour les donn√©es locales
    if (data.pokemonId) {
      const entry = this.pokemonCache.get(data.pokemonId) || {};
      entry.seen = true;
      entry.caught = true;
      entry.firstCaught = entry.firstCaught || new Date();
      if (data.isShiny) entry.shiny = true;
      this.pokemonCache.set(data.pokemonId, entry);
      
      // Mettre √† jour les stats
      this.playerStats.totalCaught = (this.playerStats.totalCaught || 0) + 1;
      if (data.isShiny) {
        this.playerStats.totalShiny = (this.playerStats.totalShiny || 0) + 1;
      }
    }
    
    // Animations et notifications
    this.pokedexIcon?.animateCapture();
    this.pokedexIcon?.showCaptureNotification(data);
    
    // Son de capture
    this.pokedexIcon?.playCaptureSound();
    
    // Notification sp√©ciale pour les shiny
    const notificationType = data.isShiny ? 'shiny_capture' : 'capture';
    const message = data.isShiny ? 
      `Pok√©mon Shiny captur√© ! ‚ú®` : 
      `Pok√©mon captur√© !`;
    
    this.addNotification({
      type: notificationType,
      pokemonId: data.pokemonId,
      message: message,
      timestamp: new Date(),
      priority: data.isShiny ? 'high' : 'medium'
    });
    
    // V√©rifier les jalons
    this.checkMilestones();
    
    // Mettre √† jour l'affichage
    this.updateIconProgress();
  }
  
  handleMarkSeenResponse(response) {
    if (!response.success) {
      console.error('‚ùå [PokedexSystem] Erreur marquer vu:', response.error);
      return;
    }
    
    console.log('‚úÖ [PokedexSystem] Pok√©mon marqu√© comme vu:', response.data);
    
    // G√©rer les notifications et achievements
    if (response.data.notifications) {
      response.data.notifications.forEach(notification => {
        this.addNotification(notification);
      });
    }
    
    if (response.data.isNewDiscovery) {
      this.handleDiscoveryEvent({
        pokemonId: response.data.pokemonId || 0,
        notifications: response.data.notifications
      });
    }
  }
  
  handleMarkCaughtResponse(response) {
    if (!response.success) {
      console.error('‚ùå [PokedexSystem] Erreur marquer captur√©:', response.error);
      return;
    }
    
    console.log('‚úÖ [PokedexSystem] Pok√©mon marqu√© comme captur√©:', response.data);
    
    // G√©rer les notifications et achievements
    if (response.data.notifications) {
      response.data.notifications.forEach(notification => {
        this.addNotification(notification);
      });
    }
    
    if (response.data.isNewCapture) {
      this.handleCaptureEvent({
        pokemonId: response.data.pokemonId || 0,
        isNewCapture: response.data.isNewCapture,
        isShiny: response.data.isShiny || false,
        notifications: response.data.notifications
      });
    }
  }
  
  handleFavoriteResponse(response) {
    if (!response.success) {
      console.error('‚ùå [PokedexSystem] Erreur favori:', response.error);
      return;
    }
    
    console.log('‚≠ê [PokedexSystem] Favori mis √† jour:', response.data);
    
    // Mettre √† jour le cache local
    const entry = this.pokemonCache.get(response.data.pokemonId);
    if (entry) {
      entry.favorited = response.data.favorited;
      this.pokemonCache.set(response.data.pokemonId, entry);
    }
    
    // Mettre √† jour les stats
    if (response.data.favorited) {
      this.playerStats.favoriteCount = (this.playerStats.favoriteCount || 0) + 1;
    } else {
      this.playerStats.favoriteCount = Math.max(0, (this.playerStats.favoriteCount || 0) - 1);
    }
  }
  
  handleNotificationsResponse(response) {
    if (!response.success) {
      console.error('‚ùå [PokedexSystem] Erreur notifications:', response.error);
      return;
    }
    
    console.log('üìß [PokedexSystem] Notifications re√ßues:', response.data);
    
    this.notifications = response.data.notifications || [];
    
    // Mettre √† jour l'ic√¥ne avec le nombre de notifications
    const unreadCount = this.notifications.filter(n => !n.read).length;
    this.pokedexIcon?.updateNotification(unreadCount > 0, unreadCount);
  }
  
  handleQuickActionResponse(response) {
    if (!response.success) {
      console.error('‚ùå [PokedexSystem] Erreur action rapide:', response.error);
      return;
    }
    
    console.log('‚ö° [PokedexSystem] Action rapide:', response.data);
    
    if (response.data.action === 'force_sync') {
      this.isSyncing = false;
      this.lastSyncTime = new Date();
      
      // Recharger les donn√©es apr√®s sync
      setTimeout(() => {
        this.requestPokedexData();
        this.requestPlayerStats();
      }, 500);
    }
  }

  // === üìä GESTION DES DONN√âES ===
  
  updateIconProgress() {
    if (!this.pokedexIcon) return;
    
    // Calculer les pourcentages
    const totalPokemon = 1025; // Total Pok√©mon national (√† adapter selon votre jeu)
    const seenPercentage = Math.round((this.playerStats.totalSeen / totalPokemon) * 100);
    const caughtPercentage = Math.round((this.playerStats.totalCaught / totalPokemon) * 100);
    
    this.playerStats.seenPercentage = seenPercentage;
    this.playerStats.caughtPercentage = caughtPercentage;
    
    // Mettre √† jour l'ic√¥ne
    this.pokedexIcon.updateProgress({
      totalSeen: this.playerStats.totalSeen || 0,
      totalCaught: this.playerStats.totalCaught || 0,
      seenPercentage: seenPercentage,
      caughtPercentage: caughtPercentage
    });
    
    console.log(`üìä [PokedexSystem] Progression: ${this.playerStats.totalCaught}/${this.playerStats.totalSeen} (${caughtPercentage}%)`);
  }
  
  checkMilestones() {
    const caughtPercentage = this.playerStats.caughtPercentage || 0;
    const milestones = [10, 25, 50, 75, 90, 100];
    
    for (const milestone of milestones) {
      if (caughtPercentage >= milestone && !this.hasReachedMilestone(milestone)) {
        this.reachMilestone(milestone);
        break;
      }
    }
  }
  
  hasReachedMilestone(percentage) {
    // TODO: V√©rifier dans les donn√©es si ce jalon a √©t√© atteint
    return false;
  }
  
  reachMilestone(percentage) {
    console.log(`üèÜ [PokedexSystem] Jalon atteint: ${percentage}%`);
    
    // Animation sp√©ciale
    this.pokedexIcon?.animateMilestone(percentage);
    
    // Notification de jalon
    this.addNotification({
      type: 'milestone',
      message: `Pok√©dex ${percentage}% compl√©t√© !`,
      timestamp: new Date(),
      priority: 'high',
      milestone: percentage
    });
    
    // Achievement
    if (typeof window.showGameNotification === 'function') {
      window.showGameNotification(
        `üèÜ Pok√©dex ${percentage}% compl√©t√© !`,
        'achievement',
        { duration: 5000, sound: true }
      );
    }
  }
  
  addNotification(notification) {
    // Ajouter ID unique si pas pr√©sent
    if (!notification.id) {
      notification.id = `notif_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;
    }
    
    // Ajouter au d√©but de la liste
    this.notifications.unshift(notification);
    
    // Limiter le nombre de notifications
    if (this.notifications.length > 50) {
      this.notifications = this.notifications.slice(0, 50);
    }
    
    // Mettre √† jour l'ic√¥ne
    const unreadCount = this.notifications.filter(n => !n.read).length;
    this.pokedexIcon?.updateNotification(unreadCount > 0, unreadCount);
    
    console.log('üìß [PokedexSystem] Notification ajout√©e:', notification);
  }

  // === üéÆ API PUBLIQUE ===
  
  togglePokedex() {
    if (this.pokedexUI) {
      this.pokedexUI.toggle();
    }
  }
  
  openPokedex() {
    if (this.pokedexUI) {
      this.pokedexUI.show();
    }
  }
  
  closePokedex() {
    if (this.pokedexUI) {
      this.pokedexUI.hide();
    }
  }
  
  isPokedexOpen() {
    return this.pokedexUI ? this.pokedexUI.isVisible : false;
  }
  
  openPokedexToView(viewName) {
    if (this.pokedexUI) {
      this.pokedexUI.openToView(viewName);
    }
  }
  
  isPokemonSeen(pokemonId) {
    const entry = this.pokemonCache.get(pokemonId);
    return entry ? entry.seen === true : false;
  }
  
  isPokemonCaught(pokemonId) {
    const entry = this.pokemonCache.get(pokemonId);
    return entry ? entry.caught === true : false;
  }
  
  isPokemonFavorite(pokemonId) {
    const entry = this.pokemonCache.get(pokemonId);
    return entry ? entry.favorited === true : false;
  }
  
  getPokemonEntry(pokemonId) {
    return this.pokemonCache.get(pokemonId) || null;
  }
  
  getPlayerStats() {
    return { ...this.playerStats };
  }
  
  getNotifications() {
    return [...this.notifications];
  }
  
  getFavoritesPokemon() {
    const favorites = [];
    this.pokemonCache.forEach((entry, pokemonId) => {
      if (entry.favorited) {
        favorites.push({ ...entry, pokemonId });
      }
    });
    return favorites.sort((a, b) => a.pokemonId - b.pokemonId);
  }
  
  getCompletionRate() {
    return this.playerStats.caughtPercentage || 0;
  }
  
  getSeenCount() {
    return this.playerStats.totalSeen || 0;
  }
  
  getCaughtCount() {
    return this.playerStats.totalCaught || 0;
  }
  
  getShinyCount() {
    return this.playerStats.totalShiny || 0;
  }

  // === üåê M√âTHODES POUR TRADUCTIONS ===
  
  /**
   * M√©thode pour injection tardive de l'optionsManager
   */
  setOptionsManager(optionsManager) {
    console.log('üåê [PokedexSystem] Injection tardive optionsManager');
    
    this.optionsManager = optionsManager;
    
    // Propager aux composants
    if (this.pokedexUI && this.pokedexUI.setOptionsManager) {
      this.pokedexUI.setOptionsManager(optionsManager);
    }
    
    if (this.pokedexIcon && this.pokedexIcon.optionsManager !== optionsManager) {
      console.log('üîÑ [PokedexSystem] Mise √† jour optionsManager pour l\'ic√¥ne');
      this.pokedexIcon.optionsManager = optionsManager;
      this.pokedexIcon.setupLanguageSupport?.();
    }
  }

  // === üõ†Ô∏è M√âTHODES UTILITAIRES ===
  
  canPlayerInteract() {
    const questDialogOpen = document.querySelector('.quest-dialog-overlay') !== null;
    const chatOpen = typeof window.isChatFocused === 'function' ? window.isChatFocused() : false;
    const starterHudOpen = typeof window.isStarterHUDOpen === 'function' ? window.isStarterHUDOpen() : false;
    const battleActive = document.querySelector('.battle-ui') !== null;
    
    return !questDialogOpen && !chatOpen && !starterHudOpen && !battleActive;
  }
  
  showError(message) {
    if (typeof window.showGameNotification === 'function') {
      window.showGameNotification(message, 'error', { duration: 4000 });
    } else {
      console.error('‚ùå [PokedexSystem]', message);
    }
  }
  
  showSuccess(message) {
    if (typeof window.showGameNotification === 'function') {
      window.showGameNotification(message, 'success', { duration: 3000 });
    } else {
      console.log('‚úÖ [PokedexSystem]', message);
    }
  }
  
  exportData() {
    return {
      playerStats: this.playerStats,
      settings: this.settings,
      lastSyncTime: this.lastSyncTime,
      cacheSize: this.pokemonCache.size,
      notificationCount: this.notifications.length
    };
  }
  
  importData(data) {
    if (data.playerStats) {
      this.playerStats = { ...this.playerStats, ...data.playerStats };
    }
    if (data.settings) {
      this.settings = { ...this.settings, ...data.settings };
    }
    if (data.lastSyncTime) {
      this.lastSyncTime = new Date(data.lastSyncTime);
    }
    
    this.updateIconProgress();
  }
  
  clearCache() {
    this.pokemonCache.clear();
    this.searchCache.clear();
    console.log('üßπ [PokedexSystem] Cache vid√©');
  }
  
  getServiceStats() {
    return {
      isInitialized: this.isInitialized,
      isSyncing: this.isSyncing,
      cacheSize: this.pokemonCache.size,
      searchCacheSize: this.searchCache.size,
      notificationCount: this.notifications.length,
      lastSyncTime: this.lastSyncTime,
      playerStats: this.playerStats,
      hasOptionsManager: !!this.optionsManager
    };
  }

  // === üßπ NETTOYAGE ===
  
  destroy() {
    console.log('üßπ [PokedexSystem] Destruction...');
    
    // D√©truire les composants
    if (this.pokedexUI) {
      this.pokedexUI.destroy();
      this.pokedexUI = null;
    }
    
    if (this.pokedexIcon) {
      this.pokedexIcon.destroy();
      this.pokedexIcon = null;
    }
    
    // Vider les caches
    this.pokemonCache.clear();
    this.searchCache.clear();
    
    // Reset donn√©es
    this.pokedexData = {};
    this.playerStats = {};
    this.notifications = [];
    this.settings = {};
    
    // Reset √©tat
    this.isInitialized = false;
    this.isSyncing = false;
    this.lastSyncTime = null;
    this.optionsManager = null;  // ‚Üê NOUVEAU
    
    // Supprimer r√©f√©rence globale
    if (window.pokedexSystem === this) {
      delete window.pokedexSystem;
    }
    
    console.log('‚úÖ [PokedexSystem] D√©truit');
  }
}

// === üìã EXPORT ===
export default PokedexSystem;

console.log(`
üì± === POK√âDEX SYSTEM AVEC TRADUCTIONS ===

üéØ FONCTIONNALIT√âS PRINCIPALES:
‚Ä¢ Gestion compl√®te du Pok√©dex
‚Ä¢ Communication serveur optimis√©e
‚Ä¢ Cache local pour les performances
‚Ä¢ Notifications et achievements
‚Ä¢ Int√©gration avec autres syst√®mes
‚Ä¢ üåê SUPPORT TRADUCTIONS TEMPS R√âEL

üì° COMMUNICATION SERVEUR:
‚Ä¢ Toutes les requ√™tes du handler serveur
‚Ä¢ Gestion des r√©ponses et erreurs
‚Ä¢ Cache intelligent
‚Ä¢ Synchronisation automatique

üéÆ √âV√âNEMENTS SUPPORT√âS:
‚Ä¢ pokemonEncountered ‚Üí auto mark seen
‚Ä¢ pokemonCaptured ‚Üí auto mark caught
‚Ä¢ pokemonEvolved ‚Üí gestion √©volutions
‚Ä¢ Notifications temps r√©el

üìä DONN√âES G√âR√âES:
‚Ä¢ Entr√©es Pok√©dex (vu/captur√©/shiny)
‚Ä¢ Statistiques joueur
‚Ä¢ Favoris et tags
‚Ä¢ Notifications
‚Ä¢ Param√®tres utilisateur

üé® ANIMATIONS ET EFFETS:
‚Ä¢ D√©couvertes avec sons
‚Ä¢ Captures avec effets visuels
‚Ä¢ Jalons avec celebrations
‚Ä¢ Notifications contextuelles

üåê TRADUCTIONS SUPPORT√âES:
‚Ä¢ OptionsManager pass√© au constructeur
‚Ä¢ Injection tardive via setOptionsManager()
‚Ä¢ Propagation automatique aux composants
‚Ä¢ Support langue temps r√©el sur ic√¥ne et UI

‚úÖ SYST√àME POK√âDEX PR√äT POUR L'AVENTURE + MULTILINGUE !
`);

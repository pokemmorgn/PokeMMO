// Pokedx/index.js - PokedxModule CORRIG√â avec BaseModule pur
// üéØ UTILISE BaseModule.canOpenUI() sans surcharge probl√©matique
// üìç D√âL√âGATION PROPRE vers UIManager
// üì± SYST√àME POK√âDX SANS BLOCAGES

import { BaseModule, createModule, generateModuleConfig } from '../core/BaseModule.js';
import { PokedxSystem } from './PokedexSystem.js';
import { PokedxIcon } from './PokedexIcon.js';
import { PokedxUI } from './PokedexUI.js';

/**
 * ‚úÖ Module Pok√©dx avec BaseModule PUR - SANS surcharge canOpenUI()
 * D√©l√©gation compl√®te vers UIManager pour les autorisations
 */
export class PokedxModule extends BaseModule {
  constructor(moduleId, gameRoom, scene, options = {}) {
    // Configuration sp√©cifique Pok√©dx
    const pokedxOptions = {
      singleton: true,           // Pok√©dx est un singleton
      autoCloseUI: true,         // Fermer UI par d√©faut
      keyboardShortcut: 'p',     // Touche P pour ouvrir/fermer
      uiManagerConfig: {
        anchor: 'bottom-right',
        order: 2,                // Troisi√®me dans la liste (apr√®s inventory et quest)
        group: 'ui-icons'
      },
      ...options
    };
    
    super(moduleId || 'pokedx', gameRoom, scene, pokedxOptions);
    
    // === R√âF√âRENCE AU SYST√àME PRINCIPAL ===
    this.system = null;  // PokedxSystem (logique compl√®te)
    
    // === DONN√âES POK√âDX ===
    this.pokedxData = {};
    this.playerStats = {};
    this.notifications = [];
    
    console.log('üì± [PokedxModule] Instance cr√©√©e avec BaseModule pur');
  }
  
  // === üéØ IMPL√âMENTATION DES M√âTHODES ABSTRAITES ===
  
  /**
   * Initialisation sp√©cifique Pok√©dx
   */
  async init() {
    console.log('üöÄ [PokedxModule] Initialisation m√©tier Pok√©dx...');
    
    // Cr√©er le syst√®me principal (qui inclut la logique m√©tier)
    this.system = new PokedxSystem(this.scene, this.gameRoom);
    
    console.log('‚úÖ [PokedxModule] Syst√®me Pok√©dx initialis√©');
  }
  
  /**
   * Cr√©ation des composants Pok√©dx
   */
  createComponents() {
    console.log('üîß [PokedxModule] Cr√©ation composants Pok√©dx...');
    
    // Le syst√®me a d√©j√† cr√©√© l'UI et l'ic√¥ne, on les r√©cup√®re
    if (this.system) {
      this.ui = this.system.pokedxUI;
      this.icon = this.system.pokedxIcon;
      
      // üÜï ASSURER QUE L'IC√îNE EST INITIALIS√âE
      if (this.icon && !this.icon.iconElement) {
        console.log('üîß [PokedxModule] Initialisation ic√¥ne manquante...');
        this.icon.init();
      }
      
      // Assurer que l'ic√¥ne est dans le bon mode UIManager
      if (this.icon && this.icon.iconElement) {
        this.icon.positioningMode = 'uimanager';
        
        // Supprimer tout positionnement automatique de l'ic√¥ne
        this.icon.iconElement.style.position = '';
        this.icon.iconElement.style.right = '';
        this.icon.iconElement.style.bottom = '';
        this.icon.iconElement.style.left = '';
        this.icon.iconElement.style.top = '';
        this.icon.iconElement.style.zIndex = '';
        
        console.log('‚úÖ [PokedxModule] Ic√¥ne pr√©par√©e pour UIManager');
      } else {
        console.warn('‚ùå [PokedxModule] Impossible de pr√©parer l\'ic√¥ne');
      }
    }
    
    console.log('‚úÖ [PokedxModule] Composants Pok√©dx r√©cup√©r√©s du syst√®me');
  }
  
  /**
   * Connexion des composants Pok√©dx
   */
  connectComponents() {
    console.log('üîó [PokedxModule] Connexion composants Pok√©dx...');
    
    // Les composants sont d√©j√† connect√©s par PokedxSystem
    // On ajoute juste la logique sp√©cifique UIManager
    
    // ‚úÖ D√âL√âGATION PROPRE: Ic√¥ne ‚Üí BaseModule ‚Üí UIManager
    if (this.icon) {
      this.icon.onClick = () => {
        // üéØ V√âRIFICATION VIA BASEMODULE (qui d√©l√®gue vers UIManager)
        if (this.canOpenUI()) {
          this.ui.toggle();
        } else {
          this.showCannotOpenMessage();
        }
      };
    }
    
    // Assurer compatibilit√© UIManager
    this.ensureIconForUIManager();
    
    console.log('‚úÖ [PokedxModule] Composants Pok√©dx connect√©s via BaseModule');
  }
  
  // === ‚ùå SUPPRESSION canOpenUI() PROBL√âMATIQUE ===
  
  /**
   * ‚ùå M√âTHODE SUPPRIM√âE: canOpenUI() avec v√©rifications DOM
   * 
   * Ancienne logique probl√©matique:
   * ```javascript
   * canOpenUI() {
   *   // V√©rifications sp√©cifiques au Pok√©dx
   *   const blockers = [
   *     document.querySelector('.quest-dialog-overlay'),
   *     document.querySelector('#dialogue-box:not([style*="display: none"])'),
   *     // ... autres blockers DOM
   *   ];
   *   // ‚Üê Encore une autre logique redondante !
   * }
   * ```
   * 
   * ‚úÖ REMPLACEMENT: BaseModule.canOpenUI() par d√©faut
   * - D√©l√©gation directe vers UIManager.canShowModule()
   * - Plus de v√©rifications DOM redondantes
   * - Architecture propre en couches
   * 
   * Le BaseModule se charge automatiquement de:
   * 1. this.canOpenUI() ‚Üí BaseModule.canOpenUI()
   * 2. BaseModule.canOpenUI() ‚Üí UIManager.canShowModule('pokedx')
   * 3. UIManager d√©cide selon ses r√®gles globales
   */
  
  // === üìä M√âTHODES SP√âCIFIQUES POK√âDX ===
  
  /**
   * Demander les donn√©es Pok√©dx (override de la m√©thode g√©n√©rique)
   */
  show() {
    const result = super.show();
    
    // Demander donn√©es Pok√©dx sp√©cifiquement
    if (this.system) {
      setTimeout(() => {
        this.system.requestPokedxData();
      }, 200);
    }
    
    return result;
  }
  
  /**
   * Marquer un Pok√©mon comme vu
   */
  markPokemonSeen(pokemonId, level, location, options = {}) {
    if (this.system) {
      this.system.markPokemonSeen(pokemonId, level, location, options);
    }
  }
  
  /**
   * Marquer un Pok√©mon comme captur√©
   */
  markPokemonCaught(pokemonId, level, location, ownedPokemonId, options = {}) {
    if (this.system) {
      this.system.markPokemonCaught(pokemonId, level, location, ownedPokemonId, options);
    }
  }
  
  /**
   * V√©rifier si un Pok√©mon a √©t√© vu
   */
  isPokemonSeen(pokemonId) {
    return this.system ? this.system.isPokemonSeen(pokemonId) : false;
  }
  
  /**
   * V√©rifier si un Pok√©mon a √©t√© captur√©
   */
  isPokemonCaught(pokemonId) {
    return this.system ? this.system.isPokemonCaught(pokemonId) : false;
  }
  
  /**
   * Obtenir les statistiques du joueur
   */
  getPlayerStats() {
    return this.system ? this.system.getPlayerStats() : {};
  }
  
  /**
   * Rechercher des Pok√©mon
   */
  searchPokemon(filters = {}) {
    if (this.system) {
      return this.system.searchPokemon(filters);
    }
    return [];
  }
  
  /**
   * Toggle favori d'un Pok√©mon
   */
  togglePokemonFavorite(pokemonId) {
    if (this.system) {
      this.system.togglePokemonFavorite(pokemonId);
    }
  }
  
  /**
   * Obtenir les Pok√©mon favoris
   */
  getFavoritesPokemon() {
    return this.system ? this.system.getFavoritesPokemon() : [];
  }
  
  /**
   * Obtenir les notifications Pok√©dx
   */
  getNotifications() {
    return this.system ? this.system.getNotifications() : [];
  }
  
  /**
   * Marquer une notification comme lue
   */
  markNotificationRead(notificationId) {
    if (this.system) {
      this.system.markNotificationRead(notificationId);
    }
  }
  
  /**
   * Synchroniser le Pok√©dx
   */
  syncPokedx() {
    if (this.system) {
      this.system.syncPokedx();
    }
  }
  
  /**
   * Obtenir une entr√©e Pok√©dx sp√©cifique
   */
  getPokemonEntry(pokemonId) {
    return this.system ? this.system.getPokemonEntry(pokemonId) : null;
  }
  
  /**
   * Obtenir le taux de compl√©tion
   */
  getCompletionRate() {
    const stats = this.getPlayerStats();
    return stats.caughtPercentage || 0;
  }
  
  /**
   * Ouvrir le Pok√©dx √† une vue sp√©cifique
   */
  openToView(viewName) {
    if (this.ui) {
      this.ui.openToView(viewName);
    }
  }
  
  /**
   * API legacy pour compatibilit√©
   */
  togglePokedxUI() {
    this.toggleUI();
  }
  
  openPokedx() {
    this.open();
  }
  
  closePokedx() {
    this.close();
  }
  
  isPokedxOpen() {
    return this.ui ? this.ui.isVisible : false;
  }
  
  // === üìã OVERRIDE STATE POUR INFOS POK√âDX ===
  
  getUIManagerState() {
    const baseState = super.getUIManagerState();
    
    // Ajouter infos sp√©cifiques Pok√©dx
    return {
      ...baseState,
      hasData: this.ui ? Object.keys(this.ui.pokedxData || {}).length > 0 : false,
      completionRate: this.getCompletionRate(),
      totalSeen: this.playerStats.totalSeen || 0,
      totalCaught: this.playerStats.totalCaught || 0,
      hasNotifications: this.notifications.length > 0,
      canOpen: this.canOpenUI(), // ‚Üê Utilise BaseModule.canOpenUI() automatiquement
      moduleType: 'pokedx',
      delegationMode: 'pure-basemodule'
    };
  }
  
  /**
   * ‚úÖ M√âTHODE H√âRIT√âE DE BASEMODULE - D√âL√âGATION AUTOMATIQUE
   * 
   * Plus besoin de surcharger canOpenUI() !
   * BaseModule.canOpenUI() se charge de:
   * 1. D√©l√©guer vers UIManager.canShowModule('pokedx')
   * 2. Fallback sur v√©rifications de base si UIManager indisponible
   * 3. Architecture propre en couches
   */
  // canOpenUI() ‚Üí H√©rit√©e de BaseModule, d√©l√©gation automatique !
  
  /**
   * Exposer le syst√®me globalement pour compatibilit√©
   */
  exposeGlobally() {
    if (!window.pokedxSystem) {
      window.pokedxSystem = this.system;
      window.pokedxSystemGlobal = this;
      console.log('üåê [PokedxModule] Syst√®me expos√© globalement');
    }
  }
  
  /**
   * Override de la m√©thode initializeModule pour exposer globalement
   */
  async initializeModule() {
    const result = await super.initializeModule();
    
    // Exposer globalement apr√®s initialisation
    this.exposeGlobally();
    
    return result;
  }
  
  /**
   * M√©thode pour assurer la compatibilit√© avec UIManager
   */
  ensureIconForUIManager() {
    console.log('üîß [PokedxModule] V√©rification ic√¥ne pour UIManager...');
    
    if (this.icon && this.icon.iconElement) {
      // Reset du positionnement pour UIManager
      this.icon.iconElement.removeAttribute('data-positioned-by-uimanager');
      
      // Supprimer tout positionnement automatique
      this.icon.iconElement.style.position = '';
      this.icon.iconElement.style.right = '';
      this.icon.iconElement.style.bottom = '';
      this.icon.iconElement.style.left = '';
      this.icon.iconElement.style.top = '';
      this.icon.iconElement.style.zIndex = '';
      
      console.log('‚úÖ [PokedxModule] Ic√¥ne pr√™te pour UIManager');
      return true;
    }
    
    console.warn('‚ùå [PokedxModule] Ic√¥ne non disponible');
    return false;
  }
  
  // === üéÆ M√âTHODES D'INT√âGRATION AVEC LE JEU ===
  
  /**
   * G√©rer une rencontre Pok√©mon (appel√© par le moteur de jeu)
   */
  onPokemonEncounter(pokemonData) {
    console.log('üëÅÔ∏è [PokedxModule] Rencontre Pok√©mon:', pokemonData);
    
    if (!pokemonData || !pokemonData.pokemonId) return;
    
    // Marquer comme vu automatiquement
    this.markPokemonSeen(
      pokemonData.pokemonId,
      pokemonData.level || 1,
      pokemonData.location || 'Inconnu',
      {
        method: pokemonData.encounterType || 'wild',
        weather: pokemonData.weather,
        timeOfDay: pokemonData.timeOfDay,
        biome: pokemonData.biome
      }
    );
    
    // Mettre √† jour l'ic√¥ne si pas encore vu
    if (!this.isPokemonSeen(pokemonData.pokemonId)) {
      this.icon?.animateNewDiscovery();
    }
  }
  
  /**
   * G√©rer une capture Pok√©mon (appel√© par le moteur de jeu)
   */
  onPokemonCapture(pokemonData) {
    console.log('üéØ [PokedxModule] Capture Pok√©mon:', pokemonData);
    
    if (!pokemonData || !pokemonData.pokemonId || !pokemonData.ownedPokemonId) return;
    
    // Marquer comme captur√©
    this.markPokemonCaught(
      pokemonData.pokemonId,
      pokemonData.level || 1,
      pokemonData.location || 'Inconnu',
      pokemonData.ownedPokemonId,
      {
        method: pokemonData.captureMethod || 'wild',
        ballType: pokemonData.ballType || 'poke_ball',
        isShiny: pokemonData.isShiny || false,
        isFirstAttempt: pokemonData.isFirstAttempt,
        criticalCapture: pokemonData.criticalCapture,
        weather: pokemonData.weather,
        timeOfDay: pokemonData.timeOfDay
      }
    );
    
    // Animations et notifications
    this.icon?.animateCapture();
    
    if (pokemonData.isShiny) {
      this.icon?.showCaptureNotification(pokemonData);
    }
    
    // V√©rifier les jalons
    const newCompletionRate = this.getCompletionRate();
    const milestones = [25, 50, 75, 100];
    
    for (const milestone of milestones) {
      if (newCompletionRate >= milestone && this.playerStats.caughtPercentage < milestone) {
        this.icon?.animateMilestone(milestone);
        break;
      }
    }
  }
  
  /**
   * G√©rer une √©volution Pok√©mon (appel√© par le moteur de jeu)
   */
  onPokemonEvolution(evolutionData) {
    console.log('üîÑ [PokedxModule] √âvolution Pok√©mon:', evolutionData);
    
    if (!evolutionData || !evolutionData.newPokemonId) return;
    
    // Si le nouveau Pok√©mon n'√©tait pas encore vu, le marquer comme vu
    if (!this.isPokemonSeen(evolutionData.newPokemonId)) {
      this.markPokemonSeen(
        evolutionData.newPokemonId,
        evolutionData.level || 1,
        evolutionData.location || '√âvolution',
        {
          method: 'evolution',
          fromPokemon: evolutionData.fromPokemonId
        }
      );
    }
    
    // Si on poss√®de le Pok√©mon √©volu√©, le marquer comme captur√©
    if (evolutionData.ownedPokemonId) {
      this.markPokemonCaught(
        evolutionData.newPokemonId,
        evolutionData.level || 1,
        evolutionData.location || '√âvolution',
        evolutionData.ownedPokemonId,
        {
          method: 'evolution',
          fromPokemon: evolutionData.fromPokemonId
        }
      );
    }
    
    // Animation sp√©ciale √©volution
    this.icon?.animateNewDiscovery();
  }
  
  /**
   * Obtenir des recommandations pour le joueur
   */
  getRecommendations() {
    if (!this.system) return [];
    
    // TODO: Impl√©menter logique de recommandations
    // - Pok√©mon proches de l'√©volution
    // - Pok√©mon jamais vus dans la zone actuelle
    // - Objectifs de compl√©tion
    
    return [];
  }
}

// === üè≠ FACTORY POK√âDX SIMPLIFI√âE ===

/**
 * Factory function pour cr√©er le module Pok√©dx
 * Utilise la factory g√©n√©rique de BaseModule
 */
export async function createPokedxModule(gameRoom, scene, options = {}) {
  try {
    console.log('üè≠ [PokedxFactory] Cr√©ation module Pok√©dx avec BaseModule...');
    
    const pokedxOptions = {
      singleton: true,
      ...options
    };
    
    const pokedxInstance = await createModule(PokedxModule, 'pokedx', gameRoom, scene, pokedxOptions);
    
    console.log('‚úÖ [PokedxFactory] Module Pok√©dx cr√©√© avec succ√®s');
    return pokedxInstance;
    
  } catch (error) {
    console.error('‚ùå [PokedxFactory] Erreur cr√©ation module Pok√©dx:', error);
    throw error;
  }
}

// === üìã CONFIGURATION POK√âDX POUR UIMANAGER ===

export const POKEDX_MODULE_CONFIG = generateModuleConfig('pokedx', {
  moduleClass: PokedxModule,
  order: 2,  // Troisi√®me = apr√®s inventory et quest
  
  options: {
    singleton: true,
    keyboardShortcut: 'p'
  },
  
  groups: ['ui-icons', 'data-management'],
  
  metadata: {
    name: 'Pok√©dx National',
    description: 'Complete Pok√©dx system with discovery tracking',
    version: '2.0.0',
    category: 'Data Management',
    architecture: 'Pure BaseModule with UIManager delegation'
  },
  
  factory: () => createPokedxModule(
    window.currentGameRoom, 
    window.game?.scene?.getScenes(true)[0]
  )
});

// === üîó INT√âGRATION AVEC UIMANAGER SIMPLIFI√âE ===

/**
 * Enregistrer le module Pok√©dx dans UIManager
 */
export async function registerPokedxModule(uiManager) {
  try {
    console.log('üìù [PokedxIntegration] Enregistrement Pok√©dx...');
    
    // V√©rifier si d√©j√† enregistr√©
    if (uiManager.modules && uiManager.modules.has('pokedx')) {
      console.log('‚ÑπÔ∏è [PokedxIntegration] Module d√©j√† enregistr√©');
      return true;
    }
    
    await uiManager.registerModule('pokedx', POKEDX_MODULE_CONFIG);
    console.log('‚úÖ [PokedxIntegration] Module Pok√©dx enregistr√©');
    
    return true;
  } catch (error) {
    console.error('‚ùå [PokedxIntegration] Erreur enregistrement:', error);
    throw error;
  }
}

/**
 * Initialiser et connecter le module Pok√©dx
 */
export async function initializePokedxModule(uiManager) {
  try {
    console.log('üöÄ [PokedxIntegration] Initialisation Pok√©dx...');
    
    // Enregistrer le module
    await registerPokedxModule(uiManager);
    
    // V√©rifier si d√©j√† initialis√© (singleton)
    let pokedxInstance = PokedxModule.getInstance('pokedx');
    
    if (!pokedxInstance || !pokedxInstance.uiManagerState.initialized) {
      // Initialiser le module
      pokedxInstance = await uiManager.initializeModule('pokedx');
    } else {
      console.log('‚ÑπÔ∏è [PokedxIntegration] Instance d√©j√† initialis√©e');
      
      // Connecter √† UIManager si pas encore fait
      pokedxInstance.connectUIManager(uiManager);
    }
    
    // Setup des √©v√©nements globaux Pok√©dx
    setupPokedxGlobalEvents(pokedxInstance);
    
    console.log('‚úÖ [PokedxIntegration] Initialisation Pok√©dx termin√©e');
    return pokedxInstance;
    
  } catch (error) {
    console.error('‚ùå [PokedxIntegration] Erreur initialisation:', error);
    throw error;
  }
}

// === üåê √âV√âNEMENTS GLOBAUX POK√âDX ===

function setupPokedxGlobalEvents(pokedxInstance) {
  // √âviter double setup
  if (window._pokedxEventsSetup) {
    console.log('‚ÑπÔ∏è [PokedxEvents] √âv√©nements d√©j√† configur√©s');
    return;
  }
  
  // √âv√©nement: Pok√©mon rencontr√©
  window.addEventListener('pokemonEncountered', (event) => {
    if (pokedxInstance.onPokemonEncounter) {
      pokedxInstance.onPokemonEncounter(event.detail);
    }
  });
  
  // √âv√©nement: Pok√©mon captur√©
  window.addEventListener('pokemonCaptured', (event) => {
    if (pokedxInstance.onPokemonCapture) {
      pokedxInstance.onPokemonCapture(event.detail);
    }
  });
  
  // √âv√©nement: Pok√©mon √©volu√©
  window.addEventListener('pokemonEvolved', (event) => {
    if (pokedxInstance.onPokemonEvolution) {
      pokedxInstance.onPokemonEvolution(event.detail);
    }
  });
  
  // √âv√©nement: Combat commenc√© (fermer le Pok√©dx)
  window.addEventListener('battleStarted', () => {
    if (pokedxInstance.ui && pokedxInstance.ui.isVisible) {
      pokedxInstance.ui.hide();
    }
  });
  
  // √âv√©nement: Shop ouvert (fermer le Pok√©dx)
  window.addEventListener('shopOpened', () => {
    if (pokedxInstance.ui && pokedxInstance.ui.isVisible) {
      pokedxInstance.ui.hide();
    }
  });
  
  window._pokedxEventsSetup = true;
  console.log('üåê [PokedxEvents] √âv√©nements Pok√©dx configur√©s');
}

// === üí° UTILISATION SIMPLE ===

/**
 * Fonction d'utilisation simple pour int√©grer Pok√©dx dans un projet
 */
export async function setupPokedxSystem(uiManager) {
  try {
    console.log('üîß [PokedxSetup] Configuration syst√®me Pok√©dx avec BaseModule pur...');
    
    // Initialiser le module
    const pokedxInstance = await initializePokedxModule(uiManager);
    
    // Exposer globalement pour compatibilit√©
    if (!window.pokedxSystem) {
      window.pokedxSystem = pokedxInstance.system;
      window.pokedxSystemGlobal = pokedxInstance;
      window.togglePokedx = () => pokedxInstance.toggleUI();
      window.openPokedx = () => pokedxInstance.open();
      window.closePokedx = () => pokedxInstance.close();
      window.isPokedxOpen = () => pokedxInstance.ui?.isVisible || false;
      
      // Fonctions sp√©cifiques Pok√©dx
      window.markPokemonSeen = (pokemonId, level, location, options) => 
        pokedxInstance.markPokemonSeen(pokemonId, level, location, options);
      window.markPokemonCaught = (pokemonId, level, location, ownedPokemonId, options) => 
        pokedxInstance.markPokemonCaught(pokemonId, level, location, ownedPokemonId, options);
      window.isPokemonSeen = (pokemonId) => 
        pokedxInstance.isPokemonSeen(pokemonId);
      window.isPokemonCaught = (pokemonId) => 
        pokedxInstance.isPokemonCaught(pokemonId);
      window.getPokedxCompletionRate = () => 
        pokedxInstance.getCompletionRate();
      
      console.log('üåê [PokedxSetup] Fonctions globales Pok√©dx expos√©es');
    }
    
    console.log('‚úÖ [PokedxSetup] Syst√®me Pok√©dx configur√© avec BaseModule pur');
    return pokedxInstance;
    
  } catch (error) {
    console.error('‚ùå [PokedxSetup] Erreur configuration:', error);
    throw error;
  }
}

// === üîç UTILIT√âS DE DEBUG POK√âDX ===

export function debugPokedxModule() {
  const { debugModule } = require('../core/BaseModule.js');
  return debugModule('pokedx', PokedxModule);
}

export function fixPokedxModule() {
  console.log('üîß [PokedxFix] R√©paration module Pok√©dx...');
  
  try {
    const instance = PokedxModule.getInstance('pokedx');
    
    if (instance) {
      // Force fermeture UI via BaseModule
      instance.forceCloseUI();
      
      console.log('‚úÖ [PokedxFix] Module Pok√©dx r√©par√©');
      return true;
    } else {
      console.log('‚ÑπÔ∏è [PokedxFix] Aucune instance √† r√©parer');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå [PokedxFix] Erreur r√©paration:', error);
    return false;
  }
}

// === üìã EXPORT PAR D√âFAUT ===

export default PokedxModule;

console.log(`
üì± === POK√âDX MODULE AVEC BASEMODULE PUR ===

‚ùå SUPPRESSION CANOPEN() PROBL√âMATIQUE:
‚Ä¢ Plus de v√©rifications DOM redondantes
‚Ä¢ Plus de blockers sp√©cifiques au module
‚Ä¢ Plus de logique dupliqu√©e avec UIManager

‚úÖ D√âL√âGATION PURE VERS UIMANAGER:
‚Ä¢ BaseModule.canOpenUI() utilis√© tel quel
‚Ä¢ D√©l√©gation automatique vers UIManager.canShowModule()
‚Ä¢ Architecture propre en couches respect√©e

üéØ FLUX SIMPLIFI√â:
1. Icon.onClick() ‚Üí Module.canOpenUI()
2. Module.canOpenUI() ‚Üí BaseModule.canOpenUI() (h√©rit√©)
3. BaseModule.canOpenUI() ‚Üí UIManager.canShowModule('pokedx')
4. UIManager d√©cide selon ses r√®gles globales

üõ°Ô∏è PLUS DE CONFLITS:
‚Ä¢ Fini les 4 couches de v√©rifications
‚Ä¢ Fini les conditions contradictoires
‚Ä¢ UIManager seule source de v√©rit√©
‚Ä¢ canOpenUI() h√©rit√©e = d√©l√©gation automatique

‚úÖ POK√âDX MODULE REFACTORIS√â AVEC BASEMODULE PUR !
`);

// Options/index.js - OptionsModule avec BaseModule
// üéØ UTILISE BaseModule pour coh√©rence avec Team/Quest
// üìç INT√âGR√â avec UIManager - Position haut-droite
// ‚öôÔ∏è MODULE COMPLET: Volume + Langue + API globale

import { BaseModule, createModule, generateModuleConfig } from '../core/BaseModule.js';
import { OptionsManager, initializeGlobalOptionsAPI } from './OptionsManager.js';
import { OptionsIcon } from './OptionsIcon.js';
import { OptionsUI } from './OptionsUI.js';

/**
 * Module Options utilisant BaseModule
 * H√©rite de toute la logique UIManager g√©n√©rique
 */
export class OptionsModule extends BaseModule {
  constructor(moduleId, gameRoom, scene, options = {}) {
    // Configuration sp√©cifique Options
    const optionsOptions = {
      singleton: true,           // Options est un singleton
      autoCloseUI: true,         // Fermer UI par d√©faut
      keyboardShortcut: 'Escape', // Touche Escape pour ouvrir/fermer
      uiManagerConfig: {
        anchor: 'top-right',     // ‚úÖ HAUT-DROITE (diff√©rent des autres)
        order: 0,                // Premier en haut √† droite
        group: 'ui-options'      // Groupe sp√©cial pour options
      },
      ...options
    };
    
    super(moduleId || 'options', gameRoom, scene, optionsOptions);
    
    console.log('‚öôÔ∏è [OptionsModule] Instance cr√©√©e avec BaseModule');
  }
  
  // === üéØ IMPL√âMENTATION DES M√âTHODES ABSTRAITES ===
  
  /**
   * Initialisation sp√©cifique Options
   */
  async init() {
    console.log('üöÄ [OptionsModule] Initialisation m√©tier Options...');
    
    // Cr√©er le manager (business logic)
    this.manager = new OptionsManager(this.gameRoom);
    this.manager.init();
    
    // ‚úÖ INITIALISER L'API GLOBALE imm√©diatement
    initializeGlobalOptionsAPI(this.manager);
    
    console.log('‚úÖ [OptionsModule] Manager Options initialis√©');
  }
  
  /**
   * Cr√©ation des composants Options
   */
  createComponents() {
    console.log('üîß [OptionsModule] Cr√©ation composants Options...');
    
    // Cr√©er l'ic√¥ne si pas encore fait
    if (!this.icon) {
      this.icon = new OptionsIcon(this.manager);
      this.icon.init();
    }
    
    // Cr√©er l'interface si pas encore fait
    if (!this.ui) {
      this.ui = new OptionsUI(this.manager, this.gameRoom);
      // Note: L'init de OptionsUI est async, on le fait dans connectComponents
    }
    
    console.log('‚úÖ [OptionsModule] Composants Options cr√©√©s');
  }
  
  /**
   * Connexion des composants Options
   */
  connectComponents() {
    console.log('üîó [OptionsModule] Connexion composants Options...');
    
    // Initialiser UI de mani√®re async si n√©cessaire
    if (this.ui && !this.ui.initialized) {
      this.ui.init().catch(error => {
        console.error('‚ùå [OptionsModule] Erreur init UI:', error);
      });
    }
    
    // Ic√¥ne ‚Üí Interface (clic ouvre l'interface)
    if (this.icon) {
      this.icon.onClick = () => {
        if (this.canOpenUI()) {
          this.ui.toggle();
        } else {
          this.showCannotOpenMessage();
        }
      };
    }
    
    // Manager ‚Üí Ic√¥ne (mise √† jour des stats)
    if (this.manager) {
      this.manager.onVolumeChange = (data) => {
        if (this.icon) {
          this.icon.updateStats({
            volume: data.volume,
            isMuted: data.isMuted,
            currentLanguage: this.manager.getCurrentLanguage(),
            languageFlag: this.manager.getLanguageInfo().flag
          });
          
          // Animation volume
          this.icon.animateVolumeChange();
        }
      };
      
      this.manager.onLanguageChange = (data) => {
        if (this.icon) {
          this.icon.updateStats({
            volume: this.manager.getVolume(),
            isMuted: this.manager.isMuted(),
            currentLanguage: data.currentLanguage,
            languageFlag: data.languageInfo.flag
          });
          
          // Animation langue
          this.icon.animateLanguageChange();
        }
        
        // Mise √† jour UI si ouverte
        if (this.ui && this.ui.isVisible) {
          this.ui.updateOptionsData(this.manager.getAllOptions());
        }
      };
      
      this.manager.onOptionsUpdate = (updateData) => {
        // Mettre √† jour UI si ouverte
        if (this.ui && this.ui.isVisible) {
          this.ui.updateOptionsData(this.manager.getAllOptions());
        }
        
        // Mise √† jour stats ic√¥ne
        if (this.icon) {
          const allOptions = this.manager.getAllOptions();
          this.icon.updateStats({
            volume: allOptions.volume,
            isMuted: allOptions.isMuted,
            currentLanguage: allOptions.currentLanguage,
            languageFlag: allOptions.languageInfo.flag
          });
        }
      };
    }
    
    // Interface ‚Üí Manager (actions utilisateur)
    if (this.ui) {
      this.ui.onAction = (action, data) => {
        this.handleUIAction(action, data);
      };
    }
    
    // ‚úÖ MISE √Ä JOUR INITIALE des stats
    this.updateInitialStats();
    
    console.log('‚úÖ [OptionsModule] Composants Options connect√©s');
  }
  
  // === ‚öôÔ∏è M√âTHODES SP√âCIFIQUES OPTIONS ===
  
  /**
   * Gestion des actions de l'interface
   */
  handleUIAction(action, data) {
    console.log(`üé¨ [OptionsModule] Action UI: ${action}`, data);
    
    if (!this.manager) {
      console.warn('‚ö†Ô∏è [OptionsModule] Manager non disponible');
      return;
    }
    
    switch (action) {
      case 'setVolume':
        this.manager.setVolume(data.volume);
        break;
        
      case 'setMuted':
        this.manager.setMuted(data.muted);
        break;
        
      case 'setLanguage':
        this.manager.setLanguage(data.language);
        break;
        
      case 'resetToDefaults':
        this.manager.resetToDefaults();
        this.ui?.resetChanges();
        break;
        
      case 'saveOptions':
        // Options auto-sauv√©es, juste reset changements
        this.ui?.resetChanges();
        this.showActionSuccess('Options sauvegard√©es');
        break;
        
      case 'requestData':
        if (this.ui) {
          this.ui.updateOptionsData(this.manager.getAllOptions());
        }
        break;
        
      default:
        console.warn(`‚ö†Ô∏è [OptionsModule] Action inconnue: ${action}`);
    }
  }
  
  /**
   * Mise √† jour initiale des stats
   */
  updateInitialStats() {
    if (this.manager && this.icon) {
      const allOptions = this.manager.getAllOptions();
      this.icon.updateStats({
        volume: allOptions.volume,
        isMuted: allOptions.isMuted,
        currentLanguage: allOptions.currentLanguage,
        languageFlag: allOptions.languageInfo.flag
      });
    }
  }
  
  /**
   * Override show pour charger les donn√©es
   */
  show() {
    const result = super.show();
    
    // Charger donn√©es Options sp√©cifiquement
    if (this.manager && this.ui) {
      setTimeout(() => {
        this.ui.updateOptionsData(this.manager.getAllOptions());
      }, 100);
    }
    
    return result;
  }
  
  /**
   * Afficher succ√®s action
   */
  showActionSuccess(message) {
    if (typeof window.showGameNotification === 'function') {
      window.showGameNotification(message, 'success', {
        duration: 2000,
        position: 'top-center'
      });
    }
  }
  
  // === üåê API PUBLIQUE OPTIONS ===
  
  /**
   * Obtenir la langue courante
   */
  getCurrentLanguage() {
    return this.manager ? this.manager.getCurrentLanguage() : 'en';
  }
  
  /**
   * Obtenir le volume courant
   */
  getCurrentVolume() {
    return this.manager ? this.manager.getEffectiveVolume() : 50;
  }
  
  /**
   * V√©rifier si audio mut√©
   */
  isAudioMuted() {
    return this.manager ? this.manager.isMuted() : false;
  }
  
  /**
   * Changer langue
   */
  setLanguage(languageCode) {
    if (this.manager) {
      return this.manager.setLanguage(languageCode);
    }
    return false;
  }
  
  /**
   * Changer volume
   */
  setVolume(volume) {
    if (this.manager) {
      return this.manager.setVolume(volume);
    }
    return false;
  }
  
  /**
   * Basculer mute
   */
  toggleMute() {
    if (this.manager) {
      return this.manager.toggleMute();
    }
    return false;
  }
  
  /**
   * Obtenir toutes les options
   */
  getAllOptions() {
    return this.manager ? this.manager.getAllOptions() : {};
  }
  
  /**
   * R√©initialiser aux d√©fauts
   */
  resetToDefaults() {
    if (this.manager) {
      this.manager.resetToDefaults();
      return true;
    }
    return false;
  }
  
  /**
   * API legacy pour compatibilit√©
   */
  toggleOptionsUI() {
    this.toggleUI();
  }
  
  openOptions() {
    this.open();
  }
  
  closeOptions() {
    this.close();
  }
  
  // === üìã OVERRIDE STATE POUR INFOS OPTIONS ===
  
  getUIManagerState() {
    const baseState = super.getUIManagerState();
    
    // Ajouter infos sp√©cifiques Options
    return {
      ...baseState,
      currentLanguage: this.getCurrentLanguage(),
      currentVolume: this.getCurrentVolume(),
      isAudioMuted: this.isAudioMuted(),
      moduleType: 'options'
    };
  }
  
  // === ‚å®Ô∏è GESTION ESCAPE SP√âCIALE ===
  
  /**
   * Override pour gestion sp√©ciale de la touche Escape
   */
  handleKeyboardShortcut(event) {
    if (event.key === 'Escape') {
      // Si une UI est ouverte, fermer celle qui a la priorit√© la plus haute
      if (this.isUIVisible()) {
        // Si options ouvert, le fermer
        this.close();
        event.preventDefault();
        event.stopPropagation();
        return true;
      } else {
        // Si rien d'ouvert, ouvrir options
        this.open();
        event.preventDefault();
        event.stopPropagation();
        return true;
      }
    }
    
    return super.handleKeyboardShortcut(event);
  }
  
  /**
   * V√©rifier si une UI quelconque est visible
   */
  isUIVisible() {
    // V√©rifier nos UI
    if (this.ui && this.ui.isVisible) return true;
    
    // V√©rifier les autres modules via window
    const uiChecks = [
      () => window.questSystem?.ui?.isVisible,
      () => window.teamSystem?.ui?.isVisible,
      () => window.inventorySystem?.ui?.isVisible
    ];
    
    return uiChecks.some(check => {
      try {
        return check();
      } catch {
        return false;
      }
    });
  }
}

// === üè≠ FACTORY OPTIONS ===

/**
 * Factory function pour cr√©er le module Options
 * Utilise la factory g√©n√©rique de BaseModule
 */
export async function createOptionsModule(gameRoom, scene, options = {}) {
  try {
    console.log('üè≠ [OptionsFactory] Cr√©ation module Options avec BaseModule...');
    
    const optionsOptions = {
      singleton: true,
      ...options
    };
    
    const optionsInstance = await createModule(OptionsModule, 'options', gameRoom, scene, optionsOptions);
    
    console.log('‚úÖ [OptionsFactory] Module Options cr√©√© avec succ√®s');
    return optionsInstance;
    
  } catch (error) {
    console.error('‚ùå [OptionsFactory] Erreur cr√©ation module Options:', error);
    throw error;
  }
}

// === üìã CONFIGURATION OPTIONS POUR UIMANAGER ===

export const OPTIONS_MODULE_CONFIG = generateModuleConfig('options', {
  moduleClass: OptionsModule,
  order: 0, // Premier en haut-droite
  
  options: {
    singleton: true,
    keyboardShortcut: 'Escape',
    uiManagerConfig: {
      anchor: 'top-right',
      group: 'ui-options'
    }
  },
  
  groups: ['ui-options', 'settings'],
  
  metadata: {
    name: 'Options & Settings',
    description: 'Game options: volume, language, and settings management',
    version: '1.0.0',
    category: 'Settings'
  },
  
  factory: () => createOptionsModule(
    window.currentGameRoom, 
    window.game?.scene?.getScenes(true)[0]
  )
});

// === üîó INT√âGRATION AVEC UIMANAGER ===

/**
 * Enregistrer le module Options dans UIManager
 */
export async function registerOptionsModule(uiManager) {
  try {
    console.log('üìù [OptionsIntegration] Enregistrement Options...');
    
    // V√©rifier si d√©j√† enregistr√©
    if (uiManager.modules && uiManager.modules.has('options')) {
      console.log('‚ÑπÔ∏è [OptionsIntegration] Module d√©j√† enregistr√©');
      return true;
    }
    
    await uiManager.registerModule('options', OPTIONS_MODULE_CONFIG);
    console.log('‚úÖ [OptionsIntegration] Module Options enregistr√©');
    
    return true;
  } catch (error) {
    console.error('‚ùå [OptionsIntegration] Erreur enregistrement:', error);
    throw error;
  }
}

/**
 * Initialiser et connecter le module Options
 */
export async function initializeOptionsModule(uiManager) {
  try {
    console.log('üöÄ [OptionsIntegration] Initialisation Options...');
    
    // Enregistrer le module
    await registerOptionsModule(uiManager);
    
    // V√©rifier si d√©j√† initialis√© (singleton)
    let optionsInstance = OptionsModule.getInstance('options');
    
    if (!optionsInstance || !optionsInstance.uiManagerState.initialized) {
      // Initialiser le module
      optionsInstance = await uiManager.initializeModule('options');
    } else {
      console.log('‚ÑπÔ∏è [OptionsIntegration] Instance d√©j√† initialis√©e');
      
      // Connecter √† UIManager si pas encore fait
      optionsInstance.connectUIManager(uiManager);
    }
    
    // Setup des √©v√©nements globaux Options
    setupOptionsGlobalEvents(optionsInstance);
    
    console.log('‚úÖ [OptionsIntegration] Initialisation Options termin√©e');
    return optionsInstance;
    
  } catch (error) {
    console.error('‚ùå [OptionsIntegration] Erreur initialisation:', error);
    throw error;
  }
}

// === üåê √âV√âNEMENTS GLOBAUX OPTIONS ===

function setupOptionsGlobalEvents(optionsInstance) {
  // √âviter double setup
  if (window._optionsEventsSetup) {
    console.log('‚ÑπÔ∏è [OptionsEvents] √âv√©nements d√©j√† configur√©s');
    return;
  }
  
  // √âv√©nement: Changement de langue
  window.addEventListener('languageChanged', (event) => {
    console.log('üåê [OptionsEvents] Langue chang√©e:', event.detail);
    
    // Recharger les textes si n√©cessaire
    if (typeof window.updateGameTexts === 'function') {
      window.updateGameTexts(event.detail.language);
    }
  });
  
  // √âv√©nement: Audio focus (pour auto-mute)
  window.addEventListener('blur', () => {
    if (optionsInstance.manager && !optionsInstance.manager.isMuted()) {
      // Optionnel: mettre en sourdine quand fen√™tre perd le focus
      // optionsInstance.manager.setMuted(true);
    }
  });
  
  window.addEventListener('focus', () => {
    if (optionsInstance.manager) {
      // Appliquer les param√®tres audio au retour de focus
      optionsInstance.manager.applyVolumeSettings();
    }
  });
  
  // √âv√©nement: D√©tection changement langue navigateur
  window.addEventListener('languagechange', () => {
    if (optionsInstance.manager && optionsInstance.manager.isUsingAutoLanguage()) {
      optionsInstance.manager.detectBrowserLanguage();
      optionsInstance.manager.applyLanguageSettings();
    }
  });
  
  window._optionsEventsSetup = true;
  console.log('üåê [OptionsEvents] √âv√©nements Options configur√©s');
}

// === üí° UTILISATION SIMPLE ===

/**
 * Fonction d'utilisation simple pour int√©grer Options dans un projet
 */
export async function setupOptionsSystem(uiManager) {
  try {
    console.log('üîß [OptionsSetup] Configuration syst√®me Options avec BaseModule...');
    
    // Initialiser le module
    const optionsInstance = await initializeOptionsModule(uiManager);
    
    // Exposer globalement pour compatibilit√©
    if (!window.optionsSystem) {
      window.optionsSystem = optionsInstance;
      window.optionsSystemGlobal = optionsInstance;
      window.toggleOptions = () => optionsInstance.toggleUI();
      window.openOptions = () => optionsInstance.open();
      window.closeOptions = () => optionsInstance.close();
      window.forceCloseOptions = () => optionsInstance.forceCloseUI();
      
      // ‚úÖ API SIMPLE d√©j√† expos√©e par OptionsManager
      // window.GetPlayerCurrentLanguage - d√©j√† d√©finie
      // window.GetPlayerCurrentVolume - d√©j√† d√©finie
      // window.IsPlayerAudioMuted - d√©j√† d√©finie
      
      console.log('üåê [OptionsSetup] Fonctions globales Options expos√©es');
    }
    
    console.log('‚úÖ [OptionsSetup] Syst√®me Options configur√© avec BaseModule');
    return optionsInstance;
    
  } catch (error) {
    console.error('‚ùå [OptionsSetup] Erreur configuration:', error);
    throw error;
  }
}

// === üéØ API SHORTCUTS GLOBALES ===

/**
 * Raccourcis pour acc√®s rapide aux options
 */
export function getQuickOptionsAPI() {
  const instance = OptionsModule.getInstance('options');
  
  return {
    // Langue
    getCurrentLanguage: () => instance?.getCurrentLanguage() || 'en',
    setLanguage: (lang) => instance?.setLanguage(lang) || false,
    
    // Volume
    getCurrentVolume: () => instance?.getCurrentVolume() || 50,
    setVolume: (vol) => instance?.setVolume(vol) || false,
    toggleMute: () => instance?.toggleMute() || false,
    isAudioMuted: () => instance?.isAudioMuted() || false,
    
    // Options
    getAllOptions: () => instance?.getAllOptions() || {},
    resetToDefaults: () => instance?.resetToDefaults() || false,
    
    // UI
    openOptions: () => instance?.open() || false,
    closeOptions: () => instance?.close() || false,
    toggleOptions: () => instance?.toggleUI() || false
  };
}

// === üîç UTILIT√âS DE DEBUG OPTIONS ===

export function debugOptionsModule() {
  const { debugModule } = require('../core/BaseModule.js');
  return debugModule('options', OptionsModule);
}

export function fixOptionsModule() {
  console.log('üîß [OptionsFix] R√©paration module Options...');
  
  try {
    const instance = OptionsModule.getInstance('options');
    
    if (instance) {
      // Force fermeture UI via BaseModule
      instance.forceCloseUI();
      
      // R√©appliquer param√®tres
      if (instance.manager) {
        instance.manager.applyOptions();
      }
      
      console.log('‚úÖ [OptionsFix] Module Options r√©par√©');
      return true;
    } else {
      console.log('‚ÑπÔ∏è [OptionsFix] Aucune instance √† r√©parer');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå [OptionsFix] Erreur r√©paration:', error);
    return false;
  }
}

// === üìã EXPORT PAR D√âFAUT ===

export default OptionsModule;

// === üåê AUTO-SETUP SI DEMAND√â ===

// Exposer API simple imm√©diatement si pas encore fait
if (typeof window !== 'undefined' && !window.GetPlayerCurrentLanguage) {
  // API de base disponible m√™me avant init compl√®te
  window.GetPlayerCurrentLanguage = () => {
    const instance = OptionsModule.getInstance('options');
    if (instance) {
      return instance.getCurrentLanguage();
    }
    
    // Fallback basique
    try {
      const lang = navigator.language.toLowerCase().split('-')[0];
      return ['en', 'fr', 'es', 'de', 'it', 'pt', 'ja', 'ko'].includes(lang) ? lang : 'en';
    } catch {
      return 'en';
    }
  };
  
  window.GetPlayerCurrentVolume = () => {
    const instance = OptionsModule.getInstance('options');
    return instance ? instance.getCurrentVolume() : 50;
  };
  
  window.IsPlayerAudioMuted = () => {
    const instance = OptionsModule.getInstance('options');
    return instance ? instance.isAudioMuted() : false;
  };
  
  console.log('üåê [OptionsModule] API globale basique expos√©e');
}

console.log(`
‚öôÔ∏è === OPTIONS MODULE COMPLET AVEC BASEMODULE ===

üéØ ARCHITECTURE BASEMODULE:
‚Ä¢ H√©rite logique UIManager compl√®te
‚Ä¢ Patterns standards avec Team/Quest
‚Ä¢ Singleton int√©gr√©
‚Ä¢ Position haut-droite sp√©ciale

üìç CONFIGURATION UIMANAGER:
‚Ä¢ anchor: 'top-right' (unique)
‚Ä¢ order: 0 (premier en haut)
‚Ä¢ group: 'ui-options'
‚Ä¢ shortcut: 'Escape'

üåê API GLOBALE SIMPLE:
‚Ä¢ GetPlayerCurrentLanguage() ‚Üí 'fr', 'en', etc.
‚Ä¢ GetPlayerCurrentVolume() ‚Üí 0-100
‚Ä¢ IsPlayerAudioMuted() ‚Üí true/false
‚Ä¢ Disponible IMM√âDIATEMENT depuis n'importe o√π

‚öôÔ∏è FONCTIONNALIT√âS COMPL√àTES:
‚Ä¢ Volume 1-100 + mute temps r√©el
‚Ä¢ 8 langues + auto-d√©tection
‚Ä¢ Sauvegarde localStorage
‚Ä¢ UI compl√®te avec feedback

üîß M√âTHODES H√âRIT√âES:
‚Ä¢ show(), hide(), toggle() - BaseModule
‚Ä¢ connectUIManager() - connexion auto
‚Ä¢ forceCloseUI() - fermeture forc√©e
‚Ä¢ getUIManagerState() - √©tat complet

‚å®Ô∏è ESCAPE SP√âCIAL:
‚Ä¢ Si UI ouverte ‚Üí ferme l'UI prioritaire
‚Ä¢ Si rien ouvert ‚Üí ouvre Options
‚Ä¢ Gestion intelligente des conflits

‚úÖ OPTIONS MODULE 100% TERMIN√â !
`);

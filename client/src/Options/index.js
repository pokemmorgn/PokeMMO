// Options/index.js - OptionsModule avec BaseModule + TRADUCTIONS INT√âGR√âES
// üåê NOUVELLE VERSION : Transmission optionsManager aux composants pour traductions
// üìç INT√âGR√â avec UIManager - Position haut-droite
// ‚öôÔ∏è MODULE COMPLET: Volume + Langue + API globale + Traductions temps r√©el

import { BaseModule, createModule, generateModuleConfig } from '../core/BaseModule.js';
import { OptionsManager, initializeGlobalOptionsAPI } from './OptionsManager.js';
import { OptionsIcon } from './OptionsIcon.js';
import { OptionsUI } from './OptionsUI.js';

/**
 * Module Options utilisant BaseModule avec traductions temps r√©el
 * H√©rite de toute la logique UIManager g√©n√©rique
 * üåê SUPPORTE TRADUCTIONS TEMPS R√âEL pour ses propres composants
 */
export class OptionsModule extends BaseModule {
  constructor(moduleId, gameRoom, scene, options = {}) {
    // ‚úÖ EXTRAIRE optionsManager des options (pour √©viter r√©cursion)
    const { optionsManager, ...baseOptions } = options;
    
    // Configuration sp√©cifique Options
    const optionsOptions = {
      singleton: true,           // Options est un singleton
      autoCloseUI: true,         // Fermer UI par d√©faut
      keyboardShortcut: 'Escape', // Touche Escape pour ouvrir/fermer
      uiManagerConfig: {
        anchor: 'top-right',     // ‚úÖ HAUT-DROITE (diff√©rent des autres)
        order: 0,                // Premier en haut √† droite
        group: 'ui-options'      // Groupe sp√©cial pour options
      },
      ...baseOptions
    };
    
    super(moduleId || 'options', gameRoom, scene, optionsOptions);
    
    // ‚úÖ STOCKER optionsManager externe (pour √©viter r√©cursion avec soi-m√™me)
    this.externalOptionsManager = optionsManager;
    
    // üåê NOUVEAU : Variables pour traductions
    this.translationsInitialized = false;
    
    console.log('‚öôÔ∏è [OptionsModule] Instance cr√©√©e avec BaseModule + traductions int√©gr√©es');
  }
  
  // === üéØ IMPL√âMENTATION DES M√âTHODES ABSTRAITES ===
  
  /**
   * Initialisation sp√©cifique Options
   */
  async init() {
    console.log('üöÄ [OptionsModule] Initialisation m√©tier Options...');
    
    // Cr√©er le manager (business logic)
    this.manager = new OptionsManager(this.gameRoom);
    this.manager.init();
    
    // ‚úÖ INITIALISER L'API GLOBALE imm√©diatement
    initializeGlobalOptionsAPI(this.manager);
    
    console.log('‚úÖ [OptionsModule] Manager Options initialis√©');
  }
  
  /**
   * Cr√©ation des composants Options avec traductions
   */
  createComponents() {
    console.log('üîß [OptionsModule] Cr√©ation composants Options avec traductions...');
    
    // üåê NOUVEAU : Cr√©er l'ic√¥ne avec traductions
    if (!this.icon) {
      this.icon = new OptionsIcon(
        this.manager,                    // Manager interne pour donn√©es
        this.externalOptionsManager      // ‚úÖ NOUVEAU : Manager externe pour traductions
      );
      this.icon.init();
    }
    
    // üåê NOUVEAU : Cr√©er l'interface avec traductions
    if (!this.ui) {
      this.ui = new OptionsUI(
        this.manager,                    // Manager interne pour donn√©es
        this.gameRoom,                   // GameRoom
        this.externalOptionsManager      // ‚úÖ NOUVEAU : Manager externe pour traductions
      );
      // Note: L'init de OptionsUI est async, on le fait dans connectComponents
    }
    
    console.log('‚úÖ [OptionsModule] Composants Options cr√©√©s avec support traductions');
  }
  
  /**
   * Connexion des composants Options avec setup traductions
   */
  connectComponents() {
    console.log('üîó [OptionsModule] Connexion composants Options avec traductions...');
    
    // Initialiser UI de mani√®re async si n√©cessaire
    if (this.ui && !this.ui.initialized) {
      this.ui.init().catch(error => {
        console.error('‚ùå [OptionsModule] Erreur init UI:', error);
      });
    }
    
    // Ic√¥ne ‚Üí Interface (clic ouvre l'interface)
    if (this.icon) {
      this.icon.onClick = () => {
        if (this.canOpenUI()) {
          this.ui.toggle();
        } else {
          this.showCannotOpenMessage();
        }
      };
    }
    
    // Manager ‚Üí Ic√¥ne (mise √† jour des stats)
    if (this.manager) {
      this.manager.onVolumeChange = (data) => {
        if (this.icon) {
          this.icon.updateStats({
            volume: data.volume,
            isMuted: data.isMuted,
            currentLanguage: this.manager.getCurrentLanguage(),
            languageFlag: this.manager.getLanguageInfo().flag
          });
          
          // Animation volume
          this.icon.animateVolumeChange();
        }
      };
      
      this.manager.onLanguageChange = (data) => {
        if (this.icon) {
          this.icon.updateStats({
            volume: this.manager.getVolume(),
            isMuted: this.manager.isMuted(),
            currentLanguage: data.currentLanguage,
            languageFlag: data.languageInfo.flag
          });
          
          // Animation langue
          this.icon.animateLanguageChange();
        }
        
        // üåê NOUVEAU : Pas besoin de updateLanguage explicite - les listeners s'en chargent
        // Les composants √©coutent automatiquement les changements via leurs listeners
        console.log('üåê [OptionsModule] Changement langue d√©tect√© - les composants se mettront √† jour automatiquement');
      };
      
      this.manager.onOptionsUpdate = (updateData) => {
        // Mettre √† jour UI si ouverte
        if (this.ui && this.ui.isVisible) {
          this.ui.updateOptionsData(this.manager.getAllOptions());
        }
        
        // Mise √† jour stats ic√¥ne
        if (this.icon) {
          const allOptions = this.manager.getAllOptions();
          this.icon.updateStats({
            volume: allOptions.volume,
            isMuted: allOptions.isMuted,
            currentLanguage: allOptions.currentLanguage,
            languageFlag: allOptions.languageInfo.flag
          });
        }
      };
    }
    
    // Interface ‚Üí Manager (actions utilisateur)
    if (this.ui) {
      this.ui.onAction = (action, data) => {
        this.handleUIAction(action, data);
      };
    }
    
    // ‚úÖ MISE √Ä JOUR INITIALE des stats
    this.updateInitialStats();
    
    // üåê NOUVEAU : Marquer traductions comme initialis√©es
    this.translationsInitialized = true;
    
    console.log('‚úÖ [OptionsModule] Composants Options connect√©s avec traductions automatiques');
  }
  
  // === ‚öôÔ∏è M√âTHODES SP√âCIFIQUES OPTIONS (IDENTIQUES) ===
  
  /**
   * Gestion des actions de l'interface
   */
  handleUIAction(action, data) {
    console.log(`üé¨ [OptionsModule] Action UI: ${action}`, data);
    
    if (!this.manager) {
      console.warn('‚ö†Ô∏è [OptionsModule] Manager non disponible');
      return;
    }
    
    switch (action) {
      case 'setVolume':
        this.manager.setVolume(data.volume);
        break;
        
      case 'setMuted':
        this.manager.setMuted(data.muted);
        break;
        
      case 'setLanguage':
        this.manager.setLanguage(data.language);
        break;
        
      case 'resetToDefaults':
        this.manager.resetToDefaults();
        this.ui?.resetChanges();
        break;
        
      case 'saveOptions':
        // Options auto-sauv√©es, juste reset changements
        this.ui?.resetChanges();
        this.showActionSuccess('Options sauvegard√©es');
        break;
        
      case 'requestData':
        if (this.ui) {
          this.ui.updateOptionsData(this.manager.getAllOptions());
        }
        break;
        
      default:
        console.warn(`‚ö†Ô∏è [OptionsModule] Action inconnue: ${action}`);
    }
  }
  
  /**
   * Mise √† jour initiale des stats
   */
  updateInitialStats() {
    if (this.manager && this.icon) {
      const allOptions = this.manager.getAllOptions();
      this.icon.updateStats({
        volume: allOptions.volume,
        isMuted: allOptions.isMuted,
        currentLanguage: allOptions.currentLanguage,
        languageFlag: allOptions.languageInfo.flag
      });
    }
  }
  
  /**
   * üåê Override show pour charger les donn√©es + traductions
   */
  show() {
    const result = super.show();
    
    // Charger donn√©es Options sp√©cifiquement
    if (this.manager && this.ui) {
      setTimeout(() => {
        this.ui.updateOptionsData(this.manager.getAllOptions());
        
        // üåê NOUVEAU : Les traductions se mettront √† jour automatiquement
        // gr√¢ce aux listeners configur√©s dans les composants
        console.log('üåê [OptionsModule] Interface ouverte - traductions automatiques actives');
      }, 100);
    }
    
    return result;
  }
  
  /**
   * Afficher succ√®s action
   */
  showActionSuccess(message) {
    if (typeof window.showGameNotification === 'function') {
      window.showGameNotification(message, 'success', {
        duration: 2000,
        position: 'top-center'
      });
    }
  }
  
  // === üåê API PUBLIQUE OPTIONS (IDENTIQUES) ===
  
  getCurrentLanguage() {
    return this.manager ? this.manager.getCurrentLanguage() : 'en';
  }
  
  getCurrentVolume() {
    return this.manager ? this.manager.getEffectiveVolume() : 50;
  }
  
  isAudioMuted() {
    return this.manager ? this.manager.isMuted() : false;
  }
  
  setLanguage(languageCode) {
    if (this.manager) {
      return this.manager.setLanguage(languageCode);
    }
    return false;
  }
  
  setVolume(volume) {
    if (this.manager) {
      return this.manager.setVolume(volume);
    }
    return false;
  }
  
  toggleMute() {
    if (this.manager) {
      return this.manager.toggleMute();
    }
    return false;
  }
  
  getAllOptions() {
    return this.manager ? this.manager.getAllOptions() : {};
  }
  
  resetToDefaults() {
    if (this.manager) {
      this.manager.resetToDefaults();
      return true;
    }
    return false;
  }
  
  // API legacy pour compatibilit√©
  toggleOptionsUI() {
    this.toggleUI();
  }
  
  openOptions() {
    this.open();
  }
  
  closeOptions() {
    this.close();
  }
  
  // === üìã OVERRIDE STATE POUR INFOS OPTIONS ===
  
  getUIManagerState() {
    const baseState = super.getUIManagerState();
    
    // Ajouter infos sp√©cifiques Options
    return {
      ...baseState,
      currentLanguage: this.getCurrentLanguage(),
      currentVolume: this.getCurrentVolume(),
      isAudioMuted: this.isAudioMuted(),
      moduleType: 'options',
      hasTranslationsSupport: true, // ‚úÖ CONFIRM√â
      hasExternalOptionsManager: !!this.externalOptionsManager, // ‚úÖ CONFIRM√â
      translationsInitialized: this.translationsInitialized // üåê NOUVEAU
    };
  }
  
  // === ‚å®Ô∏è GESTION ESCAPE SP√âCIALE (IDENTIQUE) ===
  
  handleKeyboardShortcut(event) {
    if (event.key === 'Escape') {
      if (this.isUIVisible()) {
        this.close();
        event.preventDefault();
        event.stopPropagation();
        return true;
      } else {
        this.open();
        event.preventDefault();
        event.stopPropagation();
        return true;
      }
    }
    
    return super.handleKeyboardShortcut(event);
  }
  
  isUIVisible() {
    if (this.ui && this.ui.isVisible) return true;
    
    const uiChecks = [
      () => window.questSystem?.ui?.isVisible,
      () => window.teamSystem?.ui?.isVisible,
      () => window.inventorySystem?.ui?.isVisible
    ];
    
    return uiChecks.some(check => {
      try {
        return check();
      } catch {
        return false;
      }
    });
  }
  
  // === üßπ NETTOYAGE AVEC TRADUCTIONS ===
  
  destroy() {
    console.log('üßπ [OptionsModule] Destruction avec nettoyage traductions...');
    
    // ‚úÖ Les composants nettoieront leurs propres listeners dans leur destroy()
    // Plus besoin de cleanup manuel ici
    
    // Nettoyage BaseModule standard
    super.destroy();
    
    // Nettoyage sp√©cifique Options
    this.externalOptionsManager = null;
    this.translationsInitialized = false;
    
    console.log('‚úÖ [OptionsModule] D√©truit avec traductions automatiques nettoy√©es');
  }
}

// === üè≠ FACTORY OPTIONS AVEC TRADUCTIONS ===

/**
 * Factory function pour cr√©er le module Options
 * ‚úÖ SUPPORTE TRADUCTIONS via optionsManager externe
 */
export async function createOptionsModule(gameRoom, scene, options = {}) {
  try {
    console.log('üè≠ [OptionsFactory] Cr√©ation module Options avec BaseModule + traductions...');
    console.log('üåê [OptionsFactory] Options re√ßues:', Object.keys(options));
    
    const optionsOptions = {
      singleton: true,
      ...options // ‚úÖ INCLUT optionsManager si pr√©sent
    };
    
    const optionsInstance = await createModule(OptionsModule, 'options', gameRoom, scene, optionsOptions);
    
    console.log('‚úÖ [OptionsFactory] Module Options cr√©√© avec traductions automatiques');
    return optionsInstance;
    
  } catch (error) {
    console.error('‚ùå [OptionsFactory] Erreur cr√©ation module Options:', error);
    throw error;
  }
}

// === üìã CONFIGURATION OPTIONS POUR UIMANAGER (IDENTIQUE) ===

export const OPTIONS_MODULE_CONFIG = generateModuleConfig('options', {
  moduleClass: OptionsModule,
  order: 0,
  
  options: {
    singleton: true,
    keyboardShortcut: 'Escape',
    uiManagerConfig: {
      anchor: 'top-right',
      group: 'ui-options'
    }
  },
  
  groups: ['ui-options', 'settings'],
  
  metadata: {
    name: 'Options & Settings',
    description: 'Game options: volume, language, and settings management with real-time translations',
    version: '1.0.0',
    category: 'Settings',
    features: ['translations', 'real-time-language-switching', 'automatic-translation-updates'] // ‚úÖ NOUVEAU
  },
  
  factory: () => createOptionsModule(
    window.currentGameRoom, 
    window.game?.scene?.getScenes(true)[0]
  )
});

// === üîó FONCTIONS D'INT√âGRATION (IDENTIQUES) ===

export async function registerOptionsModule(uiManager) {
  try {
    console.log('üìù [OptionsIntegration] Enregistrement Options...');
    
    if (uiManager.modules && uiManager.modules.has('options')) {
      console.log('‚ÑπÔ∏è [OptionsIntegration] Module d√©j√† enregistr√©');
      return true;
    }
    
    await uiManager.registerModule('options', OPTIONS_MODULE_CONFIG);
    console.log('‚úÖ [OptionsIntegration] Module Options enregistr√© avec traductions');
    
    return true;
  } catch (error) {
    console.error('‚ùå [OptionsIntegration] Erreur enregistrement:', error);
    throw error;
  }
}

export async function initializeOptionsModule(uiManager) {
  try {
    console.log('üöÄ [OptionsIntegration] Initialisation Options avec traductions...');
    
    await registerOptionsModule(uiManager);
    
    let optionsInstance = OptionsModule.getInstance('options');
    
    if (!optionsInstance || !optionsInstance.uiManagerState.initialized) {
      optionsInstance = await uiManager.initializeModule('options');
    } else {
      console.log('‚ÑπÔ∏è [OptionsIntegration] Instance d√©j√† initialis√©e');
      optionsInstance.connectUIManager(uiManager);
    }
    
    setupOptionsGlobalEvents(optionsInstance);
    
    console.log('‚úÖ [OptionsIntegration] Initialisation Options termin√©e avec traductions automatiques');
    return optionsInstance;
    
  } catch (error) {
    console.error('‚ùå [OptionsIntegration] Erreur initialisation:', error);
    throw error;
  }
}

function setupOptionsGlobalEvents(optionsInstance) {
  if (window._optionsEventsSetup) {
    console.log('‚ÑπÔ∏è [OptionsEvents] √âv√©nements d√©j√† configur√©s');
    return;
  }
  
  window.addEventListener('languageChanged', (event) => {
    console.log('üåê [OptionsEvents] Langue chang√©e:', event.detail);
    
    if (typeof window.updateGameTexts === 'function') {
      window.updateGameTexts(event.detail.language);
    }
  });
  
  window.addEventListener('blur', () => {
    if (optionsInstance.manager && !optionsInstance.manager.isMuted()) {
      // Optionnel: auto-mute
    }
  });
  
  window.addEventListener('focus', () => {
    if (optionsInstance.manager) {
      optionsInstance.manager.applyVolumeSettings();
    }
  });
  
  window.addEventListener('languagechange', () => {
    if (optionsInstance.manager && optionsInstance.manager.isUsingAutoLanguage()) {
      optionsInstance.manager.detectBrowserLanguage();
      optionsInstance.manager.applyLanguageSettings();
    }
  });
  
  window._optionsEventsSetup = true;
  console.log('üåê [OptionsEvents] √âv√©nements Options configur√©s avec traductions automatiques');
}

export async function setupOptionsSystem(uiManager) {
  try {
    console.log('üîß [OptionsSetup] Configuration syst√®me Options avec BaseModule + traductions automatiques...');
    
    const optionsInstance = await initializeOptionsModule(uiManager);
    
    if (!window.optionsSystem) {
      window.optionsSystem = optionsInstance;
      window.optionsSystemGlobal = optionsInstance;
      window.toggleOptions = () => optionsInstance.toggleUI();
      window.openOptions = () => optionsInstance.open();
      window.closeOptions = () => optionsInstance.close();
      window.forceCloseOptions = () => optionsInstance.forceCloseUI();
      
      console.log('üåê [OptionsSetup] Fonctions globales Options expos√©es avec traductions automatiques');
    }
    
    console.log('‚úÖ [OptionsSetup] Syst√®me Options configur√© avec BaseModule + traductions automatiques');
    return optionsInstance;
    
  } catch (error) {
    console.error('‚ùå [OptionsSetup] Erreur configuration:', error);
    throw error;
  }
}

// === üéØ API SHORTCUTS GLOBALES (IDENTIQUES) ===

export function getQuickOptionsAPI() {
  const instance = OptionsModule.getInstance('options');
  
  return {
    getCurrentLanguage: () => instance?.getCurrentLanguage() || 'en',
    setLanguage: (lang) => instance?.setLanguage(lang) || false,
    getCurrentVolume: () => instance?.getCurrentVolume() || 50,
    setVolume: (vol) => instance?.setVolume(vol) || false,
    toggleMute: () => instance?.toggleMute() || false,
    isAudioMuted: () => instance?.isAudioMuted() || false,
    getAllOptions: () => instance?.getAllOptions() || {},
    resetToDefaults: () => instance?.resetToDefaults() || false,
    openOptions: () => instance?.open() || false,
    closeOptions: () => instance?.close() || false,
    toggleOptions: () => instance?.toggleUI() || false,
    
    // üåê NOUVEAU : Info traductions
    hasTranslationsSupport: () => instance?.translationsInitialized || false,
    getTranslationsStatus: () => ({
      initialized: instance?.translationsInitialized || false,
      hasExternalManager: !!(instance?.externalOptionsManager),
      iconReady: !!(instance?.icon?.translationsReady),
      uiReady: !!(instance?.ui?.translationsReady)
    })
  };
}

export function debugOptionsModule() {
  const { debugModule } = require('../core/BaseModule.js');
  return debugModule('options', OptionsModule);
}

export function fixOptionsModule() {
  console.log('üîß [OptionsFix] R√©paration module Options...');
  
  try {
    const instance = OptionsModule.getInstance('options');
    
    if (instance) {
      instance.forceCloseUI();
      
      if (instance.manager) {
        instance.manager.applyOptions();
      }
      
      console.log('‚úÖ [OptionsFix] Module Options r√©par√©');
      return true;
    } else {
      console.log('‚ÑπÔ∏è [OptionsFix] Aucune instance √† r√©parer');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå [OptionsFix] Erreur r√©paration:', error);
    return false;
  }
}

export default OptionsModule;

// === üåê AUTO-SETUP API GLOBALE (IDENTIQUE) ===

if (typeof window !== 'undefined' && !window.GetPlayerCurrentLanguage) {
  window.GetPlayerCurrentLanguage = () => {
    const instance = OptionsModule.getInstance('options');
    if (instance) {
      return instance.getCurrentLanguage();
    }
    
    try {
      const lang = navigator.language.toLowerCase().split('-')[0];
      return ['en', 'fr', 'es', 'de', 'it', 'pt', 'ja', 'ko'].includes(lang) ? lang : 'en';
    } catch {
      return 'en';
    }
  };
  
  window.GetPlayerCurrentVolume = () => {
    const instance = OptionsModule.getInstance('options');
    return instance ? instance.getCurrentVolume() : 50;
  };
  
  window.IsPlayerAudioMuted = () => {
    const instance = OptionsModule.getInstance('options');
    return instance ? instance.isAudioMuted() : false;
  };
  
  console.log('üåê [OptionsModule] API globale basique expos√©e');
}

console.log(`
‚öôÔ∏è === OPTIONS MODULE AVEC TRADUCTIONS AUTOMATIQUES ===

üåê NOUVELLES FONCTIONNALIT√âS TRADUCTIONS:
‚Ä¢ externalOptionsManager transmis aux composants OptionsIcon et OptionsUI
‚Ä¢ Les composants configurent automatiquement leurs listeners de traductions
‚Ä¢ Plus besoin de setupTranslationsSupport() dans le module
‚Ä¢ Cleanup automatique des listeners dans destroy() des composants

üîÑ FLUX TRADUCTIONS AUTOMATIQUE:
1. UI.js passe optionsManager ‚Üí createOptionsModule()
2. OptionsModule stocke comme externalOptionsManager
3. OptionsModule transmet externalOptionsManager aux constructeurs
4. OptionsIcon et OptionsUI configurent leurs listeners automatiquement
5. Changements de langue ‚Üí composants se traduisent automatiquement

‚úÖ R√âSULTAT:
‚Ä¢ Interface Options se traduit elle-m√™me instantan√©ment
‚Ä¢ Changement langue externe ‚Üí traduction automatique
‚Ä¢ Changement langue dans Options ‚Üí traduction automatique
‚Ä¢ Aucune intervention manuelle requise
‚Ä¢ Nettoyage automatique garanti

üéØ UTILISATION:
‚Ä¢ Passer { optionsManager } √† createOptionsModule()
‚Ä¢ Les traductions fonctionnent automatiquement
‚Ä¢ API globale toujours disponible
‚Ä¢ Debug avec getTranslationsStatus()

‚úÖ OPTIONS MODULE AVEC TRADUCTIONS AUTOMATIQUES COMPL√àTES !
`);

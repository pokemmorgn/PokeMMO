// server/src/Intelligence/Core/ActionTypes.ts

/**
 * üéÆ SYST√àME DE TYPES D'ACTIONS - FONDATION DU TRACKING INTELLIGENT
 * 
 * Ce fichier d√©finit TOUS les types d'actions possibles dans le MMO Pok√©mon.
 * Chaque action du joueur sera cat√©goris√©e et track√©e selon ces types.
 * 
 * ORDRE CRITIQUE : Ce fichier DOIT √™tre cr√©√© EN PREMIER !
 * Tout le syst√®me d'IA d√©pend de ces d√©finitions.
 */

// ===================================================================
// üè∑Ô∏è CAT√âGORIES PRINCIPALES D'ACTIONS
// ===================================================================

export enum ActionCategory {
  // Core gameplay
  POKEMON = "pokemon",           // Capture, release, √©volution
  COMBAT = "combat",             // Combats PvE et PvP
  MOVEMENT = "movement",         // D√©placements sur la carte
  EXPLORATION = "exploration",   // D√©couverte de zones, objets
  
  // Syst√®mes de jeu
  INVENTORY = "inventory",       // Gestion objets et √©quipement
  QUEST = "quest",              // Syst√®me de qu√™tes
  SOCIAL = "social",            // Interactions avec autres joueurs
  ECONOMY = "economy",          // Trading, achat/vente
  
  // Interface et UX
  UI = "ui",                    // Interactions interface
  SETTINGS = "settings",        // Changements configuration
  
  // Meta-gameplay
  SESSION = "session",          // Connexion, d√©connexion
  ACHIEVEMENT = "achievement",  // Succ√®s et accomplissements
  ERROR = "error"              // Erreurs et bugs
}

// ===================================================================
// üéØ TYPES D'ACTIONS D√âTAILL√âS PAR CAT√âGORIE
// ===================================================================

export enum ActionType {
  // üêæ POK√âMON ACTIONS
  POKEMON_ENCOUNTER = "pokemon_encounter",         // Rencontre Pok√©mon sauvage
  POKEMON_CAPTURE_ATTEMPT = "pokemon_capture_attempt", // Tentative de capture
  POKEMON_CAPTURE_SUCCESS = "pokemon_capture_success", // Capture r√©ussie
  POKEMON_CAPTURE_FAILURE = "pokemon_capture_failure", // Capture rat√©e
  POKEMON_FLEE = "pokemon_flee",                   // Pok√©mon s'enfuit
  POKEMON_RELEASE = "pokemon_release",             // Lib√©rer un Pok√©mon
  POKEMON_EVOLVE = "pokemon_evolve",               // √âvolution
  POKEMON_NICKNAME = "pokemon_nickname",           // Changer surnom
  POKEMON_SWITCH_TEAM = "pokemon_switch_team",     // Changer √©quipe active
  
  // ‚öîÔ∏è COMBAT ACTIONS
  BATTLE_START = "battle_start",                   // D√©but combat
  BATTLE_END = "battle_end",                       // Fin combat
  BATTLE_ATTACK = "battle_attack",                 // Attaque lanc√©e
  BATTLE_ITEM_USE = "battle_item_use",            // Utilisation objet en combat
  BATTLE_POKEMON_SWITCH = "battle_pokemon_switch", // Changement Pok√©mon actif
  BATTLE_RUN_ATTEMPT = "battle_run_attempt",       // Tentative de fuite
  BATTLE_VICTORY = "battle_victory",               // Victoire
  BATTLE_DEFEAT = "battle_defeat",                 // D√©faite
  BATTLE_DRAW = "battle_draw",                     // Match nul
  
  // üö∂ MOVEMENT ACTIONS  
  PLAYER_MOVE = "player_move",                     // Mouvement joueur
  MAP_CHANGE = "map_change",                       // Changement de carte
  TELEPORT = "teleport",                          // T√©l√©portation
  STUCK_DETECTION = "stuck_detection",             // Joueur bloqu√© d√©tect√©
  
  // üó∫Ô∏è EXPLORATION ACTIONS
  ZONE_DISCOVER = "zone_discover",                 // D√©couverte nouvelle zone
  OBJECT_INTERACT = "object_interact",             // Interaction avec objet
  OBJECT_COLLECT = "object_collect",               // Collecte d'objet
  HIDDEN_ITEM_FIND = "hidden_item_find",          // Trouvaille objet cach√©
  NPC_TALK = "npc_talk",                          // Dialogue avec NPC
  
  // üéí INVENTORY ACTIONS
  ITEM_USE = "item_use",                          // Utilisation objet
  ITEM_DROP = "item_drop",                        // Jeter objet
  ITEM_SORT = "item_sort",                        // Trier inventaire
  ITEM_COMBINE = "item_combine",                  // Combiner objets
  
  // üìã QUEST ACTIONS
  QUEST_ACCEPT = "quest_accept",                  // Accepter qu√™te
  QUEST_ABANDON = "quest_abandon",                // Abandonner qu√™te
  QUEST_PROGRESS = "quest_progress",              // Progression qu√™te
  QUEST_COMPLETE = "quest_complete",              // Terminer qu√™te
  QUEST_TURN_IN = "quest_turn_in",               // Rendre qu√™te
  
  // üë• SOCIAL ACTIONS
  PLAYER_MESSAGE = "player_message",              // Message √† autre joueur
  FRIEND_ADD = "friend_add",                      // Ajout ami
  FRIEND_REMOVE = "friend_remove",                // Suppression ami
  GUILD_JOIN = "guild_join",                      // Rejoindre guilde
  GUILD_LEAVE = "guild_leave",                    // Quitter guilde
  TRADE_INITIATE = "trade_initiate",              // Initier √©change
  TRADE_COMPLETE = "trade_complete",              // Finaliser √©change
  
  // üí∞ ECONOMY ACTIONS
  SHOP_BROWSE = "shop_browse",                    // Parcourir boutique
  ITEM_BUY = "item_buy",                         // Achat objet
  ITEM_SELL = "item_sell",                       // Vente objet
  GOLD_EARN = "gold_earn",                       // Gain d'or
  GOLD_SPEND = "gold_spend",                     // D√©pense d'or
  
  // üñ•Ô∏è UI ACTIONS
  MENU_OPEN = "menu_open",                       // Ouverture menu
  MENU_CLOSE = "menu_close",                     // Fermeture menu
  PANEL_SWITCH = "panel_switch",                 // Changement panneau UI
  BUTTON_CLICK = "button_click",                 // Clic bouton
  HOTKEY_USE = "hotkey_use",                     // Utilisation raccourci
  
  // ‚öôÔ∏è SETTINGS ACTIONS
  SETTING_CHANGE = "setting_change",             // Changement param√®tre
  LANGUAGE_CHANGE = "language_change",           // Changement langue
  SOUND_TOGGLE = "sound_toggle",                 // Son on/off
  
  // üì± SESSION ACTIONS
  LOGIN = "login",                               // Connexion
  LOGOUT = "logout",                             // D√©connexion
  SESSION_START = "session_start",               // D√©but session
  SESSION_END = "session_end",                   // Fin session
  AFK_START = "afk_start",                      // D√©but AFK
  AFK_END = "afk_end",                          // Fin AFK
  
  // üèÜ ACHIEVEMENT ACTIONS
  ACHIEVEMENT_UNLOCK = "achievement_unlock",      // D√©blocage succ√®s
  MILESTONE_REACH = "milestone_reach",           // Atteinte palier
  LEVEL_UP = "level_up",                        // Mont√©e de niveau
  
  // NPC
  NPC_INTERACTION = 'npc_interaction',          // Interaction avec NPC
  
  // ‚ùå ERROR ACTIONS
  ERROR_OCCURRED = "error_occurred",             // Erreur rencontr√©e
  BUG_REPORT = "bug_report",                    // Rapport de bug
  CRASH_DETECTED = "crash_detected"             // Crash d√©tect√©
}

// ===================================================================
// üìä DONN√âES SP√âCIFIQUES PAR TYPE D'ACTION
// ===================================================================

/**
 * Interface de base pour toutes les actions
 */
export interface BaseActionData {
  timestamp: number;           // Timestamp en millisecondes
  sessionId: string;          // ID de session
  playerId: string;           // ID du joueur
  playerName: string;         // Nom du joueur
  location: {                 // Position actuelle
    map: string;
    x: number;
    y: number;
  };
  context?: {                 // Contexte additionnel optionnel
    friendsOnline?: string[];
    weather?: string;
    timeOfDay?: string;
    playerLevel?: number;
    sessionDuration?: number;  // Dur√©e session actuelle en ms
  };
}

/**
 * Donn√©es sp√©cifiques aux actions Pok√©mon
 */
export interface PokemonActionData extends BaseActionData {
  pokemon?: {
    species: string;
    level: number;
    isShiny?: boolean;
    ivs?: number[];           // Individual Values
    nature?: string;
  };
  pokeball?: string;          // Type de Pok√©ball utilis√©e
  success?: boolean;          // R√©ussite/√©chec
  attempts?: number;          // Nombre de tentatives
  reason?: string;           // Raison d'√©chec
}

/**
 * Donn√©es sp√©cifiques aux actions de combat
 */
export interface CombatActionData extends BaseActionData {
  battleType: 'wild' | 'trainer' | 'pvp' | 'gym';
  opponent?: string;          // Nom adversaire ou type
  playerTeam: string[];       // √âquipe du joueur
  opponentTeam?: string[];    // √âquipe adversaire
  move?: string;             // Attaque utilis√©e
  damage?: number;           // D√©g√¢ts inflig√©s
  effectiveness?: number;     // Efficacit√© attaque
  result?: 'victory' | 'defeat' | 'draw' | 'ongoing';
  duration?: number;         // Dur√©e combat en ms
  turnsCount?: number;       // Nombre de tours
}

/**
 * Donn√©es sp√©cifiques aux actions de mouvement
 */
export interface MovementActionData extends BaseActionData {
  fromLocation: {
    map: string;
    x: number;
    y: number;
  };
  toLocation: {
    map: string;
    x: number;
    y: number;
  };
  distance?: number;         // Distance parcourue
  speed?: number;           // Vitesse de d√©placement
  method?: 'walk' | 'run' | 'bike' | 'surf' | 'teleport';
}

/**
 * Donn√©es sp√©cifiques aux actions d'inventaire
 */
export interface InventoryActionData extends BaseActionData {
  itemId: string;           // ID de l'objet
  itemName: string;         // Nom de l'objet
  quantity: number;         // Quantit√©
  category?: string;        // Cat√©gorie d'objet
  target?: string;         // Cible (Pok√©mon, etc.)
  effect?: string;         // Effet de l'utilisation
}

/**
 * Donn√©es sp√©cifiques aux actions de qu√™te
 */
export interface QuestActionData extends BaseActionData {
  questId: string;          // ID de la qu√™te
  questName: string;        // Nom de la qu√™te
  questType?: string;       // Type de qu√™te
  progress?: number;        // Progression (0-100)
  reward?: {               // R√©compenses
    gold?: number;
    items?: { id: string; quantity: number }[];
    experience?: number;
  };
  npcId?: string;          // NPC donneur de qu√™te
}

/**
 * Donn√©es sp√©cifiques aux actions sociales
 */
export interface SocialActionData extends BaseActionData {
  targetPlayer?: string;    // Joueur cible
  message?: string;        // Message envoy√©
  channelType?: 'whisper' | 'local' | 'guild' | 'global';
  guildId?: string;        // ID guilde
  tradeItems?: {           // Objets √©chang√©s
    offered: { id: string; quantity: number }[];
    received: { id: string; quantity: number }[];
  };
}

/**
 * Donn√©es sp√©cifiques aux actions d'√©conomie
 */
export interface EconomyActionData extends BaseActionData {
  itemId?: string;         // ID objet achet√©/vendu
  quantity?: number;       // Quantit√©
  price?: number;          // Prix unitaire
  totalCost?: number;      // Co√ªt total
  goldBefore?: number;     // Or avant transaction
  goldAfter?: number;      // Or apr√®s transaction
  shopId?: string;         // ID du marchand
}

/**
 * Union type pour toutes les donn√©es d'action possibles
 */
export type ActionData = 
  | BaseActionData 
  | PokemonActionData 
  | CombatActionData 
  | MovementActionData 
  | InventoryActionData 
  | QuestActionData 
  | SocialActionData 
  | EconomyActionData;

// ===================================================================
// üéØ INTERFACE PRINCIPALE D'ACTION
// ===================================================================

/**
 * Structure principale d'une action track√©e
 */
export interface PlayerAction {
  id: string;                    // UUID unique
  playerId: string;             // ID du joueur
  actionType: ActionType;       // Type d'action (√©num√©ration)
  category: ActionCategory;     // Cat√©gorie principale
  timestamp: number;            // Timestamp Unix en ms
  data: ActionData;            // Donn√©es sp√©cifiques √† l'action
  metadata?: {                 // M√©tadonn√©es optionnelles
    version: string;           // Version du syst√®me de tracking
    source: string;           // Source de l'action (client, server)
    processed: boolean;       // Action analys√©e par l'IA
    tags?: string[];         // Tags additionnels
  };
}

// ===================================================================
// üîß HELPERS ET UTILITAIRES
// ===================================================================

/**
 * V√©rifie si une action appartient √† une cat√©gorie
 */
export function isActionOfCategory(action: PlayerAction, category: ActionCategory): boolean {
  return action.category === category;
}

/**
 * R√©cup√®re la cat√©gorie d'un type d'action
 */
export function getCategoryForActionType(actionType: ActionType): ActionCategory {
  // Mapping automatique bas√© sur le pr√©fixe du nom
  if (actionType.startsWith('pokemon_')) return ActionCategory.POKEMON;
  if (actionType.startsWith('battle_')) return ActionCategory.COMBAT;
  if (actionType.startsWith('player_move') || actionType.startsWith('map_') || actionType === 'teleport') return ActionCategory.MOVEMENT;
  if (actionType.startsWith('zone_') || actionType.startsWith('object_') || actionType.startsWith('hidden_') || actionType === 'npc_talk') return ActionCategory.EXPLORATION;
  if (actionType.startsWith('item_')) return ActionCategory.INVENTORY;
  if (actionType.startsWith('quest_')) return ActionCategory.QUEST;
  if (actionType.startsWith('player_message') || actionType.startsWith('friend_') || actionType.startsWith('guild_') || actionType.startsWith('trade_')) return ActionCategory.SOCIAL;
  if (actionType.startsWith('shop_') || actionType.startsWith('gold_') || actionType === 'item_buy' || actionType === 'item_sell') return ActionCategory.ECONOMY;
  if (actionType.startsWith('menu_') || actionType.startsWith('panel_') || actionType.startsWith('button_') || actionType.startsWith('hotkey_')) return ActionCategory.UI;
  if (actionType.startsWith('setting_') || actionType.startsWith('language_') || actionType.startsWith('sound_')) return ActionCategory.SETTINGS;
  if (actionType.includes('login') || actionType.includes('logout') || actionType.includes('session') || actionType.includes('afk')) return ActionCategory.SESSION;
  if (actionType.startsWith('achievement_') || actionType.includes('level_up') || actionType.includes('milestone')) return ActionCategory.ACHIEVEMENT;
  if (actionType.includes('error') || actionType.includes('bug') || actionType.includes('crash')) return ActionCategory.ERROR;
  
  return ActionCategory.UI; // Fallback
}

/**
 * Cr√©e une action de base avec timestamp et m√©tadonn√©es
 */
export function createBaseAction(
  playerId: string,
  playerName: string,
  actionType: ActionType,
  location: { map: string; x: number; y: number },
  sessionId: string
): Omit<PlayerAction, 'id' | 'data'> {
  return {
    playerId,
    actionType,
    category: getCategoryForActionType(actionType),
    timestamp: Date.now(),
    metadata: {
      version: '1.0.0',
      source: 'server',
      processed: false,
      tags: []
    }
  };
}

/**
 * Types d'actions critiques qui n√©cessitent une analyse imm√©diate
 */
export const CRITICAL_ACTIONS: ActionType[] = [
  ActionType.POKEMON_CAPTURE_FAILURE,
  ActionType.BATTLE_DEFEAT,
  ActionType.ERROR_OCCURRED,
  ActionType.STUCK_DETECTION,
  ActionType.AFK_START
];

/**
 * Types d'actions positives qui indiquent un succ√®s
 */
export const POSITIVE_ACTIONS: ActionType[] = [
  ActionType.POKEMON_CAPTURE_SUCCESS,
  ActionType.BATTLE_VICTORY,
  ActionType.QUEST_COMPLETE,
  ActionType.ACHIEVEMENT_UNLOCK,
  ActionType.LEVEL_UP
];

/**
 * Actions qui indiquent une frustration potentielle
 */
export const FRUSTRATION_INDICATORS: ActionType[] = [
  ActionType.POKEMON_CAPTURE_FAILURE,
  ActionType.POKEMON_FLEE,
  ActionType.BATTLE_DEFEAT,
  ActionType.QUEST_ABANDON,
  ActionType.ERROR_OCCURRED
];

// ===================================================================
// üéÆ CONSTANTES DE CONFIGURATION
// ===================================================================

/**
 * Configuration des seuils de d√©tection comportementale
 */
export const BEHAVIOR_THRESHOLDS = {
  FRUSTRATION_CONSECUTIVE_FAILURES: 3,    // 3 √©checs cons√©cutifs = frustration
  AFK_THRESHOLD_MINUTES: 5,               // 5 min sans action = AFK
  SESSION_LONG_THRESHOLD_HOURS: 3,        // 3h+ = session longue
  RAPID_ACTIONS_PER_MINUTE: 30,          // 30+ actions/min = jeu rapide
  SOCIAL_ISOLATION_THRESHOLD_MINUTES: 30  // 30min sans interaction sociale
} as const;

/**
 * Export par d√©faut pour faciliter les imports
 */
export default {
  ActionType,
  ActionCategory,
  getCategoryForActionType,
  createBaseAction,
  CRITICAL_ACTIONS,
  POSITIVE_ACTIONS,
  FRUSTRATION_INDICATORS,
  BEHAVIOR_THRESHOLDS
};

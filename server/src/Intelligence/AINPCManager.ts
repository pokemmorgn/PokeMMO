// server/src/Intelligence/AINPCManager.ts

/**
 * ü§ñ AI NPC MANAGER - EXTRACTION DU CODE IA DU WORLDROOM
 * 
 * R√©cup√®re EXACTEMENT le code IA qui √©tait dans WorldRoom, sans modification.
 * Objectif : D√©charger WorldRoom en d√©pla√ßant son code IA ici.
 */

// ===================================================================
// üì¶ IMPORTS EXTRAITS DU WORLDROOM
// ===================================================================

import { getIntelligenceOrchestrator, trackPlayerAction, processGameEvent } from "./IntelligenceOrchestrator";
import type { CompletePlayerAnalysis, GameEvent } from "./IntelligenceOrchestrator";
import { getActionTracker } from "./Core/PlayerActionTracker";
import { getActionLogger } from "./DataCollection/ActionLogger";
import { getNPCIntelligenceConnector, registerNPCsWithAI, handleSmartNPCInteraction } from "./NPCSystem/NPCIntelligenceConnector";
import type { SmartNPCResponse } from "./NPCSystem/NPCIntelligenceConnector";
import { ActionType } from "./Core/ActionTypes";

// ===================================================================
// üéØ INTERFACES (pour communication avec WorldRoom)
// ===================================================================

export interface PlayerInfo {
  username: string;
  sessionId: string;
  level: number;
  gold: number;
  currentZone: string;
  x: number;
  y: number;
}

export interface AIInteractionResult {
  success: boolean;
  type: string;
  message?: string;
  dialogue?: any;
  actions?: any[];
  followUpQuestions?: string[];
  metadata?: any;
  isAI: boolean;
}

// ===================================================================
// üî• CLASSE PRINCIPALE - CODE EXTRAIT DU WORLDROOM
// ===================================================================

export class AINPCManager {
  // ‚úÖ COPIE EXACTE des propri√©t√©s du WorldRoom
  private intelligenceOrchestrator = getIntelligenceOrchestrator();
  private actionTracker = getActionTracker();
  private actionLogger = getActionLogger();
  private npcIntelligenceConnector = getNPCIntelligenceConnector();
  private aiSystemInitialized = false;
  private aiStats = {
    actionsTracked: 0,
    intelligentInteractions: 0,
    lastAnalysisTime: 0
  };

  constructor() {
    console.log('ü§ñ [AINPCManager] Cr√©√© avec le code extrait du WorldRoom');
  }

  // ===================================================================
  // üöÄ INITIALISATION - COPIE EXACTE DU WORLDROOM
  // ===================================================================

  /**
   * ‚úÖ COPIE EXACTE de la m√©thode initializeAISystem() du WorldRoom
   */
  async initialize(): Promise<void> {
    try {
      console.log(`ü§ñ [AI] === INITIALISATION SYST√àME D'IA ===`);
      
      // √âtape 1: Configurer l'ActionTracker avec notre ActionLogger
      this.actionTracker.setDatabase(this.actionLogger);
      console.log(`‚úÖ [AI] ActionTracker configur√© avec ActionLogger`);
      
      // √âtape 2: Configuration de base du NPCIntelligenceConnector
      this.npcIntelligenceConnector.updateConfig({
        globallyEnabled: true,
        enabledNPCTypes: ['dialogue', 'healer', 'merchant', 'trainer'],
        debugMode: process.env.NODE_ENV === 'development',
        trackAllInteractions: true
      });
      console.log(`‚úÖ [AI] NPCIntelligenceConnector configur√©`);
      
      this.aiSystemInitialized = true;
      console.log(`üéâ [AI] Syst√®me d'IA compl√®tement initialis√© !`);
      
    } catch (error) {
      console.error(`‚ùå [AI] Erreur initialisation:`, error);
      throw error;
    }
  }

  // ===================================================================
  // üë§ GESTION JOUEUR - COPIE EXACTE DU WORLDROOM
  // ===================================================================

  /**
   * ‚úÖ COPIE EXACTE du code d'enregistrement joueur du WorldRoom (onJoin)
   */
  registerPlayer(playerInfo: PlayerInfo): void {
    if (!this.aiSystemInitialized) {
      console.warn(`‚ö†Ô∏è [AI] Syst√®me IA pas encore initialis√©, enregistrement diff√©r√©`);
      return;
    }

    try {
      this.actionTracker.registerPlayer(
        playerInfo.username,                 // ‚úÖ USERNAME stable et permanent
        playerInfo.username,
        `session_${Date.now()}`,
        { map: playerInfo.currentZone, x: playerInfo.x, y: playerInfo.y },
        playerInfo.level
      );
      console.log(`üìù [AI] Joueur ${playerInfo.username} enregistr√© avec username permanent`);
    } catch (error) {
      console.error(`‚ùå [AI] Erreur enregistrement joueur:`, error);
    }
  }

  /**
   * ‚úÖ COPIE EXACTE du code de d√©senregistrement du WorldRoom (onLeave)
   */
  unregisterPlayer(username: string): void {
    // Le WorldRoom n'avait pas de d√©senregistrement explicite
    // Juste le tracking de SESSION_END qui est g√©r√© par trackPlayerAction
  }

  // ===================================================================
  // üìù TRACKING - COPIE EXACTE DU WORLDROOM
  // ===================================================================

  /**
   * ‚úÖ COPIE EXACTE de trackPlayerActionWithAI() du WorldRoom
   */
  trackPlayerAction(
    username: string,  // ‚úÖ Modifi√© : username au lieu de sessionId
    actionType: ActionType,
    actionData: any = {},
    context?: { location?: { map: string; x: number; y: number } }
  ): void {
    if (!this.aiSystemInitialized) return;
    
    try {
      // ‚úÖ UTILISER USERNAME directement (pas de lookup JWT)
      trackPlayerAction(username, actionType, actionData, context);
      this.aiStats.actionsTracked++;
      
      // Log occasionnel pour debug
      if (this.aiStats.actionsTracked % 50 === 0) {
        console.log(`üìä [AI] ${this.aiStats.actionsTracked} actions track√©es`);
      }
    } catch (error) {
      console.error(`‚ùå [AI] Erreur tracking action:`, error);
    }
  }

  // ===================================================================
  // üß† ANALYSE - COPIE EXACTE DU WORLDROOM  
  // ===================================================================

  /**
   * ‚úÖ COPIE EXACTE de analyzePlayerWithAI() du WorldRoom
   */
  async analyzePlayer(username: string): Promise<CompletePlayerAnalysis | null> {
    if (!this.aiSystemInitialized) {
      console.warn(`‚ö†Ô∏è [AI] Syst√®me non initialis√© pour analyse de ${username}`);
      return null;
    }
    
    try {
      const analysis = await this.intelligenceOrchestrator.analyzePlayer(username);
      if (analysis) {
        this.aiStats.lastAnalysisTime = Date.now();
        console.log(`üß† [AI] Analyse compl√®te de ${username}: confiance ${analysis.analysisConfidence.toFixed(2)}`);
      }
      return analysis;
    } catch (error) {
      console.error(`‚ùå [AI] Erreur analyse joueur ${username}:`, error);
      return null;
    }
  }

  // ===================================================================
  // ü§ñ INTERACTION NPC - COPIE EXACTE DU WORLDROOM
  // ===================================================================

  /**
   * ‚úÖ COPIE EXACTE du code d'interaction NPC intelligent du WorldRoom
   */
  async handleIntelligentNPCInteraction(
    username: string,
    sessionId: string,
    npcId: number,
    playerInfo: PlayerInfo
  ): Promise<AIInteractionResult> {
    if (!this.aiSystemInitialized) {
      return {
        success: false,
        type: "error",
        isAI: false
      };
    }

    try {
      // ‚úÖ COPIE EXACTE du tracking du WorldRoom
      this.trackPlayerAction(
        username,  // ‚úÖ Username au lieu de sessionId
        ActionType.NPC_TALK,
        {
          npcId: npcId,
          playerLevel: playerInfo.level,
          playerGold: playerInfo.gold
        },
        {
          location: { 
            map: playerInfo.currentZone, 
            x: playerInfo.x, 
            y: playerInfo.y 
          }
        }
      );

      // ‚úÖ COPIE EXACTE de l'interaction intelligente du WorldRoom
      const smartResponse = await handleSmartNPCInteraction(
        sessionId,  // ‚úÖ Garder sessionId pour communication client
        npcId,
        'dialogue',
        {
          playerAction: 'interact',
          location: { map: playerInfo.currentZone, x: playerInfo.x, y: playerInfo.y },
          sessionData: { level: playerInfo.level, gold: playerInfo.gold }
        }
      );

      if (smartResponse.success) {
        console.log(`üß† [AI] Interaction intelligente r√©ussie avec NPC ${npcId}`);
        this.aiStats.intelligentInteractions++;
        
        return {
          success: true,
          type: "smart_dialogue",
          message: smartResponse.dialogue.message,
          dialogue: smartResponse.dialogue,
          actions: smartResponse.actions,
          followUpQuestions: smartResponse.followUpQuestions,
          metadata: smartResponse.metadata,
          isAI: true
        };
      } else {
        // ‚úÖ Retourner fallback comme dans WorldRoom
        return {
          success: false,
          type: "fallback_needed",
          isAI: false
        };
      }
      
    } catch (error) {
      console.error(`‚ùå [AI] Erreur interaction intelligente:`, error);
      return {
        success: false,
        type: "error",
        isAI: false
      };
    }
  }

  // ===================================================================
  // üîß ENREGISTREMENT NPC - COPIE EXACTE DU WORLDROOM
  // ===================================================================

  /**
   * ‚úÖ COPIE EXACTE de registerNPCsWithAI() du WorldRoom
   */
  async registerNPCs(allNpcs: any[]): Promise<void> {
    try {
      console.log(`üìã [AI] Enregistrement des NPCs dans le syst√®me d'IA...`);
      
      console.log(`üîç [AI] ${allNpcs.length} NPCs trouv√©s pour enregistrement IA`);
      
      if (allNpcs.length > 0) {
        const results = await this.npcIntelligenceConnector.registerNPCsBulk(allNpcs);
        console.log(`‚úÖ [AI] NPCs enregistr√©s: ${results.registered} r√©ussis, ${results.skipped} ignor√©s`);
        
        if (results.errors.length > 0) {
          console.warn(`‚ö†Ô∏è [AI] Erreurs d'enregistrement:`, results.errors.slice(0, 3)); // Log que les 3 premi√®res
        }
      } else {
        console.log(`‚ÑπÔ∏è [AI] Aucun NPC √† enregistrer pour l'IA`);
      }
      
    } catch (error) {
      console.error(`‚ùå [AI] Erreur enregistrement NPCs:`, error);
    }
  }

  // ===================================================================
  // üìä STATS - COPIE EXACTE DU WORLDROOM
  // ===================================================================

  /**
   * ‚úÖ COPIE EXACTE de getAIStats() du WorldRoom
   */
  getStats(): any {
    const orchestratorStats = this.aiSystemInitialized ? this.intelligenceOrchestrator.getStats() : {};
    const connectorStats = this.npcIntelligenceConnector.getStats();
    
    return {
      initialized: this.aiSystemInitialized,
      localStats: this.aiStats,
      orchestrator: orchestratorStats,
      npcConnector: connectorStats,
      health: this.intelligenceOrchestrator.getHealthStatus()
    };
  }

  // ===================================================================
  // üßπ NETTOYAGE
  // ===================================================================

  cleanup(): void {
    this.aiSystemInitialized = false;
    console.log('üßπ [AINPCManager] Nettoy√©');
  }
}

// ===================================================================
// üè≠ SINGLETON
// ===================================================================

let managerInstance: AINPCManager | null = null;

export function getAINPCManager(): AINPCManager {
  if (!managerInstance) {
    managerInstance = new AINPCManager();
  }
  return managerInstance;
}

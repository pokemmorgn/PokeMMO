import { Client } from "@colyseus/core";
import { FollowerManager } from "../managers/FollowerManager";
import { WorldRoom } from "../rooms/WorldRoom";

export class FollowerHandlers {
  private room: WorldRoom;
  private followerManager: FollowerManager;

  constructor(room: WorldRoom) {
    this.room = room;
    this.followerManager = new FollowerManager(room);
    console.log("üêæ [FollowerHandlers] Initialis√©");
  }

  /**
   * Configure tous les handlers de followers
   */
  setupHandlers(): void {
    console.log("üêæ [FollowerHandlers] Configuration des handlers...");

    // Demande de mise √† jour du follower
    this.room.onMessage("updateFollower", this.handleUpdateFollower.bind(this));
    
    // Demande de suppression du follower
    this.room.onMessage("removeFollower", this.handleRemoveFollower.bind(this));
    
    // ‚úÖ NOUVEAU: Handler pour les transitions de carte
    this.room.onMessage("playerMapTransition", this.handlePlayerMapTransition.bind(this));
    
    // Debug des followers (admin)
    this.room.onMessage("debugFollowers", this.handleDebugFollowers.bind(this));
    
    // Rafra√Æchir tous les followers (admin)
    this.room.onMessage("refreshAllFollowers", this.handleRefreshAllFollowers.bind(this));

    console.log("‚úÖ [FollowerHandlers] Tous les handlers configur√©s");
  }

  /**
   * Met √† jour le follower d'un joueur
   */
  private async handleUpdateFollower(client: Client): Promise<void> {
    try {
      const player = this.room.state.players.get(client.sessionId);
      if (!player) {
        client.send("followerActionResult", {
          success: false,
          message: "Joueur non trouv√©"
        });
        return;
      }

      console.log(`üîÑ [FollowerHandlers] Mise √† jour follower pour ${player.name}`);
      
      await this.followerManager.updatePlayerFollower(client.sessionId);
      
      client.send("followerActionResult", {
        success: true,
        message: "Follower mis √† jour"
      });

    } catch (error) {
      console.error("‚ùå [FollowerHandlers] Erreur updateFollower:", error);
      client.send("followerActionResult", {
        success: false,
        message: "Erreur lors de la mise √† jour du follower"
      });
    }
  }

  /**
   * Supprime le follower d'un joueur
   */
  private handleRemoveFollower(client: Client): void {
    try {
      const player = this.room.state.players.get(client.sessionId);
      if (!player) {
        client.send("followerActionResult", {
          success: false,
          message: "Joueur non trouv√©"
        });
        return;
      }

      console.log(`üóëÔ∏è [FollowerHandlers] Suppression follower pour ${player.name}`);
      
      this.followerManager.removePlayerFollower(client.sessionId);
      
      client.send("followerActionResult", {
        success: true,
        message: "Follower supprim√©"
      });

    } catch (error) {
      console.error("‚ùå [FollowerHandlers] Erreur removeFollower:", error);
      client.send("followerActionResult", {
        success: false,
        message: "Erreur lors de la suppression du follower"
      });
    }
  }

  /**
   * ‚úÖ NOUVEAU: G√®re les transitions de carte
   */
  private handlePlayerMapTransition(client: Client, message: { newX: number, newY: number, mapName?: string }): void {
    try {
      const player = this.room.state.players.get(client.sessionId);
      if (!player) {
        console.warn(`‚ö†Ô∏è [FollowerHandlers] Joueur non trouv√© pour transition: ${client.sessionId}`);
        return;
      }

      console.log(`üó∫Ô∏è [FollowerHandlers] Transition de carte pour ${player.name} vers (${message.newX}, ${message.newY})`);
      
      // Informer le FollowerManager de la transition
      this.followerManager.onPlayerMapTransition(client.sessionId, message.newX, message.newY);
      
      // Optionnel: Confirmer la transition au client
      client.send("followerTransitionResult", {
        success: true,
        message: "Follower t√©l√©port√© apr√®s transition"
      });

    } catch (error) {
      console.error("‚ùå [FollowerHandlers] Erreur playerMapTransition:", error);
      client.send("followerTransitionResult", {
        success: false,
        message: "Erreur lors de la transition du follower"
      });
    }
  }

  /**
   * Debug des followers (admin seulement)
   */
  private handleDebugFollowers(client: Client): void {
    try {
      console.log(`üîç [FollowerHandlers] Debug demand√© par ${client.sessionId}`);
      
      this.followerManager.debugFollowers();
      
      client.send("followerDebugResult", {
        success: true,
        message: "Debug affich√© dans les logs serveur"
      });

    } catch (error) {
      console.error("‚ùå [FollowerHandlers] Erreur debugFollowers:", error);
      client.send("followerDebugResult", {
        success: false,
        message: "Erreur lors du debug"
      });
    }
  }

  /**
   * Rafra√Æchit tous les followers (admin seulement)
   */
  private async handleRefreshAllFollowers(client: Client): Promise<void> {
    try {
      console.log(`üîÑ [FollowerHandlers] Rafra√Æchissement global demand√© par ${client.sessionId}`);
      
      await this.followerManager.refreshAllFollowers();
      
      client.send("followerRefreshResult", {
        success: true,
        message: "Tous les followers ont √©t√© rafra√Æchis"
      });

    } catch (error) {
      console.error("‚ùå [FollowerHandlers] Erreur refreshAllFollowers:", error);
      client.send("followerRefreshResult", {
        success: false,
        message: "Erreur lors du rafra√Æchissement"
      });
    }
  }

  /**
   * M√©thode appel√©e quand l'√©quipe d'un joueur change
   */
  async onTeamChanged(playerId: string): Promise<void> {
    try {
      console.log(`‚öîÔ∏è [FollowerHandlers] √âquipe chang√©e pour ${playerId}, mise √† jour follower`);
      await this.followerManager.updatePlayerFollower(playerId);
    } catch (error) {
      console.error("‚ùå [FollowerHandlers] Erreur onTeamChanged:", error);
    }
  }

  /**
   * M√©thode appel√©e quand un joueur bouge
   */
  onPlayerMove(playerId: string, x: number, y: number, direction: string, isMoving: boolean): void {
    try {
      this.followerManager.updateFollowerPosition(playerId, x, y, direction, isMoving);
    } catch (error) {
      console.error("‚ùå [FollowerHandlers] Erreur onPlayerMove:", error);
    }
  }

  /**
   * ‚úÖ NOUVEAU: M√©thode appel√©e lors d'une transition de carte
   */
  onPlayerMapTransition(playerId: string, newX: number, newY: number): void {
    try {
      console.log(`üó∫Ô∏è [FollowerHandlers] Transition externe pour ${playerId} vers (${newX}, ${newY})`);
      this.followerManager.onPlayerMapTransition(playerId, newX, newY);
    } catch (error) {
      console.error("‚ùå [FollowerHandlers] Erreur onPlayerMapTransition:", error);
    }
  }

  /**
   * Nettoyage
   */
  cleanup(): void {
    console.log("üßπ [FollowerHandlers] Nettoyage...");
    this.followerManager.cleanup();
  }

  /**
   * Getters
   */
  getFollowerManager(): FollowerManager {
    return this.followerManager;
  }
}

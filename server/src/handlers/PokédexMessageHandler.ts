// server/src/handlers/Pok√©dexMessageHandler.ts
import { Room, Client } from "colyseus";
import { pok√©dexService } from '../services/Pok√©dexService';
import { Pok√©dexProgressService } from '../services/Pok√©dexProgressService'; // ‚úÖ CORRIG√â
import { pok√©dexNotificationService } from '../services/Pok√©dexNotificationService';
import { pok√©dexIntegrationService } from '../services/Pok√©dexIntegrationService';

// Cr√©er l'instance du service de progression
const pok√©dexProgressService = Pok√©dxProgressService.getInstance(); // ‚úÖ AJOUT√â

// ===== TYPES DES MESSAGES =====

export interface Pok√©dxGetRequest {
  filters?: {
    seen?: boolean;
    caught?: boolean;
    shiny?: boolean;
    types?: string[];
    regions?: string[];
    nameQuery?: string;
    sortBy?: 'id' | 'name' | 'level' | 'date_seen' | 'date_caught';
    sortOrder?: 'asc' | 'desc';
    limit?: number;
    offset?: number;
  };
}

export interface Pok√©dxEntryRequest {
  pokemonId: number;
}

export interface Pok√©dxMarkSeenRequest {
  pokemonId: number;
  level: number;
  location: string;
  method?: 'wild' | 'trainer' | 'gift' | 'trade' | 'evolution' | 'egg' | 'special';
  weather?: string;
  timeOfDay?: string;
}

export interface Pok√©dxMarkCaughtRequest {
  pokemonId: number;
  level: number;
  location: string;
  method?: 'wild' | 'trainer' | 'gift' | 'trade' | 'evolution' | 'egg' | 'special';
  weather?: string;
  timeOfDay?: string;
  isShiny?: boolean;
  ownedPokemonId: string;
  captureTime?: number;
}

export interface Pok√©dxNotificationRequest {
  notificationId?: string;
  markAllRead?: boolean;
  filters?: {
    unreadOnly?: boolean;
    types?: string[];
    limit?: number;
  };
}

export interface Pok√©dxSettingsRequest {
  enabled?: boolean;
  discoveryNotifications?: boolean;
  captureNotifications?: boolean;
  shinyNotifications?: boolean;
  milestoneNotifications?: boolean;
  streakNotifications?: boolean;
  soundEnabled?: boolean;
  animationsEnabled?: boolean;
}

// ===== HANDLER PRINCIPAL =====

export class Pok√©dxMessageHandler {
  private room: Room;
  
  constructor(room: Room) {
    this.room = room;
    console.log('üîó [Pok√©dxMessageHandler] Initialis√©');
  }
  
  /**
   * Configure tous les handlers de messages Pok√©dx
   */
  public setupHandlers(): void {
    // === CONSULTATION POK√âDX ===
    this.room.onMessage("pokedx:get", this.handleGetPokedx.bind(this));
    this.room.onMessage("pokedx:entry", this.handleGetEntry.bind(this));
    this.room.onMessage("pokedx:stats", this.handleGetStats.bind(this));
    this.room.onMessage("pokedx:progress", this.handleGetProgress.bind(this));
    this.room.onMessage("pokedx:analytics", this.handleGetAnalytics.bind(this));
    
    // === MISE √Ä JOUR POK√âDX ===
    this.room.onMessage("pokedx:mark_seen", this.handleMarkSeen.bind(this));
    this.room.onMessage("pokedx:mark_caught", this.handleMarkCaught.bind(this));
    this.room.onMessage("pokedx:recalculate", this.handleRecalculate.bind(this));
    
    // === ACCOMPLISSEMENTS & STREAKS ===
    this.room.onMessage("pokedx:achievements", this.handleGetAchievements.bind(this));
    this.room.onMessage("pokedx:streaks", this.handleGetStreaks.bind(this));
    
    // === NOTIFICATIONS ===
    this.room.onMessage("pokedx:notifications", this.handleGetNotifications.bind(this));
    this.room.onMessage("pokedx:notification_read", this.handleMarkNotificationRead.bind(this));
    this.room.onMessage("pokedx:notification_delete", this.handleDeleteNotification.bind(this));
    this.room.onMessage("pokedx:settings", this.handleUpdateSettings.bind(this));
    
    // === INT√âGRATION & DEBUG ===
    this.room.onMessage("pokedx:integration_status", this.handleGetIntegrationStatus.bind(this));
    this.room.onMessage("pokedx:force_integration", this.handleForceIntegration.bind(this));
    
    console.log('‚úÖ [Pok√©dxMessageHandler] 15 handlers configur√©s');
  }
  
  // ===== HANDLERS DE CONSULTATION =====
  
  /**
   * R√©cup√®re le Pok√©dx d'un joueur avec filtres
   */
  private async handleGetPokedx(client: Client, message: Pok√©dxGetRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:get', 'Joueur non identifi√©');
        return;
      }
      
      console.log(`üìñ [Pok√©dxHandler] R√©cup√©ration Pok√©dx pour ${playerId}`);
      
      const result = await pok√©dxService.getPlayerPokedx(playerId, message.filters || {});
      
      client.send("pokedx:get:response", {
        success: true,
        data: {
          entries: result.entries,
          pagination: result.pagination,
          summary: result.summary
        }
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur getPokedx:', error);
      this.sendError(client, 'pokedx:get', 'Erreur r√©cup√©ration Pok√©dx');
    }
  }
  
  /**
   * R√©cup√®re une entr√©e sp√©cifique du Pok√©dx
   */
  private async handleGetEntry(client: Client, message: Pok√©dxEntryRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:entry', 'Joueur non identifi√©');
        return;
      }
      
      const result = await pok√©dxService.getPok√©dxEntry(playerId, message.pokemonId); // ‚úÖ CORRIG√â
      
      client.send("pokedx:entry:response", {
        success: true,
        data: result
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur getEntry:', error);
      this.sendError(client, 'pokedx:entry', 'Erreur r√©cup√©ration entr√©e');
    }
  }
  
  /**
   * R√©cup√®re les statistiques globales
   */
  private async handleGetStats(client: Client): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:stats', 'Joueur non identifi√©');
        return;
      }
      
      const progress = await pok√©dxService.getPlayerProgress(playerId);
      
      client.send("pokedx:stats:response", {
        success: true,
        data: progress
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur getStats:', error);
      this.sendError(client, 'pokedx:stats', 'Erreur r√©cup√©ration statistiques');
    }
  }
  
  /**
   * R√©cup√®re la progression d√©taill√©e
   */
  private async handleGetProgress(client: Client): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:progress', 'Joueur non identifi√©');
        return;
      }
      
      const progress = await pok√©dxService.getPlayerProgress(playerId);
      
      client.send("pokedx:progress:response", {
        success: true,
        data: progress
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur getProgress:', error);
      this.sendError(client, 'pokedx:progress', 'Erreur r√©cup√©ration progression');
    }
  }
  
  /**
   * R√©cup√®re les analytics compl√®tes
   */
  private async handleGetAnalytics(client: Client): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:analytics', 'Joueur non identifi√©');
        return;
      }
      
      const analytics = await pok√©dxProgressService.generatePok√©dxAnalytics(playerId);
      
      client.send("pokedx:analytics:response", {
        success: true,
        data: analytics
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur getAnalytics:', error);
      this.sendError(client, 'pokedx:analytics', 'Erreur r√©cup√©ration analytics');
    }
  }
  
  // ===== HANDLERS DE MISE √Ä JOUR =====
  
  /**
   * Marque un Pok√©mon comme vu
   */
  private async handleMarkSeen(client: Client, message: Pok√©dxMarkSeenRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:mark_seen', 'Joueur non identifi√©');
        return;
      }
      
      console.log(`üëÅÔ∏è [Pok√©dxHandler] Marquer comme vu: ${playerId} -> #${message.pokemonId}`);
      
      const result = await pok√©dxIntegrationService.handlePokemonEncounter({
        playerId,
        pokemonId: message.pokemonId,
        level: message.level,
        location: message.location,
        method: message.method || 'wild',
        weather: message.weather,
        timeOfDay: message.timeOfDay
      });
      
      client.send("pokedx:mark_seen:response", {
        success: result.success,
        data: {
          isNewDiscovery: result.isNewDiscovery,
          notifications: result.notifications
        },
        error: result.error
      });
      
      // Broadcaster les notifications aux autres clients si n√©cessaire
      if (result.isNewDiscovery && result.notifications.length > 0) {
        this.broadcastToPlayer(playerId, "pokedx:discovery", {
          pokemonId: message.pokemonId,
          notifications: result.notifications
        });
      }
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur markSeen:', error);
      this.sendError(client, 'pokedx:mark_seen', 'Erreur marquage vu');
    }
  }
  
  /**
   * Marque un Pok√©mon comme captur√©
   */
  private async handleMarkCaught(client: Client, message: Pok√©dxMarkCaughtRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:mark_caught', 'Joueur non identifi√©');
        return;
      }
      
      console.log(`üéØ [Pok√©dxHandler] Marquer comme captur√©: ${playerId} -> #${message.pokemonId}`);
      
      const result = await pok√©dxIntegrationService.handlePokemonCapture({
        playerId,
        pokemonId: message.pokemonId,
        level: message.level,
        location: message.location,
        method: message.method || 'wild',
        weather: message.weather,
        timeOfDay: message.timeOfDay,
        ownedPokemonId: message.ownedPokemonId,
        isShiny: message.isShiny || false,
        captureTime: message.captureTime
      });
      
      client.send("pokedx:mark_caught:response", {
        success: result.success,
        data: {
          isNewCapture: result.isNewCapture,
          isNewBestSpecimen: result.isNewBestSpecimen,
          notifications: result.notifications
        },
        error: result.error
      });
      
      // Broadcaster les notifications importantes
      if (result.isNewCapture || result.isNewBestSpecimen) {
        this.broadcastToPlayer(playerId, "pokedx:capture", {
          pokemonId: message.pokemonId,
          isNewCapture: result.isNewCapture,
          isNewBestSpecimen: result.isNewBestSpecimen,
          isShiny: message.isShiny,
          notifications: result.notifications
        });
      }
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur markCaught:', error);
      this.sendError(client, 'pokedx:mark_caught', 'Erreur marquage captur√©');
    }
  }
  
  /**
   * Force un recalcul des statistiques
   */
  private async handleRecalculate(client: Client): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:recalculate', 'Joueur non identifi√©');
        return;
      }
      
      console.log(`üîÑ [Pok√©dxHandler] Recalcul stats pour ${playerId}`);
      
      const stats = await pok√©dxService.recalculatePlayerStats(playerId);
      
      client.send("pokedx:recalculate:response", {
        success: true,
        data: {
          totalSeen: stats.totalSeen,
          totalCaught: stats.totalCaught,
          seenPercentage: stats.seenPercentage,
          caughtPercentage: stats.caughtPercentage
        }
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur recalculate:', error);
      this.sendError(client, 'pokedx:recalculate', 'Erreur recalcul');
    }
  }
  
  // ===== HANDLERS ACCOMPLISSEMENTS & STREAKS =====
  
  /**
   * R√©cup√®re les accomplissements
   */
  private async handleGetAchievements(client: Client): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:achievements', 'Joueur non identifi√©');
        return;
      }
      
      // TODO: ACHIEVEMENT SYSTEM GLOBAL - Remplacer par service unifi√©
      const achievements = {
        unlocked: [] as any[], // ‚úÖ CORRIG√â
        inProgress: [] as any[], // ‚úÖ CORRIG√â
        locked: [] as any[], // ‚úÖ CORRIG√â
        totalPoints: 0
      };
      
      client.send("pokedx:achievements:response", {
        success: true,
        data: achievements
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur getAchievements:', error);
      this.sendError(client, 'pokedx:achievements', 'Erreur r√©cup√©ration accomplissements');
    }
  }
  
  /**
   * R√©cup√®re les streaks actuelles
   */
  private async handleGetStreaks(client: Client): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:streaks', 'Joueur non identifi√©');
        return;
      }
      
      const streaks = await pok√©dxProgressService.getCurrentStreaks(playerId);
      
      client.send("pokedx:streaks:response", {
        success: true,
        data: streaks
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur getStreaks:', error);
      this.sendError(client, 'pokedx:streaks', 'Erreur r√©cup√©ration streaks');
    }
  }
  
  // ===== HANDLERS NOTIFICATIONS =====
  
  /**
   * R√©cup√®re les notifications
   */
  private async handleGetNotifications(client: Client, message: Pok√©dxNotificationRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:notifications', 'Joueur non identifi√©');
        return;
      }
      
      const notifications = pok√©dxNotificationService.getPlayerNotifications(
        playerId,
        message.filters || {}
      );
      
      const stats = pok√©dxNotificationService.getNotificationStats(playerId);
      
      client.send("pokedx:notifications:response", {
        success: true,
        data: {
          notifications,
          stats
        }
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur getNotifications:', error);
      this.sendError(client, 'pokedx:notifications', 'Erreur r√©cup√©ration notifications');
    }
  }
  
  /**
   * Marque une notification comme lue
   */
  private async handleMarkNotificationRead(client: Client, message: Pok√©dxNotificationRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:notification_read', 'Joueur non identifi√©');
        return;
      }
      
      let result;
      if (message.markAllRead) {
        result = pok√©dxNotificationService.markAllAsRead(playerId);
      } else if (message.notificationId) {
        result = pok√©dxNotificationService.markAsRead(playerId, message.notificationId);
      } else {
        this.sendError(client, 'pokedx:notification_read', 'ID notification requis');
        return;
      }
      
      client.send("pokedx:notification_read:response", {
        success: true,
        data: { marked: result }
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur markNotificationRead:', error);
      this.sendError(client, 'pokedx:notification_read', 'Erreur marquage notification');
    }
  }
  
  /**
   * Supprime une notification
   */
  private async handleDeleteNotification(client: Client, message: Pok√©dxNotificationRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId || !message.notificationId) {
        this.sendError(client, 'pokedx:notification_delete', 'Param√®tres invalides');
        return;
      }
      
      const result = pok√©dxNotificationService.removeNotification(playerId, message.notificationId);
      
      client.send("pokedx:notification_delete:response", {
        success: result,
        data: { deleted: result }
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur deleteNotification:', error);
      this.sendError(client, 'pokedx:notification_delete', 'Erreur suppression notification');
    }
  }
  
  /**
   * Met √† jour les param√®tres de notification
   */
  private async handleUpdateSettings(client: Client, message: Pok√©dxSettingsRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:settings', 'Joueur non identifi√©');
        return;
      }
      
      pok√©dxNotificationService.updatePlayerSettings(playerId, message);
      const settings = pok√©dxNotificationService.getPlayerSettings(playerId);
      
      client.send("pokedx:settings:response", {
        success: true,
        data: settings
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur updateSettings:', error);
      this.sendError(client, 'pokedx:settings', 'Erreur mise √† jour param√®tres');
    }
  }
  
  // ===== HANDLERS INT√âGRATION & DEBUG =====
  
  /**
   * R√©cup√®re le statut d'int√©gration
   */
  private async handleGetIntegrationStatus(client: Client): Promise<void> {
    try {
      const stats = pok√©dxIntegrationService.getIntegrationStats();
      
      client.send("pokedx:integration_status:response", {
        success: true,
        data: stats
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur getIntegrationStatus:', error);
      this.sendError(client, 'pokedx:integration_status', 'Erreur statut int√©gration');
    }
  }
  
  /**
   * Force l'int√©gration d'un joueur
   */
  private async handleForceIntegration(client: Client): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:force_integration', 'Joueur non identifi√©');
        return;
      }
      
      // TODO: Impl√©menter force integration via OwnedPokemon.bulkIntegrateToPok√©dx
      
      client.send("pokedx:force_integration:response", {
        success: true,
        data: { message: 'Int√©gration forc√©e d√©marr√©e' }
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur forceIntegration:', error);
      this.sendError(client, 'pokedx:force_integration', 'Erreur int√©gration forc√©e');
    }
  }
  
  // ===== UTILITAIRES =====
  
  /**
   * R√©cup√®re l'ID du joueur depuis le client
   */
  private getPlayerId(client: Client): string | null {
    // Adapter selon votre syst√®me d'authentification
    return client.sessionId || (client as any).auth?.playerId || null;
  }
  
  /**
   * Envoie une erreur format√©e au client
   */
  private sendError(client: Client, messageType: string, error: string): void {
    client.send(`${messageType}:response`, {
      success: false,
      error: error
    });
  }
  
  /**
   * Broadcaster un message √† tous les clients d'un joueur
   */
  private broadcastToPlayer(playerId: string, messageType: string, data: any): void {
    this.room.clients.forEach(client => {
      if (this.getPlayerId(client) === playerId) {
        client.send(messageType, data);
      }
    });
  }
  
  /**
   * Broadcaster un message √† tous les clients de la room
   */
  private broadcastToAll(messageType: string, data: any): void {
    this.room.broadcast(messageType, data);
  }
  
  /**
   * Nettoie les ressources lors de la d√©connexion
   */
  public cleanup(): void {
    console.log('üßπ [Pok√©dxMessageHandler] Nettoyage des handlers');
    // Nettoyage si n√©cessaire
  }
}

export default Pok√©dxMessageHandler;

// server/src/handlers/Pok√©dexMessageHandler.ts
import { Room, Client } from "colyseus";
import { pok√©dexService } from '../services/Pok√©dexService';
import { Pok√©dexProgressService } from '../services/Pok√©dexProgressService'; // Fixed import
import { pok√©dexNotificationService } from '../services/Pok√©dexNotificationService';
import { pok√©dexIntegrationService } from '../services/Pok√©dexIntegrationService';

// Create the instance
const pok√©dexProgressService = Pok√©dexProgressService.getInstance();

// ===== TYPES DES MESSAGES =====

export interface Pok√©dexGetRequest {
  filters?: {
    seen?: boolean;
    caught?: boolean;
    shiny?: boolean;
    types?: string[];
    regions?: string[];
    nameQuery?: string;
    sortBy?: 'id' | 'name' | 'level' | 'date_seen' | 'date_caught';
    sortOrder?: 'asc' | 'desc';
    limit?: number;
    offset?: number;
  };
}

export interface Pok√©dexEntryRequest {
  pokemonId: number;
}

export interface Pok√©dexMarkSeenRequest {
  pokemonId: number;
  level: number;
  location: string;
  method?: 'wild' | 'trainer' | 'gift' | 'trade' | 'evolution' | 'egg' | 'special';
  weather?: string;
  timeOfDay?: string;
}

export interface Pok√©dexMarkCaughtRequest {
  pokemonId: number;
  level: number;
  location: string;
  method?: 'wild' | 'trainer' | 'gift' | 'trade' | 'evolution' | 'egg' | 'special';
  weather?: string;
  timeOfDay?: string;
  isShiny?: boolean;
  ownedPokemonId: string;
  captureTime?: number;
}

export interface Pok√©dexNotificationRequest {
  notificationId?: string;
  markAllRead?: boolean;
  filters?: {
    unreadOnly?: boolean;
    types?: string[];
    limit?: number;
  };
}

export interface Pok√©dexSettingsRequest {
  enabled?: boolean;
  discoveryNotifications?: boolean;
  captureNotifications?: boolean;
  shinyNotifications?: boolean;
  milestoneNotifications?: boolean;
  streakNotifications?: boolean;
  soundEnabled?: boolean;
  animationsEnabled?: boolean;
}

// ===== HANDLER PRINCIPAL =====

export class Pok√©dexMessageHandler {
  private room: Room;
  
  constructor(room: Room) {
    this.room = room;
    this.registerHandlers();
    console.log('üîó [Pok√©dexMessageHandler] Handlers Pok√©dx enregistr√©s');
  }
  
  /**
   * Enregistre tous les handlers de messages Pok√©dx
   */
  private registerHandlers(): void {
    // === CONSULTATION POK√âDX ===
    this.room.onMessage("pokedex:get", this.handleGetPokedex.bind(this));
    this.room.onMessage("pokedex:entry", this.handleGetEntry.bind(this));
    this.room.onMessage("pokedex:stats", this.handleGetStats.bind(this));
    this.room.onMessage("pokedex:progress", this.handleGetProgress.bind(this));
    this.room.onMessage("pokedex:analytics", this.handleGetAnalytics.bind(this));
    
    // === MISE √Ä JOUR POK√âDX ===
    this.room.onMessage("pokedex:mark_seen", this.handleMarkSeen.bind(this));
    this.room.onMessage("pokedex:mark_caught", this.handleMarkCaught.bind(this));
    this.room.onMessage("pokedex:recalculate", this.handleRecalculate.bind(this));
    
    // === ACCOMPLISSEMENTS & STREAKS ===
    this.room.onMessage("pokedex:achievements", this.handleGetAchievements.bind(this));
    this.room.onMessage("pokedex:streaks", this.handleGetStreaks.bind(this));
    
    // === NOTIFICATIONS ===
    this.room.onMessage("pokedex:notifications", this.handleGetNotifications.bind(this));
    this.room.onMessage("pokedex:notification_read", this.handleMarkNotificationRead.bind(this));
    this.room.onMessage("pokedex:notification_delete", this.handleDeleteNotification.bind(this));
    this.room.onMessage("pokedex:settings", this.handleUpdateSettings.bind(this));
    
    // === INT√âGRATION & DEBUG ===
    this.room.onMessage("pokedex:integration_status", this.handleGetIntegrationStatus.bind(this));
    this.room.onMessage("pokedex:force_integration", this.handleForceIntegration.bind(this));
    
    console.log('‚úÖ [Pok√©dexMessageHandler] 15 handlers enregistr√©s');
  }
  
  // ===== HANDLERS DE CONSULTATION =====
  
  /**
   * R√©cup√®re le Pok√©dx d'un joueur avec filtres
   */
  private async handleGetPokedex(client: Client, message: Pok√©dexGetRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedex:get', 'Joueur non identifi√©');
        return;
      }
      
      console.log(`üìñ [Pok√©dexHandler] R√©cup√©ration Pok√©dx pour ${playerId}`);
      
      const result = await pok√©dexService.getPlayerPokedex(playerId, message.filters || {});
      
      client.send("pokedex:get:response", {
        success: true,
        data: {
          entries: result.entries,
          pagination: result.pagination,
          summary: result.summary
        }
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dexHandler] Erreur getPokedex:', error);
      this.sendError(client, 'pokedex:get', 'Erreur r√©cup√©ration Pok√©dx');
    }
  }
  
  /**
   * R√©cup√®re une entr√©e sp√©cifique du Pok√©dx
   */
  private async handleGetEntry(client: Client, message: Pok√©dexEntryRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:entry', 'Joueur non identifi√©');
        return;
      }
      
      // Fixed method name
      const result = await pok√©dexService.getPok√©dxEntry(playerId, message.pokemonId);
      
      client.send("pokedex:entry:response", {
        success: true,
        data: result
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dexHandler] Erreur getEntry:', error);
      this.sendError(client, 'pokedex:entry', 'Erreur r√©cup√©ration entr√©e');
    }
  }
  
  /**
   * R√©cup√®re les statistiques globales
   */
  private async handleGetStats(client: Client): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedex:stats', 'Joueur non identifi√©');
        return;
      }
      
      const progress = await pok√©dexService.getPlayerProgress(playerId);
      
      client.send("pokedex:stats:response", {
        success: true,
        data: progress
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur getStats:', error);
      this.sendError(client, 'pokedex:stats', 'Erreur r√©cup√©ration statistiques');
    }
  }
  
  /**
   * R√©cup√®re la progression d√©taill√©e
   */
  private async handleGetProgress(client: Client): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:progress', 'Joueur non identifi√©');
        return;
      }
      
      const progress = await pok√©dexService.getPlayerProgress(playerId);
      
      client.send("pokedex:progress:response", {
        success: true,
        data: progress
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dexHandler] Erreur getProgress:', error);
      this.sendError(client, 'pokedex:progress', 'Erreur r√©cup√©ration progression');
    }
  }
  
  /**
   * R√©cup√®re les analytics compl√®tes
   */
  private async handleGetAnalytics(client: Client): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedex:analytics', 'Joueur non identifi√©');
        return;
      }
      
      const analytics = await pok√©dexProgressService.generatePok√©dexAnalytics(playerId);
      
      client.send("pokedex:analytics:response", {
        success: true,
        data: analytics
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dexHandler] Erreur getAnalytics:', error);
      this.sendError(client, 'pokedex:analytics', 'Erreur r√©cup√©ration analytics');
    }
  }
  
  // ===== HANDLERS DE MISE √Ä JOUR =====
  
  /**
   * Marque un Pok√©mon comme vu
   */
  private async handleMarkSeen(client: Client, message: Pok√©dexMarkSeenRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:mark_seen', 'Joueur non identifi√©');
        return;
      }
      
      console.log(`üëÅÔ∏è [Pok√©dexHandler] Marquer comme vu: ${playerId} -> #${message.pokemonId}`);
      
      const result = await pok√©dexIntegrationService.handlePokemonEncounter({
        playerId,
        pokemonId: message.pokemonId,
        level: message.level,
        location: message.location,
        method: message.method || 'wild',
        weather: message.weather,
        timeOfDay: message.timeOfDay
      });
      
      client.send("pokedex:mark_seen:response", {
        success: result.success,
        data: {
          isNewDiscovery: result.isNewDiscovery,
          notifications: result.notifications
        },
        error: result.error
      });
      
      // Broadcaster les notifications aux autres clients si n√©cessaire
      if (result.isNewDiscovery && result.notifications.length > 0) {
        this.broadcastToPlayer(playerId, "pokedex:discovery", {
          pokemonId: message.pokemonId,
          notifications: result.notifications
        });
      }
      
    } catch (error) {
      console.error('‚ùå [Pok√©dexHandler] Erreur markSeen:', error);
      this.sendError(client, 'pokedex:mark_seen', 'Erreur marquage vu');
    }
  }
  
  /**
   * Marque un Pok√©mon comme captur√©
   */
  private async handleMarkCaught(client: Client, message: Pok√©dexMarkCaughtRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:mark_caught', 'Joueur non identifi√©');
        return;
      }
      
      console.log(`üéØ [Pok√©dexHandler] Marquer comme captur√©: ${playerId} -> #${message.pokemonId}`);
      
      const result = await pok√©dexIntegrationService.handlePokemonCapture({
        playerId,
        pokemonId: message.pokemonId,
        level: message.level,
        location: message.location,
        method: message.method || 'wild',
        weather: message.weather,
        timeOfDay: message.timeOfDay,
        ownedPokemonId: message.ownedPokemonId,
        isShiny: message.isShiny || false,
        captureTime: message.captureTime
      });
      
      client.send("pokedex:mark_caught:response", {
        success: result.success,
        data: {
          isNewCapture: result.isNewCapture,
          isNewBestSpecimen: result.isNewBestSpecimen,
          notifications: result.notifications
        },
        error: result.error
      });
      
      // Broadcaster les notifications importantes
      if (result.isNewCapture || result.isNewBestSpecimen) {
        this.broadcastToPlayer(playerId, "pokedex:capture", {
          pokemonId: message.pokemonId,
          isNewCapture: result.isNewCapture,
          isNewBestSpecimen: result.isNewBestSpecimen,
          isShiny: message.isShiny,
          notifications: result.notifications
        });
      }
      
    } catch (error) {
      console.error('‚ùå [Pok√©dexHandler] Erreur markCaught:', error);
      this.sendError(client, 'pokedex:mark_caught', 'Erreur marquage captur√©');
    }
  }
  
  /**
   * Force un recalcul des statistiques
   */
  private async handleRecalculate(client: Client): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:recalculate', 'Joueur non identifi√©');
        return;
      }
      
      console.log(`üîÑ [Pok√©dexHandler] Recalcul stats pour ${playerId}`);
      
      const stats = await pok√©dexService.recalculatePlayerStats(playerId);
      
      client.send("pokedex:recalculate:response", {
        success: true,
        data: {
          totalSeen: stats.totalSeen,
          totalCaught: stats.totalCaught,
          seenPercentage: stats.seenPercentage,
          caughtPercentage: stats.caughtPercentage
        }
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dexHandler] Erreur recalculate:', error);
      this.sendError(client, 'pokedx:recalculate', 'Erreur recalcul');
    }
  }
  
  // ===== HANDLERS ACCOMPLISSEMENTS & STREAKS =====
  
  /**
   * R√©cup√®re les accomplissements
   */
  private async handleGetAchievements(client: Client): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:achievements', 'Joueur non identifi√©');
        return;
      }
      
      // TODO: ACHIEVEMENT SYSTEM GLOBAL - Remplacer par service unifi√©
      // Fixed: Added proper type annotations
      const achievements: {
        unlocked: any[];
        inProgress: any[];
        locked: any[];
        totalPoints: number;
      } = {
        unlocked: [],
        inProgress: [],
        locked: [],
        totalPoints: 0
      };
      
      client.send("pokedex:achievements:response", {
        success: true,
        data: achievements
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dexHandler] Erreur getAchievements:', error);
      this.sendError(client, 'pokedx:achievements', 'Erreur r√©cup√©ration accomplissements');
    }
  }
  
  /**
   * R√©cup√®re les streaks actuelles
   */
  private async handleGetStreaks(client: Client): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:streaks', 'Joueur non identifi√©');
        return;
      }
      
      const streaks = await pok√©dxProgressService.getCurrentStreaks(playerId);
      
      client.send("pokedex:streaks:response", {
        success: true,
        data: streaks
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dexHandler] Erreur getStreaks:', error);
      this.sendError(client, 'pokedx:streaks', 'Erreur r√©cup√©ration streaks');
    }
  }
  
  // ===== HANDLERS NOTIFICATIONS =====
  
  /**
   * R√©cup√®re les notifications
   */
  private async handleGetNotifications(client: Client, message: Pok√©dexNotificationRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:notifications', 'Joueur non identifi√©');
        return;
      }
      
      const notifications = pok√©dexNotificationService.getPlayerNotifications(
        playerId,
        message.filters || {}
      );
      
      const stats = pok√©dexNotificationService.getNotificationStats(playerId);
      
      client.send("pokedx:notifications:response", {
        success: true,
        data: {
          notifications,
          stats
        }
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dexHandler] Erreur getNotifications:', error);
      this.sendError(client, 'pokedx:notifications', 'Erreur r√©cup√©ration notifications');
    }
  }
  
  /**
   * Marque une notification comme lue
   */
  private async handleMarkNotificationRead(client: Client, message: Pok√©dexNotificationRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:notification_read', 'Joueur non identifi√©');
        return;
      }
      
      let result;
      if (message.markAllRead) {
        result = pok√©dexNotificationService.markAllAsRead(playerId);
      } else if (message.notificationId) {
        result = pok√©dexNotificationService.markAsRead(playerId, message.notificationId);
      } else {
        this.sendError(client, 'pokedx:notification_read', 'ID notification requis');
        return;
      }
      
      client.send("pokedx:notification_read:response", {
        success: true,
        data: { marked: result }
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dexHandler] Erreur markNotificationRead:', error);
      this.sendError(client, 'pokedx:notification_read', 'Erreur marquage notification');
    }
  }
  
  /**
   * Supprime une notification
   */
  private async handleDeleteNotification(client: Client, message: Pok√©dexNotificationRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId || !message.notificationId) {
        this.sendError(client, 'pokedx:notification_delete', 'Param√®tres invalides');
        return;
      }
      
      const result = pok√©dexNotificationService.removeNotification(playerId, message.notificationId);
      
      client.send("pokedx:notification_delete:response", {
        success: result,
        data: { deleted: result }
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dexHandler] Erreur deleteNotification:', error);
      this.sendError(client, 'pokedx:notification_delete', 'Erreur suppression notification');
    }
  }
  
  /**
   * Met √† jour les param√®tres de notification
   */
  private async handleUpdateSettings(client: Client, message: Pok√©dexSettingsRequest): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:settings', 'Joueur non identifi√©');
        return;
      }
      
      pok√©dexNotificationService.updatePlayerSettings(playerId, message);
      const settings = pok√©dexNotificationService.getPlayerSettings(playerId);
      
      client.send("pokedx:settings:response", {
        success: true,
        data: settings
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dexHandler] Erreur updateSettings:', error);
      this.sendError(client, 'pokedx:settings', 'Erreur mise √† jour param√®tres');
    }
  }
  
  // ===== HANDLERS INT√âGRATION & DEBUG =====
  
  /**
   * R√©cup√®re le statut d'int√©gration
   */
  private async handleGetIntegrationStatus(client: Client): Promise<void> {
    try {
      const stats = pok√©dexIntegrationService.getIntegrationStats();
      
      client.send("pokedx:integration_status:response", {
        success: true,
        data: stats
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dexHandler] Erreur getIntegrationStatus:', error);
      this.sendError(client, 'pokedx:integration_status', 'Erreur statut int√©gration');
    }
  }
  
  /**
   * Force l'int√©gration d'un joueur
   */
  private async handleForceIntegration(client: Client): Promise<void> {
    try {
      const playerId = this.getPlayerId(client);
      if (!playerId) {
        this.sendError(client, 'pokedx:force_integration', 'Joueur non identifi√©');
        return;
      }
      
      // TODO: Impl√©menter force integration via OwnedPokemon.bulkIntegrateToPok√©dx
      
      client.send("pokedx:force_integration:response", {
        success: true,
        data: { message: 'Int√©gration forc√©e d√©marr√©e' }
      });
      
    } catch (error) {
      console.error('‚ùå [Pok√©dxHandler] Erreur forceIntegration:', error);
      this.sendError(client, 'pokedx:force_integration', 'Erreur int√©gration forc√©e');
    }
  }
  
  // ===== UTILITAIRES =====
  
  /**
   * R√©cup√®re l'ID du joueur depuis le client
   */
  private getPlayerId(client: Client): string | null {
    // Adapter selon votre syst√®me d'authentification
    return client.sessionId || client.auth?.playerId || null;
  }
  
  /**
   * Envoie une erreur format√©e au client
   */
  private sendError(client: Client, messageType: string, error: string): void {
    client.send(`${messageType}:response`, {
      success: false,
      error: error
    });
  }
  
  /**
   * Broadcaster un message √† tous les clients d'un joueur
   */
  private broadcastToPlayer(playerId: string, messageType: string, data: any): void {
    this.room.clients.forEach(client => {
      if (this.getPlayerId(client) === playerId) {
        client.send(messageType, data);
      }
    });
  }
  
  /**
   * Broadcaster un message √† tous les clients de la room
   */
  private broadcastToAll(messageType: string, data: any): void {
    this.room.broadcast(messageType, data);
  }
  
  /**
   * Nettoie les ressources lors de la d√©connexion
   */
  public cleanup(): void {
    console.log('üßπ [Pok√©dexMessageHandler] Nettoyage des handlers');
    // Nettoyage si n√©cessaire
  }
}

// ===== EXPORT & UTILISATION =====
export default Pok√©dexMessageHandler;

// ===== GUIDE D'INT√âGRATION DANS UNE ROOM =====
//
// Dans votre Room Colyseus (ex: GameRoom.ts) :
//
// import Pok√©dxMessageHandler from './handlers/Pok√©dxMessageHandler';
//
// export class GameRoom extends Room {
//   private pok√©dxHandler: Pok√©dxMessageHandler;
//
//   onCreate(options: any) {
//     // Initialiser le handler Pok√©dx
//     this.pok√©dxHandler = new Pok√©dxMessageHandler(this);
//   }
//
//   onDispose() {
//     // Nettoyer le handler
//     this.pok√©dxHandler?.cleanup();
//   }
// }
//
// ===== UTILISATION C√îT√â CLIENT (Phaser) =====
//
// // R√©cup√©rer le Pok√©dx
// room.send("pokedx:get", { 
//   filters: { caught: true, types: ["fire"] } 
// });
//
// // √âcouter la r√©ponse
// room.onMessage("pokedx:get:response", (message) => {
//   if (message.success) {
//     console.log("Pok√©dx re√ßu:", message.data);
//   }
// });
//
// // Marquer comme vu lors d'une rencontre
// room.send("pokedx:mark_seen", {
//   pokemonId: 25,
//   level: 5,
//   location: "Route 1",
//   method: "wild"
// });
//
// // √âcouter les notifications en temps r√©el
// room.onMessage("pokedx:discovery", (data) => {
//   showDiscoveryNotification(data.pokemonId, data.notifications);
// });

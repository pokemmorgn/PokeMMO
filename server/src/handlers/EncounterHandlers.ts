// server/src/handlers/EncounterHandlers.ts - VERSION S√âCURIS√âE AVEC CONFIG
import { Client } from "@colyseus/core";
import { WorldRoom } from "../rooms/WorldRoom";
import { ServerEncounterManager } from "../managers/EncounterManager";
import { getServerConfig } from '../config/serverConfig';

export class EncounterHandlers {
  private room: WorldRoom;
  private encounterManager: ServerEncounterManager;

  constructor(room: WorldRoom) {
    this.room = room;
    this.encounterManager = new ServerEncounterManager();
    
    // ‚úÖ NETTOYAGE P√âRIODIQUE DES COOLDOWNS (intervalle bas√© sur config)
    const config = getServerConfig().encounterSystem;
    room.clock.setInterval(() => {
      this.encounterManager.cleanupCooldowns();
    }, config.playerCooldownMs * 100); // Nettoyer toutes les 100x le cooldown
    
    console.log(`‚úÖ [EncounterHandlers] Initialis√© avec config:`);
    console.log(`   üîí Server-side only: ${config.serverSideOnly}`);
    console.log(`   ‚è±Ô∏è Cooldown: ${config.playerCooldownMs}ms`);
    console.log(`   üìä Max encounters/min: ${config.maxEncountersPerMinute}`);
  }

  // ‚úÖ CONFIGURATION DES HANDLERS
  setupHandlers(): void {
    console.log(`üì® [EncounterHandlers] Configuration des handlers...`);

    // ‚úÖ HANDLER PRINCIPAL: D√©clenchement d'encounter depuis le client
    this.room.onMessage("triggerEncounter", async (client, data: {
      x: number;
      y: number;
      zoneId: string;
      method: 'grass' | 'fishing';
      encounterRate?: number;
      forced?: boolean;
      fromNotification?: boolean;
      fromServerCheck?: boolean; // ‚úÖ NOUVEAU: Flag de s√©curit√©
      timestamp?: number;
    }) => {
      await this.handleTriggerEncounter(client, data);
    });

    // ‚úÖ HANDLER VALIDATION: V√©rification d'encounter (ancien syst√®me)
    this.room.onMessage("checkEncounter", async (client, data: {
      zone: string;
      method: 'grass' | 'fishing';
      x: number;
      y: number;
      zoneId?: string;
    }) => {
      // Rediriger vers le nouveau handler
      await this.handleTriggerEncounter(client, {
        x: data.x,
        y: data.y,
        zoneId: data.zoneId || `${data.zone}_default`,
        method: data.method,
        encounterRate: 0.1
      });
    });

    // ‚úÖ HANDLERS DEBUG ET D√âVELOPPEMENT
    this.room.onMessage("debugEncounters", (client, data: { zone: string }) => {
      this.handleDebugEncounters(client, data.zone);
    });

    this.room.onMessage("forceEncounter", async (client, data: {
      zone: string;
      zoneId?: string;
      method?: 'grass' | 'fishing';
    }) => {
      await this.handleForceEncounter(client, data);
    });

    // ‚úÖ HANDLER INFO POSITION
    this.room.onMessage("getEncounterInfo", (client, data: {
      x: number;
      y: number;
      zone: string;
    }) => {
      this.handleGetEncounterInfo(client, data);
    });

    console.log(`‚úÖ [EncounterHandlers] Tous les handlers configur√©s`);
  }

  // ‚úÖ HANDLER PRINCIPAL : D√âCLENCHEMENT D'ENCOUNTER AVEC S√âCURIT√â
  public async handleTriggerEncounter(client: Client, data: {
    x: number;
    y: number;
    zoneId: string;
    method: 'grass' | 'fishing';
    encounterRate?: number;
    forced?: boolean;
    fromNotification?: boolean;
    fromServerCheck?: boolean; // ‚úÖ NOUVEAU: Flag de s√©curit√©
    timestamp?: number;
    zone?: string; 
  }): Promise<void> {
    const player = this.room.state.players.get(client.sessionId);
    if (!player) {
      console.warn(`‚ö†Ô∏è [EncounterHandlers] Joueur ${client.sessionId} non trouv√©`);
      return;
    }

    console.log(`üé≤ [EncounterHandlers] === TRIGGER ENCOUNTER ===`);
    
    // ‚úÖ S√âCURIT√â: V√©rifier si le syst√®me est configur√© pour √™tre server-side only
    const encounterConfig = getServerConfig().encounterSystem;
    if (encounterConfig.serverSideOnly && !data.fromServerCheck) {
      console.warn(`üö´ [EncounterHandlers] Tentative client non autoris√©e de ${client.sessionId}`);
      
      client.send("encounterError", {
        success: false,
        message: "Les rencontres sont g√©r√©es automatiquement par le serveur",
        reason: "client_trigger_not_allowed",
        serverSideOnly: true
      });
      return;
    }

    const zoneName = data.zone || player.currentZone || "unknown";
    console.log(`üë§ Joueur: ${player.name}`);
    console.log(`üìç Position: (${data.x}, ${data.y})`);
    console.log(`üéØ Zone ID: ${data.zoneId}`);
    console.log(`üåø M√©thode: ${data.method}`);
    console.log(`üîß Forc√©: ${data.forced || false}`);
    console.log(`üîí Server check: ${data.fromServerCheck || false}`);

    try {
      // ‚úÖ OBTENIR LES CONDITIONS ACTUELLES
      const conditions = this.room.getCurrentTimeInfo();
      const timeOfDay = conditions.isDayTime ? 'day' : 'night';
      const weather = conditions.weather === 'rain' ? 'rain' : 'clear';

      console.log(`‚è∞ Conditions: ${timeOfDay}, ${weather}`);

      // ‚úÖ VALIDATION C√îT√â SERVEUR
      const wildPokemon = await this.encounterManager.validateAndGenerateEncounter(
        client.sessionId,
        player.currentZone,
        data.x,
        data.y,
        timeOfDay as 'day' | 'night',
        weather as 'clear' | 'rain',
        data.zoneId,
        data.method
      );

      if (wildPokemon) {
        console.log(`‚öîÔ∏è [EncounterHandlers] Rencontre g√©n√©r√©e !`);
        console.log(`üêæ Pok√©mon: ${wildPokemon.pokemonId} niveau ${wildPokemon.level}`);
        console.log(`‚ú® Sp√©cial: Shiny=${wildPokemon.shiny}, Nature=${wildPokemon.nature}`);
        
        // ‚úÖ D√âMARRER LE COMBAT AUTOMATIQUEMENT
        await this.startWildBattleImmediate(client, wildPokemon, data);

      } else {
        console.log(`‚ùå [EncounterHandlers] Aucune rencontre pour ${player.name}`);
        
        // ‚úÖ INFORMER LE CLIENT QU'IL N'Y A PAS DE RENCONTRE
        client.send("encounterFailed", {
          success: false,
          reason: "no_encounter_generated",
          message: "No wild Pok√©mon appeared",
          conditions: { timeOfDay, weather },
          location: {
            zone: player.currentZone,
            zoneId: data.zoneId,
            x: data.x,
            y: data.y
          },
          method: data.method
        });
      }

    } catch (error) {
      console.error(`‚ùå [EncounterHandlers] Erreur lors de la g√©n√©ration:`, error);
      client.send("encounterError", {
        success: false,
        message: "Error generating encounter",
        error: error instanceof Error ? error.message : 'Unknown error',
        location: {
          zone: player.currentZone,
          zoneId: data.zoneId,
          x: data.x,
          y: data.y
        }
      });
    }
  }

  // ‚úÖ D√âMARRAGE IMM√âDIAT DU COMBAT (STYLE POK√âMON AUTHENTIQUE)
  private async startWildBattleImmediate(client: Client, wildPokemon: any, encounterData: any): Promise<void> {
    const player = this.room.state.players.get(client.sessionId);
    if (!player) return;

    try {
      console.log(`üéÆ [EncounterHandlers] === D√âMARRAGE COMBAT IMM√âDIAT ===`);
      console.log(`üë§ Joueur: ${player.name}`);
      console.log(`üêæ Contre: ${this.getPokemonName(wildPokemon.pokemonId)} Niv.${wildPokemon.level}`);

      // ‚úÖ ENVOYER LA NOTIFICATION DE RENCONTRE IMM√âDIATE
      client.send("wildEncounterStart", {
        success: true,
        pokemon: {
          pokemonId: wildPokemon.pokemonId,
          name: this.getPokemonName(wildPokemon.pokemonId),
          level: wildPokemon.level,
          shiny: wildPokemon.shiny,
          gender: wildPokemon.gender,
          nature: wildPokemon.nature,
          moves: wildPokemon.moves,
          ivs: wildPokemon.ivs
        },
        location: {
          zone: player.currentZone,
          zoneId: encounterData.zoneId,
          x: encounterData.x,
          y: encounterData.y
        },
        method: encounterData.method,
        forced: encounterData.forced || false,
        serverGenerated: true, // ‚úÖ NOUVEAU: Marquer comme g√©n√©r√© par le serveur
        message: `Un ${this.getPokemonName(wildPokemon.pokemonId)} sauvage appara√Æt !`,
        timestamp: Date.now()
      });

      // ‚úÖ BROADCASTER DISCR√àTEMENT AUX AUTRES JOUEURS
      this.broadcastToZone(player.currentZone, "playerEncounter", {
        playerName: player.name,
        pokemonId: wildPokemon.pokemonId,
        pokemonName: this.getPokemonName(wildPokemon.pokemonId),
        level: wildPokemon.level,
        shiny: wildPokemon.shiny,
        method: encounterData.method,
        startedBattle: true
      }, client.sessionId);

      // ‚úÖ D√âL√âGUER AU BATTLEHANDLERS POUR CR√âER LA BATTLEROOM
      const battleHandlers = this.room.getBattleHandlers();
      if (!battleHandlers) {
        console.error(`‚ùå [EncounterHandlers] BattleHandlers non disponible !`);
        client.send("battleError", {
          message: "Syst√®me de combat non disponible",
          fallbackToOldSystem: true
        });
        return;
      }

      // ‚úÖ D√âMARRER LE COMBAT VIA BATTLEHANDLERS
      await battleHandlers.handleStartWildBattle(client, {
        wildPokemon: wildPokemon,
        location: `${player.currentZone} (${encounterData.zoneId})`,
        method: encounterData.method,
        currentZone: player.currentZone,
        zoneId: encounterData.zoneId
      });

      console.log(`‚úÖ [EncounterHandlers] Combat d√©marr√© via BattleHandlers`);

    } catch (error) {
      console.error(`‚ùå [EncounterHandlers] Erreur d√©marrage combat:`, error);
      
      // ‚úÖ FALLBACK: Envoyer l'ancienne notification en cas d'erreur
      client.send("wildEncounterFallback", {
        success: true,
        pokemon: {
          pokemonId: wildPokemon.pokemonId,
          name: this.getPokemonName(wildPokemon.pokemonId),
          level: wildPokemon.level,
          shiny: wildPokemon.shiny,
          gender: wildPokemon.gender,
          nature: wildPokemon.nature,
          moves: wildPokemon.moves,
          ivs: wildPokemon.ivs
        },
        message: "Combat en cours de d√©veloppement",
        error: "Erreur syst√®me de combat"
      });
    }
  }

  // ‚úÖ HANDLER DEBUG - MAINTENANT PUBLIC
  public handleDebugEncounters(client: Client, zone: string): void {
    const player = this.room.state.players.get(client.sessionId);
    if (!player) return;

    console.log(`üîç [EncounterHandlers] === DEBUG RENCONTRES ===`);
    console.log(`üë§ Demand√© par: ${player.name}`);
    console.log(`üåç Zone: ${zone}`);

    // ‚úÖ DEBUG DE LA TABLE D'ENCOUNTER
    this.encounterManager.debugEncounterTable(zone);

    // ‚úÖ STATISTIQUES DU MANAGER
    const encounterConfig = getServerConfig().encounterSystem;
    const stats = {
      zone: zone,
      playerZone: player.currentZone,
      currentConditions: this.room.getCurrentTimeInfo(),
      encounterConfig: {
        enabled: encounterConfig.enabled,
        serverSideOnly: encounterConfig.serverSideOnly,
        cooldownMs: encounterConfig.playerCooldownMs,
        maxPerMinute: encounterConfig.maxEncountersPerMinute,
        baseRates: encounterConfig.baseRates
      },
      battleSystem: 'Connect√© avec BattleHandlers'
    };

    client.send("encounterDebugResult", {
      success: true,
      stats: stats,
      message: "V√©rifiez la console serveur pour les d√©tails complets"
    });
  }

  // ‚úÖ HANDLER FORCE RENCONTRE AVEC COMBAT AUTOMATIQUE
  public async handleForceEncounter(client: Client, data: {
    zone: string;
    zoneId?: string;
    method?: 'grass' | 'fishing';
  }): Promise<void> {
    const player = this.room.state.players.get(client.sessionId);
    if (!player) return;

    console.log(`üîß [EncounterHandlers] === FORCE RENCONTRE AVEC COMBAT ===`);
    console.log(`üë§ Joueur: ${player.name}`);
    console.log(`üåç Zone: ${data.zone} - ZoneID: ${data.zoneId || 'default'}`);

    try {
      // ‚úÖ FORCER UNE RENCONTRE (100% de chance)
      const conditions = this.room.getCurrentTimeInfo();
      
      const wildPokemon = await this.encounterManager.checkForEncounter(
        data.zone,
        data.method || 'grass',
        1.0, // 100% de chance
        conditions.isDayTime ? 'day' : 'night',
        conditions.weather === 'rain' ? 'rain' : 'clear',
        data.zoneId
      );

      if (wildPokemon) {
        console.log(`‚úÖ [EncounterHandlers] Rencontre forc√©e g√©n√©r√©e`);
        
        // ‚úÖ D√âMARRER LE COMBAT IMM√âDIATEMENT
        await this.startWildBattleImmediate(client, wildPokemon, {
          zoneId: data.zoneId || 'default',
          x: player.x,
          y: player.y,
          method: data.method || 'grass',
          forced: true,
          fromServerCheck: true // ‚úÖ MARQUER COMME V√âRIFICATION SERVEUR
        });

      } else {
        client.send("encounterFailed", {
          success: false,
          message: "Impossible de g√©n√©rer une rencontre m√™me en mode forc√©",
          reason: "force_generation_failed",
          zone: data.zone,
          zoneId: data.zoneId
        });
      }

    } catch (error) {
      console.error('‚ùå [EncounterHandlers] Erreur force rencontre:', error);
      client.send("encounterError", {
        success: false,
        message: "Erreur lors de la g√©n√©ration forc√©e",
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      });
    }
  }

  // ‚úÖ HANDLER INFO POSITION - MAINTENANT PUBLIC
  public handleGetEncounterInfo(client: Client, data: {
    x: number;
    y: number;
    zone: string;
  }): void {
    const player = this.room.state.players.get(client.sessionId);
    if (!player) return;

    // ‚úÖ INFORMATIONS SUR LA POSITION ACTUELLE
    const conditions = this.room.getCurrentTimeInfo();
    const encounterConfig = getServerConfig().encounterSystem;
    
    client.send("encounterZoneInfo", {
      success: true,
      position: { x: data.x, y: data.y },
      zone: data.zone,
      conditions: {
        timeOfDay: conditions.isDayTime ? 'day' : 'night',
        weather: conditions.weather,
        hour: conditions.hour
      },
      canEncounter: encounterConfig.enabled,
      serverSideOnly: encounterConfig.serverSideOnly,
      possibleMethods: ['grass', 'fishing'],
      battleSystemActive: true,
      encounterRates: encounterConfig.baseRates,
      message: "Informations de position r√©cup√©r√©es"
    });
  }

  // ‚úÖ NOUVELLE M√âTHODE: D√âCLENCHEMENT SERVEUR S√âCURIS√â
  public async triggerServerEncounter(sessionId: string, x: number, y: number, method: 'grass' | 'fishing' = 'grass'): Promise<boolean> {
    const client = [...this.room.clients].find(c => c.sessionId === sessionId);
    if (!client) return false;

    const player = this.room.state.players.get(sessionId);
    if (!player) return false;

    console.log(`üîí [EncounterHandlers] D√©clenchement serveur pour ${player.name}`);

    try {
      await this.handleTriggerEncounter(client, {
        x: x,
        y: y,
        zoneId: `${player.currentZone}_default`,
        method: method,
        zone: player.currentZone,
        fromServerCheck: true // ‚úÖ MARQUER COMME V√âRIFICATION SERVEUR AUTORIS√âE
      });
      return true;
    } catch (error) {
      console.error(`‚ùå [EncounterHandlers] Erreur d√©clenchement serveur:`, error);
      return false;
    }
  }

  // ‚úÖ M√âTHODES UTILITAIRES

  private getPokemonName(pokemonId: number): string {
    const pokemonNames: { [key: number]: string } = {
      1: "Bulbasaur", 4: "Charmander", 7: "Squirtle",
      10: "Caterpie", 16: "Pidgey", 19: "Rattata", 
      25: "Pikachu", 41: "Zubat", 43: "Oddish",
      69: "Bellsprout", 92: "Gastly", 129: "Magikarp", 
      170: "Chinchou", 116: "Horsea", 194: "Wooper",
      13: "Weedle"
    };
    
    return pokemonNames[pokemonId] || `Pok√©mon #${pokemonId}`;
  }

  private broadcastToZone(zoneName: string, message: string, data: any, excludeSessionId?: string): void {
    console.log(`üì° [EncounterHandlers] Broadcasting to zone ${zoneName}: ${message}`);
    
    const clientsInZone = this.room.clients.filter(client => {
      if (excludeSessionId && client.sessionId === excludeSessionId) return false;
      
      const player = this.room.state.players.get(client.sessionId);
      return player && player.currentZone === zoneName;
    });
    
    clientsInZone.forEach(client => {
      client.send(message, data);
    });
    
    console.log(`üì§ [EncounterHandlers] Message envoy√© √† ${clientsInZone.length} clients dans ${zoneName}`);
  }

  // ‚úÖ M√âTHODES PUBLIQUES POUR ACC√àS EXTERNE

  public getEncounterManager(): ServerEncounterManager {
    return this.encounterManager;
  }

  public async testEncounter(
    playerId: string, 
    zone: string, 
    zoneId?: string, 
    method: 'grass' | 'fishing' = 'grass'
  ): Promise<any> {
    console.log(`üß™ [EncounterHandlers] Test rencontre: ${zone}/${zoneId || 'default'}`);
    
    const conditions = this.room.getCurrentTimeInfo();
    
    return await this.encounterManager.validateAndGenerateEncounter(
      playerId,
      zone,
      100,
      100,
      conditions.isDayTime ? 'day' : 'night',
      conditions.weather === 'rain' ? 'rain' : 'clear',
      zoneId,
      method
    );
  }

  // ‚úÖ M√âTHODE PUBLIQUE POUR FORCER UNE RENCONTRE DE COMBAT (POUR D√âVELOPPEMENT)
  public async forceWildBattle(client: Client, pokemonId: number, level: number = 5): Promise<void> {
    const player = this.room.state.players.get(client.sessionId);
    if (!player) return;

    console.log(`üî• [EncounterHandlers] Force combat: ${this.getPokemonName(pokemonId)} Niv.${level}`);

    const testWildPokemon = {
      pokemonId: pokemonId,
      level: level,
      gender: Math.random() < 0.5 ? "Male" : "Female",
      nature: "Hardy",
      shiny: Math.random() < 0.001,
      moves: ["tackle", "growl"],
      ivs: {
        hp: Math.floor(Math.random() * 32),
        attack: Math.floor(Math.random() * 32),
        defense: Math.floor(Math.random() * 32),
        spAttack: Math.floor(Math.random() * 32),
        spDefense: Math.floor(Math.random() * 32),
        speed: Math.floor(Math.random() * 32)
      }
    };

    await this.startWildBattleImmediate(client, testWildPokemon, {
      zoneId: `${player.currentZone}_test`,
      x: player.x,
      y: player.y,
      method: 'grass',
      forced: true,
      fromServerCheck: true // ‚úÖ MARQUER COMME AUTORIS√â
    });
  }

  public cleanup(): void {
    console.log(`üßπ [EncounterHandlers] Nettoyage final...`);
    this.encounterManager.cleanupCooldowns();
  }
}

// server/src/managers/InteractionManager.ts - VERSION MISE √Ä JOUR

import { QuestManager } from "./QuestManager";
import { Player } from "../schema/PokeWorldState";

export interface NpcInteractionResult {
  type: string;
  message?: string;
  shopId?: string;
  lines?: string[];
  availableQuests?: any[];
  questRewards?: any[];
  questProgress?: any[];
  npcId?: number;
  npcName?: string;
  questId?: string;
  questName?: string;
}

export class InteractionManager {
  private getNpcManager: (zoneName: string) => any;
  private questManager: QuestManager;

  constructor(getNpcManager: (zoneName: string) => any, questManager: QuestManager) {
    this.getNpcManager = getNpcManager;
    this.questManager = questManager;
  }

  async handleNpcInteraction(player: Player, npcId: number): Promise<NpcInteractionResult> {
    console.log(`üîç === INTERACTION MANAGER ===`);
    console.log(`üë§ Player: ${player.name}`);
    console.log(`ü§ñ NPC ID: ${npcId}`);
    
    // R√©cup√©rer le NPC
    const npcManager = this.getNpcManager(player.currentZone);
    if (!npcManager) {
      return { type: "error", message: "NPCs non disponibles dans cette zone." };
    }

    const npc = npcManager.getNpcById(npcId);
    if (!npc) {
      return { type: "error", message: "NPC inconnu." };
    }

    console.log(`üîç NPC trouv√©: ${npc.name}, propri√©t√©s:`, npc.properties);

    // V√©rifier la proximit√© (64px)
    const dx = Math.abs(player.x - npc.x);
    const dy = Math.abs(player.y - npc.y);
    if (dx > 64 || dy > 64) {
      return { type: "error", message: "Trop loin du NPC." };
    }

    // ‚úÖ === NOUVELLE LOGIQUE : TOUJOURS D√âCLENCHER TALK PROGRESS ===
    
    console.log(`üí¨ D√©clenchement updateQuestProgress pour talk avec NPC ${npcId}`);
    
    let questProgress: any[] = [];
    try {
      questProgress = await this.questManager.updateQuestProgress(player.name, {
        type: 'talk',
        npcId: npcId,
        targetId: npcId.toString()
      });
      console.log(`üìä R√©sultats progression qu√™tes:`, questProgress);
    } catch (error) {
      console.error(`‚ùå Erreur lors de updateQuestProgress:`, error);
    }

    // ‚úÖ === V√âRIFIER LES QU√äTES APR√àS PROGRESSION ===
    
    // 1. V√©rifier les qu√™tes pr√™tes √† compl√©ter manuellement
    const readyToCompleteQuests = await this.getReadyToCompleteQuestsForNpc(player.name, npcId);
    
    if (readyToCompleteQuests.length > 0) {
      console.log(`üéâ Qu√™tes pr√™tes √† compl√©ter: ${readyToCompleteQuests.length}`);
      
      // Compl√©ter automatiquement toutes les qu√™tes pr√™tes
      const completionResults = [];
      for (const quest of readyToCompleteQuests) {
        const result = await this.questManager.completeQuestManually(player.name, quest.id);
        if (result) {
          completionResults.push(result);
        }
      }
      
      if (completionResults.length > 0) {
        const totalRewards = completionResults.reduce((acc, result) => {
          return [...acc, ...(result.questRewards || [])];
        }, []);
        
        const questNames = completionResults.map(r => r.questName).join(', ');
        
        return {
          type: "questComplete",
          questId: completionResults[0].questId,
          questName: questNames,
          questRewards: totalRewards,
          questProgress: questProgress,
          npcId: npcId,
          npcName: npc.name,
          message: `F√©licitations ! Vous avez termin√© : ${questNames}`
        };
      }
    }

    // 2. V√©rifier les qu√™tes disponibles
    const availableQuests = await this.getAvailableQuestsForNpc(player.name, npcId);
    
    if (availableQuests.length > 0) {
      console.log(`üìã Qu√™tes disponibles: ${availableQuests.length}`);
      
      const serializedQuests = availableQuests.map(quest => ({
        id: quest.id,
        name: quest.name,
        description: quest.description,
        category: quest.category,
        steps: quest.steps.map((step: any) => ({
          id: step.id,
          name: step.name,
          description: step.description,
          objectives: step.objectives,
          rewards: step.rewards
        }))
      }));

      return {
        type: "questGiver",
        message: "J'ai quelque chose pour vous...",
        availableQuests: serializedQuests,
        questProgress: questProgress,
        npcId: npcId,
        npcName: npc.name
      };
    }

    // 3. V√©rifier les qu√™tes en cours
    const activeQuests = await this.questManager.getActiveQuests(player.name);
    const questsForThisNpc = activeQuests.filter(q => 
      q.startNpcId === npcId || q.endNpcId === npcId
    );

    if (questsForThisNpc.length > 0) {
      console.log(`üìà Qu√™tes en cours pour ce NPC: ${questsForThisNpc.length}`);
      
      const progressDialogue = this.getProgressDialogueForNpc(npc, questsForThisNpc[0]);
      return {
        type: "dialogue",
        lines: progressDialogue,
        npcId: npcId,
        npcName: npc.name,
        questProgress: questProgress
      };
    }

    // ‚úÖ === COMPORTEMENT NPC NORMAL ===
    
    console.log(`üí¨ Aucune qu√™te, dialogue normal`);

    // Types d'interaction classiques selon les propri√©t√©s du NPC
    if (npc.properties.shop) {
      return { 
        type: "shop", 
        shopId: npc.properties.shop,
        npcId: npcId,
        npcName: npc.name,
        questProgress: questProgress
      };
    } else if (npc.properties.healer) {
      return { 
        type: "heal", 
        message: "Vos Pok√©mon sont soign√©s !",
        npcId: npcId,
        npcName: npc.name,
        questProgress: questProgress
      };
    } else if (npc.properties.dialogue) {
      const lines = Array.isArray(npc.properties.dialogue)
        ? npc.properties.dialogue
        : [npc.properties.dialogue];
      return { 
        type: "dialogue", 
        lines,
        npcId: npcId,
        npcName: npc.name,
        questProgress: questProgress
      };
    } else {
      // Dialogue par d√©faut
      const defaultDialogue = await this.getDefaultDialogueForNpc(npc);
      return { 
        type: "dialogue", 
        lines: defaultDialogue,
        questProgress: questProgress,
        npcId: npcId,
        npcName: npc.name
      };
    }
  }

  // ‚úÖ === M√âTHODES HELPER AM√âLIOR√âES ===

  private async getAvailableQuestsForNpc(username: string, npcId: number): Promise<any[]> {
    try {
      const questsForNpc = this.questManager.getQuestsForNpc(npcId);
      const availableQuests = await this.questManager.getAvailableQuests(username);
      
      console.log(`üîç Qu√™tes pour NPC ${npcId}:`, questsForNpc.length);
      console.log(`üîç Qu√™tes disponibles pour ${username}:`, availableQuests.length);
      
      const result = availableQuests.filter(quest => 
        questsForNpc.some(npcQuest => 
          npcQuest.id === quest.id && npcQuest.startNpcId === npcId
        )
      );
      
      console.log(`üîç Qu√™tes filtr√©es pour NPC ${npcId}:`, result.length);
      return result;
    } catch (error) {
      console.error(`‚ùå Erreur getAvailableQuestsForNpc:`, error);
      return [];
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE : R√©cup√©rer les qu√™tes pr√™tes √† compl√©ter manuellement
  private async getReadyToCompleteQuestsForNpc(username: string, npcId: number): Promise<any[]> {
    try {
      const activeQuests = await this.questManager.getActiveQuests(username);
      
      const readyQuests = activeQuests.filter(quest => {
        // V√©rifier si c'est le bon NPC pour rendre la qu√™te
        if (quest.endNpcId !== npcId) return false;
        
        // V√©rifier si la qu√™te est marqu√©e comme pr√™te √† compl√©ter
        return quest.status === 'readyToComplete';
      });

      console.log(`üéâ Qu√™tes pr√™tes √† compl√©ter pour NPC ${npcId}:`, readyQuests.length);
      return readyQuests;
    } catch (error) {
      console.error(`‚ùå Erreur getReadyToCompleteQuestsForNpc:`, error);
      return [];
    }
  }

  private getProgressDialogueForNpc(npc: any, quest: any): string[] {
    // Dialogues sp√©cifiques selon la qu√™te en cours
    if (quest.id === 'quest_fishingrod') {
      return [
        "Comment va votre recherche de mat√©riel de p√™che ?",
        "J'ai vraiment h√¢te de retourner p√™cher !"
      ];
    }
    
    if (quest.id === 'tutorial_first_steps') {
      return [
        "Comment avance votre apprentissage ?",
        "N'h√©sitez pas si vous avez des questions !"
      ];
    }
    
    // Dialogue g√©n√©rique pour qu√™te en cours
    return [
      `Comment avance votre mission "${quest.name}" ?`,
      `Revenez me voir quand vous aurez termin√© !`
    ];
  }

  private async getDefaultDialogueForNpc(npc: any): Promise<string[]> {
    // 1. V√©rifier si le NPC a un dialogueId
    if (npc.properties?.dialogueId) {
      const dialogues = await this.getDialogueById(npc.properties.dialogueId);
      if (dialogues.length > 0) {
        return dialogues;
      }
    }
    
    // 2. Dialogue par d√©faut bas√© sur le type de NPC
    if (npc.properties?.shop) {
      return [
        `Bienvenue dans ma boutique !`,
        `Regardez mes marchandises !`
      ];
    }
    
    if (npc.properties?.healer) {
      return [
        `Voulez-vous que je soigne vos Pok√©mon ?`,
        `Ils seront en pleine forme !`
      ];
    }
    
    // 3. Dialogue g√©n√©rique par d√©faut
    return [
      `Bonjour ! Je suis ${npc.name}.`,
      `Belle journ√©e pour une aventure !`
    ];
  }

  private async getDialogueById(dialogueId: string): Promise<string[]> {
    // TODO: Charger depuis un fichier JSON ou base de donn√©es
    const dialogueMap: { [key: string]: string[] } = {
      'greeting_bob': [
        "Salut ! Je suis Bob, le p√™cheur local.",
        "J'esp√®re que tu aimes la p√™che comme moi !"
      ],
      'greeting_oak': [
        "Bonjour jeune dresseur !",
        "Pr√™t pour de nouvelles aventures ?"
      ],
      'shop_keeper': [
        "Bienvenue dans ma boutique !",
        "J'ai tout ce qu'il faut pour votre aventure !"
      ]
    };
    
    return dialogueMap[dialogueId] || [];
  }

  // ‚úÖ === M√âTHODES POUR LES QU√äTES ===

  async handleQuestStart(username: string, questId: string): Promise<{ success: boolean; message: string; quest?: any }> {
    try {
      console.log(`üéØ Tentative de d√©marrage de qu√™te ${questId} pour ${username}`);
      
      const quest = await this.questManager.startQuest(username, questId);
      if (quest) {
        console.log(`‚úÖ Qu√™te ${questId} d√©marr√©e avec succ√®s pour ${username}`);
        return {
          success: true,
          message: `Qu√™te "${quest.name}" accept√©e !`,
          quest: quest
        };
      } else {
        console.log(`‚ùå Impossible de d√©marrer la qu√™te ${questId} pour ${username}`);
        return {
          success: false,
          message: "Impossible de commencer cette qu√™te."
        };
      }
    } catch (error) {
      console.error("‚ùå Erreur lors du d√©marrage de qu√™te:", error);
      return {
        success: false,
        message: `Erreur lors du d√©marrage de la qu√™te: ${error instanceof Error ? error.message : 'Erreur inconnue'}`
      };
    }
  }

  async updatePlayerProgress(username: string, eventType: string, data: any): Promise<any[]> {
    try {
      switch (eventType) {
        case 'collect':
          return await this.questManager.updateQuestProgress(username, {
            type: 'collect',
            targetId: data.itemId,
            amount: data.amount || 1
          });

        case 'defeat':
          return await this.questManager.updateQuestProgress(username, {
            type: 'defeat',
            pokemonId: data.pokemonId,
            amount: 1
          });

        case 'reach':
          return await this.questManager.updateQuestProgress(username, {
            type: 'reach',
            targetId: data.zoneId,
            location: { x: data.x, y: data.y, map: data.map }
          });

        case 'deliver':
          return await this.questManager.updateQuestProgress(username, {
            type: 'deliver',
            npcId: data.npcId,
            targetId: data.targetId
          });

        default:
          return [];
      }
    } catch (error) {
      console.error("‚ùå Erreur mise √† jour progression:", error);
      return [];
    }
  }

  async getQuestStatuses(username: string): Promise<any[]> {
    try {
      const availableQuests = await this.questManager.getAvailableQuests(username);
      const activeQuests = await this.questManager.getActiveQuests(username);
      
      const questStatuses: any[] = [];
      
      // Statuts pour les qu√™tes disponibles
      for (const quest of availableQuests) {
        if (quest.startNpcId) {
          questStatuses.push({
            npcId: quest.startNpcId,
            type: 'questAvailable'
          });
        }
      }
      
      // Statuts pour les qu√™tes actives
      for (const quest of activeQuests) {
        // Qu√™te pr√™te √† √™tre rendue
        if (quest.status === 'readyToComplete' && quest.endNpcId) {
          questStatuses.push({
            npcId: quest.endNpcId,
            type: 'questReadyToComplete'
          });
        }
        // Qu√™te en cours avec des objectifs
        else if (quest.endNpcId) {
          questStatuses.push({
            npcId: quest.endNpcId,
            type: 'questInProgress'
          });
        }
      }
      
      return questStatuses;
    } catch (error) {
      console.error("‚ùå Erreur getQuestStatuses:", error);
      return [];
    }
  }
}

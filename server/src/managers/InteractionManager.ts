// server/src/managers/InteractionManager.ts - VERSION COMPL√àTE AVEC SHOP

import { QuestManager } from "./QuestManager";
import { ShopManager } from "./ShopManager"; // ‚úÖ IMPORT SHOP
import { StarterHandlers } from "../handlers/StarterHandlers";
import { InventoryManager } from "./InventoryManager";
import { Player } from "../schema/PokeWorldState";

export interface NpcInteractionResult {
  type: string;
  message?: string;
  shopId?: string;
  shopData?: any; // ‚úÖ NOUVEAU : Donn√©es du shop
  lines?: string[];
  availableQuests?: any[];
  questRewards?: any[];
  questProgress?: any[];
  npcId?: number;
  npcName?: string;
  questId?: string;
  questName?: string;
  starterData?: any;
  starterEligible?: boolean; // ‚úÖ AJOUT√â
  starterReason?: string;    // ‚úÖ AJOUT√â
}

export class InteractionManager {
  private getNpcManager: (zoneName: string) => any;
  private questManager: QuestManager;
  private shopManager: ShopManager; // ‚úÖ NOUVEAU MANAGER
  private starterHandlers: StarterHandlers;


  constructor(
    getNpcManager: (zoneName: string) => any, 
    questManager: QuestManager,
    shopManager: ShopManager, // ‚úÖ NOUVEAU PARAM√àTRE
    starterHandlers: StarterHandlers // ‚úÖ NOUVEAU PARAM√àTRE

  ) {
    this.getNpcManager = getNpcManager;
    this.questManager = questManager;
    this.shopManager = shopManager; // ‚úÖ INITIALISATION
    this.starterHandlers = starterHandlers; // ‚úÖ INITIALISATION

  }

  async handleNpcInteraction(player: Player, npcId: number): Promise<NpcInteractionResult> {
    console.log(`üîç === INTERACTION MANAGER ===`);
    console.log(`üë§ Player: ${player.name}`);
    console.log(`ü§ñ NPC ID: ${npcId}`);
    
    // R√©cup√©rer le NPC
    const npcManager = this.getNpcManager(player.currentZone);
    if (!npcManager) {
      return { type: "error", message: "NPCs non disponibles dans cette zone." };
    }

    const npc = npcManager.getNpcById(npcId);
    if (!npc) {
      return { type: "error", message: "NPC inconnu." };
    }

    console.log(`üîç NPC trouv√©: ${npc.name}, propri√©t√©s:`, npc.properties);

    // V√©rifier la proximit√© (64px)
    const dx = Math.abs(player.x - npc.x);
    const dy = Math.abs(player.y - npc.y);
    if (dx > 64 || dy > 64) {
      return { type: "error", message: "Trop loin du NPC." };
    }

    // ‚úÖ === NOUVEAU : V√âRIFIER SI C'EST UN MARCHAND ===
    if (npc.properties.npcType === 'merchant' || npc.properties.shopId) {
      console.log(`üè™ NPC Marchand d√©tect√©`);
      return await this.handleMerchantInteraction(player, npc, npcId);
    }

    // ‚úÖ === NOUVEAU : V√âRIFIER SI C'EST UNE TABLE STARTER ===
if (npc.properties.startertable === true || npc.properties.startertable === 'true') {
  console.log(`üéØ Table starter d√©tect√©e`);
  return await this.handleStarterTableInteraction(player, npc, npcId);
}
    // ‚úÖ === LOGIQUE EXISTANTE : V√âRIFIER D'ABORD LES OBJECTIFS TALK ===
    
    const talkValidationResult = await this.checkTalkObjectiveValidation(player.name, npcId);
    if (talkValidationResult) {
      console.log(`üí¨ Objectif talk valid√© pour NPC ${npcId} - ARR√äT DU FLOW`);
      return talkValidationResult;
    }

    // ‚úÖ === PROGRESSION NORMALE (sans validation talk) ===
    
    console.log(`üí¨ D√©clenchement updateQuestProgress pour talk avec NPC ${npcId}`);
    
    let questProgress: any[] = [];
    try {
      questProgress = await this.questManager.updateQuestProgress(player.name, {
        type: 'talk',
        npcId: npcId,
        targetId: npcId.toString()
      });
      console.log(`üìä R√©sultats progression qu√™tes:`, questProgress);
    } catch (error) {
      console.error(`‚ùå Erreur lors de updateQuestProgress:`, error);
    }

    // ‚úÖ === V√âRIFIER LES QU√äTES APR√àS PROGRESSION ===
    
    // 1. V√©rifier les qu√™tes pr√™tes √† compl√©ter manuellement
    const readyToCompleteQuests = await this.getReadyToCompleteQuestsForNpc(player.name, npcId);
    
    if (readyToCompleteQuests.length > 0) {
      console.log(`üéâ Qu√™tes pr√™tes √† compl√©ter: ${readyToCompleteQuests.length}`);
      
      // Utiliser le dialogue de completion de la premi√®re qu√™te
      const firstQuest = readyToCompleteQuests[0];
      const questDefinition = this.questManager.getQuestDefinition(firstQuest.id);
      const completionDialogue = this.getQuestDialogue(questDefinition, 'questComplete');
      
      // Compl√©ter automatiquement toutes les qu√™tes pr√™tes
      const completionResults = [];
      for (const quest of readyToCompleteQuests) {
        const result = await this.questManager.completeQuestManually(player.name, quest.id);
        if (result) {
          completionResults.push(result);
        }
      }
      
      if (completionResults.length > 0) {
        const totalRewards = completionResults.reduce((acc, result) => {
          return [...acc, ...(result.questRewards || [])];
        }, []);
        
        const questNames = completionResults.map(r => r.questName).join(', ');
        
        return {
          type: "questComplete",
          questId: completionResults[0].questId,
          questName: questNames,
          questRewards: totalRewards,
          questProgress: questProgress,
          npcId: npcId,
          npcName: npc.name,
          lines: completionDialogue,
          message: `F√©licitations ! Vous avez termin√© : ${questNames}`
        };
      }
    }

    // 2. V√©rifier les qu√™tes disponibles
    const availableQuests = await this.getAvailableQuestsForNpc(player.name, npcId);
    
    if (availableQuests.length > 0) {
      console.log(`üìã Qu√™tes disponibles: ${availableQuests.length}`);
      
      const firstQuest = availableQuests[0];
      const questOfferDialogue = this.getQuestDialogue(firstQuest, 'questOffer');
      
      const serializedQuests = availableQuests.map(quest => ({
        id: quest.id,
        name: quest.name,
        description: quest.description,
        category: quest.category,
        steps: quest.steps.map((step: any) => ({
          id: step.id,
          name: step.name,
          description: step.description,
          objectives: step.objectives,
          rewards: step.rewards
        }))
      }));

      return {
        type: "questGiver",
        message: questOfferDialogue.join(' '),
        lines: questOfferDialogue,
        availableQuests: serializedQuests,
        questProgress: questProgress,
        npcId: npcId,
        npcName: npc.name
      };
    }

    // 3. V√©rifier les qu√™tes en cours
    const activeQuests = await this.questManager.getActiveQuests(player.name);
    const questsForThisNpc = activeQuests.filter(q => 
      q.startNpcId === npcId || q.endNpcId === npcId
    );

    if (questsForThisNpc.length > 0) {
      console.log(`üìà Qu√™tes en cours pour ce NPC: ${questsForThisNpc.length}`);
      
      const firstQuest = questsForThisNpc[0];
      const questDefinition = this.questManager.getQuestDefinition(firstQuest.id);
      const progressDialogue = this.getQuestDialogue(questDefinition, 'questInProgress');
      
      return {
        type: "dialogue",
        lines: progressDialogue,
        npcId: npcId,
        npcName: npc.name,
        questProgress: questProgress
      };
    }

    // ‚úÖ === COMPORTEMENT NPC NORMAL ===
    
    console.log(`üí¨ Aucune qu√™te, dialogue normal`);

    // Types d'interaction classiques selon les propri√©t√©s du NPC
    if (npc.properties.shop) {
      return { 
        type: "shop", 
        shopId: npc.properties.shop,
        npcId: npcId,
        npcName: npc.name,
        questProgress: questProgress
      };
    } else if (npc.properties.healer) {
      return { 
        type: "heal", 
        message: "Vos Pok√©mon sont soign√©s !",
        npcId: npcId,
        npcName: npc.name,
        questProgress: questProgress
      };
    } else if (npc.properties.dialogue) {
      const lines = Array.isArray(npc.properties.dialogue)
        ? npc.properties.dialogue
        : [npc.properties.dialogue];
      return { 
        type: "dialogue", 
        lines,
        npcId: npcId,
        npcName: npc.name,
        questProgress: questProgress
      };
    } else {
      // Dialogue par d√©faut
      const defaultDialogue = await this.getDefaultDialogueForNpc(npc);
      return { 
        type: "dialogue", 
        lines: defaultDialogue,
        questProgress: questProgress,
        npcId: npcId,
        npcName: npc.name
      };
    }
  }

  // ‚úÖ === NOUVELLE M√âTHODE : GESTION DES MARCHANDS ===
 private async handleMerchantInteraction(player: Player, npc: any, npcId: number): Promise<NpcInteractionResult> {
    console.log(`üè™ === INTERACTION MARCHAND ===`);
    
    // R√©cup√©rer le shop ID depuis les propri√©t√©s du NPC
    const shopId = npc.properties.shopId || npc.properties.shop;
    
    if (!shopId) {
      console.error(`‚ùå NPC marchand ${npcId} sans shopId`);
      return {
        type: "error",
        message: "Ce marchand n'a pas de boutique configur√©e."
      };
    }

    // R√©cup√©rer les donn√©es du shop
    const shopCatalog = this.shopManager.getShopCatalog(shopId, player.level || 1);
    
    if (!shopCatalog) {
      console.error(`‚ùå Shop ${shopId} introuvable`);
      return {
        type: "error",
        message: "Boutique indisponible."
      };
    }

    console.log(`‚úÖ Shop ${shopId} charg√©: ${shopCatalog.availableItems.length} objets disponibles`);

    return {
      type: "shop",
      shopId: shopId,
      shopData: {
        shopInfo: shopCatalog.shopInfo,
        availableItems: shopCatalog.availableItems, // ‚úÖ CORRECTION: utiliser availableItems
        playerGold: player.gold || 1000,
        playerLevel: player.level || 1,
        npcName: npc.name || "Marchand" // ‚úÖ AJOUT DU NOM
      },
      npcId: npcId,
      npcName: npc.name,
      message: `Bienvenue dans ${shopCatalog.shopInfo.name} !`
    };
  }

    // ‚úÖ === NOUVELLE M√âTHODE : GESTION TABLE STARTER ===
  private async handleStarterTableInteraction(player: Player, npc: any, npcId: number): Promise<NpcInteractionResult> {
  console.log(`üéØ === INTERACTION TABLE STARTER ===`);
  console.log(`üë§ Player: ${player.name}`);
  
  // ‚úÖ UTILISER LES VRAIES VALIDATIONS STARTERHANDLERS
  const validation = await this.starterHandlers.validateStarterRequest(player, 1); // Test avec Bulbasaur
  
  if (validation.valid) {
    return {
      type: "starterTable",
      message: "Choisissez votre Pok√©mon starter !",
      npcId: npcId,
      npcName: npc.name || "Table des starters",
      starterEligible: true,
      lines: [
        "Voici les trois Pok√©mon starter !",
        "Choisissez celui qui vous accompagnera dans votre aventure !"
      ]
    };
  } else {
    return {
      type: "dialogue",
      message: validation.message,
      npcId: npcId,
      npcName: npc.name || "Table des starters",
      starterEligible: false,
      starterReason: validation.reason,
      lines: [validation.message]
    };
  }
}
  
  // ‚úÖ === NOUVELLE M√âTHODE : TRANSACTIONS SHOP ===
 async handleShopTransaction(
    player: Player, 
    shopId: string, 
    action: 'buy' | 'sell',
    itemId: string,
    quantity: number
  ): Promise<{
    success: boolean;
    message: string;
    newGold?: number;
    itemsChanged?: any[];
    shopStockChanged?: any[];
  }> {
    console.log(`üí∞ === TRANSACTION SHOP ===`);
    console.log(`üë§ Player: ${player.name}, Shop: ${shopId}, Action: ${action}, Item: ${itemId}, Qty: ${quantity}`);

    const playerGold = player.gold || 1000;
    const playerLevel = player.level || 1;

    if (action === 'buy') {
      // ‚úÖ UTILISER LE SHOPMANAGER CORRIG√â AVEC USERNAME
      const result = await this.shopManager.buyItem(
        player.name, // ‚úÖ USERNAME REQUIS
        shopId, 
        itemId, 
        quantity, 
        playerGold, 
        playerLevel
      );
      
      if (result.success) {
        console.log(`‚úÖ Achat r√©ussi: ${quantity}x ${itemId} pour ${player.name}`);
        console.log(`üí∞ Nouvel or: ${result.newGold}`);
        
        // ‚úÖ L'objet a d√©j√† √©t√© ajout√© √† l'inventaire par ShopManager.buyItem()
        // ‚úÖ L'or sera mis √† jour par le WorldRoom
      }
      
      return result;
      
    } else if (action === 'sell') {
      // ‚úÖ UTILISER LE SHOPMANAGER CORRIG√â AVEC USERNAME
      const result = await this.shopManager.sellItem(
        player.name, // ‚úÖ USERNAME REQUIS
        shopId, 
        itemId, 
        quantity
      );
      
      if (result.success) {
        console.log(`‚úÖ Vente r√©ussie: ${quantity}x ${itemId} par ${player.name}`);
        console.log(`üí∞ Or gagn√©: ${result.newGold}`);
        
        // ‚úÖ L'objet a d√©j√† √©t√© retir√© de l'inventaire par ShopManager.sellItem()
        // ‚úÖ L'or sera mis √† jour par le WorldRoom
      }
      
      return result;
    }

    return {
      success: false,
      message: "Action non reconnue"
    };
  }

  // ‚úÖ === M√âTHODE EXISTANTE : V√©rifier validation objectif talk ===
  private async checkTalkObjectiveValidation(username: string, npcId: number): Promise<NpcInteractionResult | null> {
    try {
      const activeQuests = await this.questManager.getActiveQuests(username);
      console.log(`üîç [checkTalkObjective] Qu√™tes actives: ${activeQuests.length}`);
      
      for (const quest of activeQuests) {
        const currentStep = quest.steps[quest.currentStepIndex];
        if (!currentStep) continue;
        
        console.log(`üîç [checkTalkObjective] Qu√™te: ${quest.name}, √©tape: ${quest.currentStepIndex}`);
        console.log(`üîç [checkTalkObjective] Objectifs de l'√©tape:`, currentStep.objectives.map(obj => ({
          id: obj.id,
          type: obj.type,
          target: obj.target,
          completed: obj.completed
        })));
        
        // Chercher des objectifs talk pour ce NPC dans l'√©tape COURANTE
        for (const objective of currentStep.objectives) {
          console.log(`üîç [checkTalkObjective] V√©rification objectif: ${objective.id}`);
          console.log(`üîç [checkTalkObjective] Type: ${objective.type}, Target: ${objective.target}, NpcId: ${npcId}, Completed: ${objective.completed}`);
          
          if (objective.type === 'talk' && 
              objective.target === npcId.toString() && 
              !objective.completed) {
            
            console.log(`üéØ [checkTalkObjective] MATCH ! Objectif talk trouv√©: ${objective.description}`);
            
            // D√©clencher la progression
            const progressResults = await this.questManager.updateQuestProgress(username, {
              type: 'talk',
              npcId: npcId,
              targetId: npcId.toString()
            });
            
            console.log(`üìä [checkTalkObjective] R√©sultats progression:`, progressResults);
            
            if (progressResults.length > 0) {
              const result = progressResults[0];
              console.log(`üìä [checkTalkObjective] R√©sultat principal:`, result);
              
              // ‚úÖ CORRECTION: V√©rifier si l'objectif OU l'√©tape ont √©t√© compl√©t√©s
              if (result.objectiveCompleted || result.stepCompleted) {
                const validationDialogue = (objective as any).validationDialogue || [
                  "Parfait ! Merci de m'avoir parl√© !",
                  "C'√©tait exactement ce qu'il fallait faire."
                ];
                
                console.log(`‚úÖ [checkTalkObjective] Objectif/√âtape compl√©t√©(e) ! Dialogue de validation:`, validationDialogue);
                
                return {
                  type: "dialogue",
                  lines: validationDialogue,
                  npcId: npcId,
                  npcName: await this.getNpcName(npcId),
                  questProgress: progressResults,
                  message: result.message
                };
              } else {
                console.log(`‚è≥ [checkTalkObjective] Progression enregistr√©e mais objectif pas encore compl√©t√©`);
                return null;
              }
            } else {
              console.log(`‚ùå [checkTalkObjective] Aucun r√©sultat de progression`);
              return null;
            }
          }
        }
      }
      
      console.log(`‚ùå [checkTalkObjective] Aucun objectif talk √† valider dans l'√©tape courante`);
      return null;
      
    } catch (error) {
      console.error(`‚ùå Erreur checkTalkObjectiveValidation:`, error);
      return null;
    }
  }

  // ‚úÖ === M√âTHODE EXISTANTE : R√©cup√©rer dialogue de qu√™te ===
  private getQuestDialogue(questDefinition: any, dialogueType: 'questOffer' | 'questInProgress' | 'questComplete'): string[] {
    if (!questDefinition?.dialogues?.[dialogueType]) {
      switch (dialogueType) {
        case 'questOffer':
          return ["J'ai quelque chose pour vous...", "Acceptez-vous cette mission ?"];
        case 'questInProgress':
          return ["Comment avance votre mission ?", "Revenez me voir quand c'est termin√© !"];
        case 'questComplete':
          return ["Excellent travail !", "Voici votre r√©compense bien m√©rit√©e !"];
        default:
          return ["Bonjour !"];
      }
    }
    
    return questDefinition.dialogues[dialogueType];
  }

  // ‚úÖ === M√âTHODE HELPER : R√©cup√©rer nom NPC ===
  private async getNpcName(npcId: number): Promise<string> {
    const npcNames: { [key: number]: string } = {
      1: "Professeur Oak",
      87: "Bob le p√™cheur", 
      5: "Le collecteur de baies",
      10: "Le ma√Ætre dresseur",
      100: "Marchand du Village",
      101: "Employ√© Pok√© Mart",
      102: "Herboriste",
      103: "Vendeur de CTs"
    };
    
    return npcNames[npcId] || `NPC #${npcId}`;
  }

  // ‚úÖ === M√âTHODES HELPER EXISTANTES ===

  private async getAvailableQuestsForNpc(username: string, npcId: number): Promise<any[]> {
    try {
      const questsForNpc = this.questManager.getQuestsForNpc(npcId);
      const availableQuests = await this.questManager.getAvailableQuests(username);
      
      console.log(`üîç Qu√™tes pour NPC ${npcId}:`, questsForNpc.length);
      console.log(`üîç Qu√™tes disponibles pour ${username}:`, availableQuests.length);
      
      const result = availableQuests.filter(quest => 
        questsForNpc.some(npcQuest => 
          npcQuest.id === quest.id && npcQuest.startNpcId === npcId
        )
      );
      
      console.log(`üîç Qu√™tes filtr√©es pour NPC ${npcId}:`, result.length);
      return result;
    } catch (error) {
      console.error(`‚ùå Erreur getAvailableQuestsForNpc:`, error);
      return [];
    }
  }

  private async getReadyToCompleteQuestsForNpc(username: string, npcId: number): Promise<any[]> {
    try {
      const activeQuests = await this.questManager.getActiveQuests(username);
      
      const readyQuests = activeQuests.filter(quest => {
        if (quest.endNpcId !== npcId) return false;
        return quest.status === 'readyToComplete';
      });

      console.log(`üéâ Qu√™tes pr√™tes √† compl√©ter pour NPC ${npcId}:`, readyQuests.length);
      return readyQuests;
    } catch (error) {
      console.error(`‚ùå Erreur getReadyToCompleteQuestsForNpc:`, error);
      return [];
    }
  }

  private async getDefaultDialogueForNpc(npc: any): Promise<string[]> {
    if (npc.properties?.dialogueId) {
      const dialogues = await this.getDialogueById(npc.properties.dialogueId);
      if (dialogues.length > 0) {
        return dialogues;
      }
    }
    
    if (npc.properties?.shop || npc.properties?.shopId || npc.properties?.npcType === 'merchant') {
      return [
        `Bienvenue dans ma boutique !`,
        `Regardez mes marchandises !`
      ];
    }

    
    if (npc.properties?.healer) {
      return [
        `Voulez-vous que je soigne vos Pok√©mon ?`,
        `Ils seront en pleine forme !`
      ];
    }
    
    return [
      `Bonjour ! Je suis ${npc.name}.`,
      `Belle journ√©e pour une aventure !`
    ];
  }

  private async getDialogueById(dialogueId: string): Promise<string[]> {
    const dialogueMap: { [key: string]: string[] } = {
      'greeting_bob': [
        "Salut ! Je suis Bob, le p√™cheur local.",
        "J'esp√®re que tu aimes la p√™che comme moi !"
      ],
      'greeting_oak': [
        "Bonjour jeune dresseur !",
        "Pr√™t pour de nouvelles aventures ?"
      ],
      'shop_keeper': [
        "Bienvenue dans ma boutique !",
        "J'ai tout ce qu'il faut pour votre aventure !"
      ]
    };
    
    return dialogueMap[dialogueId] || [];
  }

  // ‚úÖ === M√âTHODES POUR LES QU√äTES ===

  async handleQuestStart(username: string, questId: string): Promise<{ success: boolean; message: string; quest?: any }> {
    try {
      console.log(`üéØ Tentative de d√©marrage de qu√™te ${questId} pour ${username}`);
      
      const quest = await this.questManager.startQuest(username, questId);
      if (quest) {
        console.log(`‚úÖ Qu√™te ${questId} d√©marr√©e avec succ√®s pour ${username}`);
        return {
          success: true,
          message: `Qu√™te "${quest.name}" accept√©e !`,
          quest: quest
        };
      } else {
        console.log(`‚ùå Impossible de d√©marrer la qu√™te ${questId} pour ${username}`);
        return {
          success: false,
          message: "Impossible de commencer cette qu√™te."
        };
      }
    } catch (error) {
      console.error("‚ùå Erreur lors du d√©marrage de qu√™te:", error);
      return {
        success: false,
        message: `Erreur lors du d√©marrage de la qu√™te: ${error instanceof Error ? error.message : 'Erreur inconnue'}`
      };
    }
  }

  async updatePlayerProgress(username: string, eventType: string, data: any): Promise<any[]> {
    try {
      switch (eventType) {
        case 'collect':
          return await this.questManager.updateQuestProgress(username, {
            type: 'collect',
            targetId: data.itemId,
            amount: data.amount || 1
          });

        case 'defeat':
          return await this.questManager.updateQuestProgress(username, {
            type: 'defeat',
            pokemonId: data.pokemonId,
            amount: 1
          });

        case 'reach':
          return await this.questManager.updateQuestProgress(username, {
            type: 'reach',
            targetId: data.zoneId,
            location: { x: data.x, y: data.y, map: data.map }
          });

        case 'deliver':
          return await this.questManager.updateQuestProgress(username, {
            type: 'deliver',
            npcId: data.npcId,
            targetId: data.targetId
          });

        default:
          return [];
      }
    } catch (error) {
      console.error("‚ùå Erreur mise √† jour progression:", error);
      return [];
    }
  }

  async getQuestStatuses(username: string): Promise<any[]> {
    try {
      const availableQuests = await this.questManager.getAvailableQuests(username);
      const activeQuests = await this.questManager.getActiveQuests(username);
      
      const questStatuses: any[] = [];
      
      // Statuts pour les qu√™tes disponibles
      for (const quest of availableQuests) {
        if (quest.startNpcId) {
          questStatuses.push({
            npcId: quest.startNpcId,
            type: 'questAvailable'
          });
        }
      }
      
      // Statuts pour les qu√™tes actives
      for (const quest of activeQuests) {
        if (quest.status === 'readyToComplete' && quest.endNpcId) {
          questStatuses.push({
            npcId: quest.endNpcId,
            type: 'questReadyToComplete'
          });
        }
        else if (quest.endNpcId) {
          questStatuses.push({
            npcId: quest.endNpcId,
            type: 'questInProgress'
          });
        }
      }
      
      return questStatuses;
    } catch (error) {
      console.error("‚ùå Erreur getQuestStatuses:", error);
      return [];
    }
  }
  async giveItemToPlayer(username: string, itemId: string, quantity: number = 1): Promise<boolean> {
    try {
      await InventoryManager.addItem(username, itemId, quantity);
      console.log(`‚úÖ [InteractionManager] Donn√© ${quantity}x ${itemId} √† ${username}`);
      return true;
    } catch (error) {
      console.error(`‚ùå [InteractionManager] Erreur lors du don d'objet:`, error);
      return false;
    }
  }

  async takeItemFromPlayer(username: string, itemId: string, quantity: number = 1): Promise<boolean> {
    try {
      const success = await InventoryManager.removeItem(username, itemId, quantity);
      if (success) {
        console.log(`‚úÖ [InteractionManager] Retir√© ${quantity}x ${itemId} √† ${username}`);
      }
      return success;
    } catch (error) {
      console.error(`‚ùå [InteractionManager] Erreur lors du retrait d'objet:`, error);
      return false;
    }
  }

  async playerHasItem(username: string, itemId: string, quantity: number = 1): Promise<boolean> {
    try {
      const count = await InventoryManager.getItemCount(username, itemId);
      return count >= quantity;
    } catch (error) {
      console.error(`‚ùå [InteractionManager] Erreur lors de la v√©rification d'objet:`, error);
      return false;
    }
  }

  // ‚úÖ === M√âTHODES POUR LES R√âCOMPENSES DE QU√äTE ===

  async giveQuestReward(username: string, reward: {
    type: 'item' | 'gold' | 'experience';
    itemId?: string;
    amount: number;
  }): Promise<boolean> {
    try {
      switch (reward.type) {
        case 'item':
          if (reward.itemId) {
            return await this.giveItemToPlayer(username, reward.itemId, reward.amount);
          }
          return false;

        case 'gold':
          // TODO: Ajouter l'or au joueur via PlayerDataManager
          console.log(`üí∞ [InteractionManager] Donner ${reward.amount} or √† ${username} (non impl√©ment√©)`);
          return true;

        case 'experience':
          // TODO: Ajouter l'exp√©rience au joueur
          console.log(`‚≠ê [InteractionManager] Donner ${reward.amount} XP √† ${username} (non impl√©ment√©)`);
          return true;

        default:
          console.warn(`‚ö†Ô∏è [InteractionManager] Type de r√©compense inconnu: ${reward.type}`);
          return false;
      }
    } catch (error) {
      console.error(`‚ùå [InteractionManager] Erreur giveQuestReward:`, error);
      return false;
    }
  }
}

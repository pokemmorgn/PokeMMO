// server/src/managers/EncounterManager.ts - VERSION FINALE
import fs from 'fs/promises';
import path from 'path';
import { getPokemonById } from '../data/PokemonData';

export interface WildPokemon {
  pokemonId: number;
  level: number;
  gender: string;
  nature: string;
  shiny: boolean;
  moves: string[];
  ivs: {
    hp: number;
    attack: number;
    defense: number;
    spAttack: number;
    spDefense: number;
    speed: number;
  };
}

export interface EncounterData {
  species: string;
  level_range: [number, number];
  chance: number;
}

export interface EncounterZone {
  grass?: {
    day?: EncounterData[];
    night?: EncounterData[];
    rain?: EncounterData[];
  };
  fishing?: {
    day?: EncounterData[];
    night?: EncounterData[];
    rain?: EncounterData[];
  };
}

export interface EncounterTable {
  zone: string;
  encounters: {
    zones: {
      [zoneId: string]: EncounterZone;
    };
    fishing?: {
      calm_water?: {
        day?: EncounterData[];
        night?: EncounterData[];
        rain?: EncounterData[];
      };
    };
    held_items?: Array<{
      species: string;
      item: string;
      chance: number;
    }>;
    conditions?: {
      spawn_condition?: string;
      shiny_rate_modifier?: number;
      nature?: string;
      gender_ratio?: string;
      experience_yield?: string;
    };
  };
}

export class ServerEncounterManager {
  private encounterTables: Map<string, EncounterTable> = new Map();
  private pokemonNameToId: Map<string, number> = new Map();
  
  // ‚úÖ Anti-cheat: Cooldown par joueur
  private playerCooldowns: Map<string, number> = new Map();
  private readonly ENCOUNTER_COOLDOWN = 800; // 800ms c√¥t√© serveur
  
  // ‚úÖ Rate limiting par joueur (anti-spam)
  private playerEncounterCount: Map<string, { count: number; timestamp: number }> = new Map();
  private readonly MAX_ENCOUNTERS_PER_MINUTE = 10;

  constructor() {
    this.initializePokemonMapping();
  }

  // ‚úÖ VALIDATION D'UNE RENCONTRE DEPUIS LE CLIENT
  async validateAndGenerateEncounter(
    playerId: string,
    zoneName: string,
    x: number,
    y: number,
    timeOfDay: 'day' | 'night',
    weather: 'clear' | 'rain',
    zoneId?: string, // ‚úÖ NOUVEAU: Zone sp√©cifique de rencontre
    method: 'grass' | 'fishing' = 'grass'
  ): Promise<WildPokemon | null> {
    
    console.log(`üîç [ServerEncounter] === VALIDATION RENCONTRE ===`);
    console.log(`üë§ Joueur: ${playerId}`);
    console.log(`üìç Position: (${x}, ${y}) dans ${zoneName}`);
    console.log(`üåø Zone ID: ${zoneId || 'default'}`);
    console.log(`‚è∞ Conditions: ${timeOfDay}, ${weather}`);
    
    // ‚úÖ ANTI-CHEAT: V√©rifier le cooldown
    if (!this.checkCooldown(playerId)) {
      console.log(`‚ö†Ô∏è [ServerEncounter] Cooldown actif pour ${playerId}`);
      return null;
    }

    // ‚úÖ ANTI-CHEAT: Rate limiting
    if (!this.checkRateLimit(playerId)) {
      console.warn(`‚ùå [ServerEncounter] Rate limit d√©pass√© pour ${playerId}`);
      return null;
    }

    // ‚úÖ ANTI-CHEAT: Validation position
    if (!this.isValidPosition(x, y)) {
      console.warn(`‚ùå [ServerEncounter] Position invalide: (${x}, ${y})`);
      return null;
    }

    // ‚úÖ Charger la table de rencontres si n√©cessaire
    if (!this.encounterTables.has(zoneName)) {
      await this.loadEncounterTable(zoneName);
    }

    const table = this.encounterTables.get(zoneName);
    if (!table) {
      console.warn(`‚ùå [ServerEncounter] Aucune table pour ${zoneName}`);
      return null;
    }

    // ‚úÖ G√©n√©rer le Pok√©mon selon la zone sp√©cifique
    const wildPokemon = await this.generateWildEncounterByZone(
      table, 
      zoneId || `${zoneName}_default`, 
      method, 
      timeOfDay, 
      weather
    );
    
    if (wildPokemon) {
      // ‚úÖ Mettre √† jour les anti-cheat
      this.updatePlayerCooldown(playerId);
      this.updateRateLimit(playerId);
      
      console.log(`‚öîÔ∏è [ServerEncounter] Rencontre valid√©e !`);
      console.log(`üêæ Pok√©mon: ${wildPokemon.pokemonId} niveau ${wildPokemon.level}`);
      console.log(`‚ú® Shiny: ${wildPokemon.shiny}, Nature: ${wildPokemon.nature}`);
    } else {
      console.log(`‚ùå [ServerEncounter] Aucune rencontre g√©n√©r√©e`);
    }

    return wildPokemon;
  }

  // ‚úÖ G√âN√âRATION PAR ZONE SP√âCIFIQUE
  private async generateWildEncounterByZone(
    table: EncounterTable,
    zoneId: string,
    method: 'grass' | 'fishing',
    timeOfDay: 'day' | 'night',
    weather: 'clear' | 'rain'
  ): Promise<WildPokemon | null> {
    
    console.log(`üéØ [ServerEncounter] G√©n√©ration pour zone: ${zoneId}`);
    
    // ‚úÖ V√©rifier si la zone existe
    const zoneData = table.encounters.zones[zoneId];
    if (!zoneData) {
      console.warn(`‚ö†Ô∏è [ServerEncounter] Zone ${zoneId} non trouv√©e, essai avec fallback`);
      
      // ‚úÖ Fallback: essayer la zone par d√©faut
      const defaultZoneKey = Object.keys(table.encounters.zones).find(key => 
        key.includes('default') || key.endsWith('_default')
      );
      
      if (defaultZoneKey) {
        const defaultZone = table.encounters.zones[defaultZoneKey];
        console.log(`üîÑ [ServerEncounter] Utilisation zone fallback: ${defaultZoneKey}`);
        return this.generateFromZoneData(defaultZone, method, timeOfDay, weather, table);
      }
      
      return null;
    }

    return this.generateFromZoneData(zoneData, method, timeOfDay, weather, table);
  }

  // ‚úÖ G√âN√âRATION DEPUIS LES DONN√âES D'UNE ZONE
  private async generateFromZoneData(
    zoneData: EncounterZone,
    method: 'grass' | 'fishing',
    timeOfDay: 'day' | 'night',
    weather: 'clear' | 'rain',
    table: EncounterTable
  ): Promise<WildPokemon | null> {
    
    let encounters: EncounterData[] | undefined;

    if (method === 'grass' && zoneData.grass) {
      // ‚úÖ Priorit√©: m√©t√©o sp√©ciale > moment de la journ√©e > d√©faut
      if (weather === 'rain' && zoneData.grass.rain) {
        encounters = zoneData.grass.rain;
        console.log(`üåßÔ∏è [ServerEncounter] Utilisation rencontres pluie`);
      } else if (timeOfDay === 'night' && zoneData.grass.night) {
        encounters = zoneData.grass.night;
        console.log(`üåô [ServerEncounter] Utilisation rencontres nuit`);
      } else if (zoneData.grass.day) {
        encounters = zoneData.grass.day;
        console.log(`‚òÄÔ∏è [ServerEncounter] Utilisation rencontres jour`);
      }
    } else if (method === 'fishing') {
      // ‚úÖ Pour la p√™che, utiliser la table globale de la zone
      const fishingData = table.encounters.fishing?.calm_water;
      if (fishingData) {
        if (weather === 'rain' && fishingData.rain) {
          encounters = fishingData.rain;
        } else if (timeOfDay === 'night' && fishingData.night) {
          encounters = fishingData.night;
        } else if (fishingData.day) {
          encounters = fishingData.day;
        }
      }
    }

    if (!encounters || encounters.length === 0) {
      console.log(`‚ùå [ServerEncounter] Aucune rencontre disponible pour ces conditions`);
      return null;
    }

    console.log(`üìä [ServerEncounter] ${encounters.length} rencontres possibles`);

    // ‚úÖ S√©lection pond√©r√©e
    const totalChance = encounters.reduce((sum, enc) => sum + enc.chance, 0);
    let random = Math.random() * totalChance;
    
    let selectedEncounter: EncounterData | null = null;
    for (const encounter of encounters) {
      random -= encounter.chance;
      if (random <= 0) {
        selectedEncounter = encounter;
        break;
      }
    }

    if (!selectedEncounter) {
      console.warn(`‚ö†Ô∏è [ServerEncounter] Aucune rencontre s√©lectionn√©e`);
      return null;
    }

    console.log(`üé≤ [ServerEncounter] S√©lectionn√©: ${selectedEncounter.species} (chance: ${selectedEncounter.chance})`);

    // ‚úÖ Convertir le nom en ID
    const pokemonId = this.pokemonNameToId.get(selectedEncounter.species);
    if (!pokemonId) {
      console.warn(`‚ö†Ô∏è [ServerEncounter] ID non trouv√© pour ${selectedEncounter.species}`);
      return null;
    }

    // ‚úÖ G√©n√©rer le niveau
    const [minLevel, maxLevel] = selectedEncounter.level_range;
    const level = Math.floor(Math.random() * (maxLevel - minLevel + 1)) + minLevel;

    // ‚úÖ Appliquer modificateurs de la table si pr√©sents
    const shinyModifier = table.encounters.conditions?.shiny_rate_modifier || 1.0;

    // ‚úÖ G√©n√©ration compl√®te du Pok√©mon
    return await this.generateWildPokemonStats(pokemonId, level, shinyModifier);
  }

  // ‚úÖ M√âTHODES ANTI-CHEAT AM√âLIOR√âES

  private checkCooldown(playerId: string): boolean {
    const now = Date.now();
    const lastEncounter = this.playerCooldowns.get(playerId) || 0;
    return (now - lastEncounter) >= this.ENCOUNTER_COOLDOWN;
  }

  private updatePlayerCooldown(playerId: string): void {
    this.playerCooldowns.set(playerId, Date.now());
  }

  private checkRateLimit(playerId: string): boolean {
    const now = Date.now();
    const playerData = this.playerEncounterCount.get(playerId);
    
    if (!playerData) {
      this.playerEncounterCount.set(playerId, { count: 1, timestamp: now });
      return true;
    }

    // Reset compteur si plus d'une minute
    if (now - playerData.timestamp > 60000) {
      this.playerEncounterCount.set(playerId, { count: 1, timestamp: now });
      return true;
    }

    // V√©rifier limite
    if (playerData.count >= this.MAX_ENCOUNTERS_PER_MINUTE) {
      return false;
    }

    return true;
  }

  private updateRateLimit(playerId: string): void {
    const now = Date.now();
    const playerData = this.playerEncounterCount.get(playerId);
    
    if (playerData) {
      playerData.count++;
    } else {
      this.playerEncounterCount.set(playerId, { count: 1, timestamp: now });
    }
  }

  private isValidPosition(x: number, y: number): boolean {
    if (!Number.isInteger(x) || !Number.isInteger(y)) return false;
    if (x < 0 || y < 0) return false;
    if (x > 2000 || y > 2000) return false; // Limite raisonnable
    return true;
  }

  // ‚úÖ M√âTHODES UTILITAIRES EXISTANTES

  private initializePokemonMapping() {
    this.pokemonNameToId.set("Pidgey", 16);
    this.pokemonNameToId.set("Rattata", 19);
    this.pokemonNameToId.set("Caterpie", 10);
    this.pokemonNameToId.set("Weedle", 13);
    this.pokemonNameToId.set("Oddish", 43);
    this.pokemonNameToId.set("Bellsprout", 69);
    this.pokemonNameToId.set("Zubat", 41);
    this.pokemonNameToId.set("Gastly", 92);
    this.pokemonNameToId.set("Pikachu", 25);
    this.pokemonNameToId.set("Axoloto", 194); // Wooper
    this.pokemonNameToId.set("Magikarp", 129);
    this.pokemonNameToId.set("Loupio", 170); // Chinchou
    this.pokemonNameToId.set("Poissirene", 116); // Horsea
  }

// Dans ServerEncounterManager.ts - Ajoutez ce debug dans loadEncounterTable

// Dans ServerEncounterManager.ts - Fix de l'erreur TypeScript ligne 394

async loadEncounterTable(zone: string): Promise<void> {
  try {
    // ‚úÖ DEBUG: Afficher le chemin exact
    const filePath = path.join(__dirname, `../data/encounters/${zone}.json`);
    console.log(`üîç [ServerEncounter] Tentative de chargement: ${zone}`);
    console.log(`üìÅ [ServerEncounter] Chemin complet: ${filePath}`);
    console.log(`üìÇ [ServerEncounter] __dirname: ${__dirname}`);
    
    // ‚úÖ DEBUG: V√©rifier si le fichier existe
    const fs = require('fs');
    const fileExists = fs.existsSync(filePath);
    console.log(`üìÑ [ServerEncounter] Fichier existe: ${fileExists}`);
    
    if (!fileExists) {
      // ‚úÖ DEBUG: Lister le contenu du dossier
      const encountersDir = path.join(__dirname, '../data/encounters');
      console.log(`üìÇ [ServerEncounter] Dossier encounters: ${encountersDir}`);
      
      try {
        const dirExists = fs.existsSync(encountersDir);
        console.log(`üìÅ [ServerEncounter] Dossier existe: ${dirExists}`);
        
        if (dirExists) {
          const files = fs.readdirSync(encountersDir);
          console.log(`üìã [ServerEncounter] Fichiers dans encounters:`, files);
        } else {
          // Essayer le dossier mal orthographi√©
          const badDir = path.join(__dirname, '../data/encouters');
          console.log(`üîç [ServerEncounter] Test dossier 'encouters': ${badDir}`);
          const badDirExists = fs.existsSync(badDir);
          console.log(`üìÅ [ServerEncounter] Dossier 'encouters' existe: ${badDirExists}`);
          
          if (badDirExists) {
            const badFiles = fs.readdirSync(badDir);
            console.log(`üìã [ServerEncounter] Fichiers dans 'encouters':`, badFiles);
          }
        }
      } catch (dirError) {
        console.error(`‚ùå [ServerEncounter] Erreur lecture dossier:`, dirError);
      }
    }
    
    const fileContent = await fs.readFile(filePath, 'utf-8');
    const encounterData: EncounterTable = JSON.parse(fileContent);
    
    this.encounterTables.set(zone, encounterData);
    console.log(`‚úÖ [ServerEncounter] Table ${zone} charg√©e avec ${Object.keys(encounterData.encounters.zones).length} zones`);
  } catch (error) {
    console.warn(`‚ö†Ô∏è [ServerEncounter] Impossible de charger ${zone}:`, error);
    // ‚úÖ FIX: Gestion TypeScript de l'erreur
    const errorMessage = error instanceof Error ? error.message : String(error);
    console.error(`‚ùå [ServerEncounter] Erreur d√©taill√©e:`, errorMessage);
  }
}

  private async generateWildPokemonStats(
    pokemonId: number, 
    level: number,
    shinyModifier: number = 1.0
  ): Promise<WildPokemon> {
    const pokemonData = await getPokemonById(pokemonId);
    if (!pokemonData) {
      throw new Error(`Pok√©mon ${pokemonId} non trouv√©`);
    }

    // ‚úÖ IVs al√©atoires
    const ivs = {
      hp: Math.floor(Math.random() * 32),
      attack: Math.floor(Math.random() * 32),
      defense: Math.floor(Math.random() * 32),
      spAttack: Math.floor(Math.random() * 32),
      spDefense: Math.floor(Math.random() * 32),
      speed: Math.floor(Math.random() * 32)
    };

    // ‚úÖ Genre selon ratios
    const gender = this.generateGender(pokemonData.genderRatio);

    // ‚úÖ Nature al√©atoire
    const natures = [
      "Hardy", "Lonely", "Brave", "Adamant", "Naughty", "Bold", "Docile", 
      "Relaxed", "Impish", "Lax", "Timid", "Hasty", "Serious", "Jolly", 
      "Naive", "Modest", "Mild", "Quiet", "Bashful", "Rash", "Calm", 
      "Gentle", "Sassy", "Careful", "Quirky"
    ];
    const nature = natures[Math.floor(Math.random() * natures.length)];

    // ‚úÖ Shiny avec modificateur
    const baseShinyRate = 1 / 4096;
    const adjustedShinyRate = baseShinyRate * shinyModifier;
    const shiny = Math.random() < adjustedShinyRate;

    // ‚úÖ Moves selon niveau
    const moves = pokemonData.learnset
      .filter(move => move.level <= level)
      .sort((a, b) => b.level - a.level)
      .slice(0, 4)
      .map(move => move.moveId);

    if (moves.length < 4) {
      const level1Moves = pokemonData.learnset
        .filter(move => move.level === 1)
        .map(move => move.moveId);
      
      for (const move of level1Moves) {
        if (moves.length >= 4) break;
        if (!moves.includes(move)) moves.push(move);
      }
    }

    if (moves.length === 0) moves.push("tackle");

    return { pokemonId, level, gender, nature, shiny, moves, ivs };
  }

  private generateGender(genderRatio: { male: number; female: number }): string {
    if (genderRatio.male === 0 && genderRatio.female === 0) return "unknown";
    const maleChance = genderRatio.male / 100;
    return Math.random() < maleChance ? "male" : "female";
  }

  // ‚úÖ API PUBLIQUE POUR WORLDROOM
  
  async checkForEncounter(
    zone: string,
    method: 'grass' | 'fishing',
    encounterRate: number = 0.1,
    timeOfDay: 'day' | 'night' = 'day',
    weather: 'clear' | 'rain' = 'clear',
    zoneId?: string
  ): Promise<WildPokemon | null> {
    // V√©rification du taux de rencontre
    if (Math.random() > encounterRate) {
      return null;
    }

    if (!this.encounterTables.has(zone)) {
      await this.loadEncounterTable(zone);
    }

    const table = this.encounterTables.get(zone);
    if (!table) return null;

    return await this.generateWildEncounterByZone(
      table,
      zoneId || `${zone}_default`,
      method,
      timeOfDay,
      weather
    );
  }

  // ‚úÖ Nettoyage p√©riodique
  cleanupCooldowns(): void {
    const now = Date.now();
    const cutoff = now - (this.ENCOUNTER_COOLDOWN * 10);
    
    for (const [playerId, lastTime] of this.playerCooldowns.entries()) {
      if (lastTime < cutoff) {
        this.playerCooldowns.delete(playerId);
      }
    }

    // Nettoyer aussi le rate limiting
    const rateLimitCutoff = now - 120000; // 2 minutes
    for (const [playerId, data] of this.playerEncounterCount.entries()) {
      if (data.timestamp < rateLimitCutoff) {
        this.playerEncounterCount.delete(playerId);
      }
    }
  }

  // ‚úÖ DEBUG
  debugEncounterTable(zone: string): void {
    const table = this.encounterTables.get(zone);
    if (!table) {
      console.log(`‚ùå Pas de table pour ${zone}`);
      return;
    }

    console.log(`üîç [DEBUG] Table ${zone}:`);
    Object.keys(table.encounters.zones).forEach(zoneId => {
      const zoneData = table.encounters.zones[zoneId];
      console.log(`  üìç Zone: ${zoneId}`);
      
      if (zoneData.grass) {
        const grassKeys = Object.keys(zoneData.grass);
        console.log(`    üåø Herbes: ${grassKeys.join(', ')}`);
      }
      
      if (zoneData.fishing) {
        const fishingKeys = Object.keys(zoneData.fishing);
        console.log(`    üé£ P√™che: ${fishingKeys.join(', ')}`);
      }
    });
  }
}

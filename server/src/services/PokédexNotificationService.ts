// server/src/services/Pok√©dexNotificationService.ts
import { EventEmitter } from 'events';
import { getPokemonById } from '../data/PokemonData';

// ===== TYPES SIMPLES ET S√âCURIS√âS =====

export interface Pok√©dexNotification {
  id: string;
  playerId: string;
  type: 'discovery' | 'capture' | 'shiny' | 'milestone' | 'streak' | 'evolution';
  priority: 'low' | 'medium' | 'high' | 'critical';
  title: string;
  message: string;
  icon: string;
  timestamp: Date;
  read: boolean;
  autoHide: boolean;
  hideDelay: number; // ms
  data?: any;
}

export interface NotificationSettings {
  enabled: boolean;
  discoveries: boolean;
  captures: boolean;
  shinies: boolean;
  milestones: boolean;
  streaks: boolean;
  sounds: boolean;
  animations: boolean;
}

export interface QuickNotificationData {
  pokemonId?: number;
  pokemonName?: string;
  level?: number;
  location?: string;
  isShiny?: boolean;
  count?: number;
  milestone?: string;
}

// ===== TEMPLATES OPTIMIS√âS =====

const NOTIFICATION_TEMPLATES = {
  // D√©couvertes
  first_discovery: {
    priority: 'high' as const,
    title: 'Premi√®re D√©couverte !',
    message: 'Vous avez d√©couvert {pokemonName} pour la premi√®re fois !',
    icon: 'üîç',
    autoHide: true,
    hideDelay: 5000
  },
  
  rare_discovery: {
    priority: 'high' as const,
    title: 'Pok√©mon Rare !',
    message: '{pokemonName} est un Pok√©mon rare ! Tentez de le capturer !',
    icon: '‚≠ê',
    autoHide: true,
    hideDelay: 6000
  },
  
  // Captures
  first_capture: {
    priority: 'high' as const,
    title: 'Premi√®re Capture !',
    message: '{pokemonName} captur√© ! Bienvenue dans votre √©quipe !',
    icon: 'üéØ',
    autoHide: true,
    hideDelay: 5000
  },
  
  normal_capture: {
    priority: 'medium' as const,
    title: 'Capture R√©ussie !',
    message: '{pokemonName} (Niv.{level}) captur√© !',
    icon: '‚ö°',
    autoHide: true,
    hideDelay: 3000
  },
  
  // Shinies
  shiny_found: {
    priority: 'critical' as const,
    title: 'Pok√©mon Shiny !',
    message: '‚ú® Un {pokemonName} shiny appara√Æt ! Ne le laissez pas s\'√©chapper !',
    icon: '‚ú®',
    autoHide: false,
    hideDelay: 10000
  },
  
  shiny_caught: {
    priority: 'critical' as const,
    title: 'Shiny Captur√© !',
    message: 'üåü {pokemonName} shiny captur√© ! Un tr√©sor rare !',
    icon: 'üåü',
    autoHide: true,
    hideDelay: 8000
  },
  
  // Milestones
  milestone_seen: {
    priority: 'high' as const,
    title: '√âtape Atteinte !',
    message: 'üèÜ {count} Pok√©mon d√©couverts ! Continuez l\'exploration !',
    icon: 'üèÜ',
    autoHide: true,
    hideDelay: 5000
  },
  
  milestone_caught: {
    priority: 'high' as const,
    title: '√âtape Capture !',
    message: 'üéñÔ∏è {count} Pok√©mon captur√©s ! Impressionnant !',
    icon: 'üéñÔ∏è',
    autoHide: true,
    hideDelay: 5000
  },
  
  // Streaks
  streak_active: {
    priority: 'medium' as const,
    title: 'S√©rie Active !',
    message: 'üî• {count} jours cons√©cutifs ! Continuez !',
    icon: 'üî•',
    autoHide: true,
    hideDelay: 4000
  },
  
  // √âvolutions
  evolution_new: {
    priority: 'high' as const,
    title: 'Nouvelle Forme !',
    message: 'üåü {pokemonName} d√©couvert par √©volution !',
    icon: 'üåü',
    autoHide: true,
    hideDelay: 5000
  }
};

// ===== SERVICE NOTIFICATIONS OPTIMIS√â =====

export class Pok√©dexNotificationService extends EventEmitter {
  private static instance: Pok√©dexNotificationService;
  
  // File de notifications par joueur (limit√©e)
  private notifications = new Map<string, Pok√©dexNotification[]>();
  private readonly MAX_NOTIFICATIONS = 50; // Par joueur
  
  // Param√®tres par joueur
  private settings = new Map<string, NotificationSettings>();
  
  // Cache anti-spam
  private recentNotifs = new Map<string, Set<string>>();
  private readonly SPAM_WINDOW = 10 * 1000; // 10 secondes
  
  // Statistiques
  private stats = {
    totalSent: 0,
    totalSpam: 0,
    totalErrors: 0
  };
  
  constructor() {
    super();
    this.setupCleanup();
    console.log('üîî [Pok√©dexNotificationService] Service de notifications initialis√©');
  }
  
  // Singleton s√©curis√©
  static getInstance(): Pok√©dexNotificationService {
    if (!Pok√©dexNotificationService.instance) {
      Pok√©dexNotificationService.instance = new Pok√©dexNotificationService();
    }
    return Pok√©dexNotificationService.instance;
  }
  
  // ===== API SIMPLE =====
  
  /**
   * üîç Notification de d√©couverte
   */
  async notifyDiscovery(
    playerId: string,
    data: QuickNotificationData,
    isFirst: boolean = false,
    isRare: boolean = false
  ): Promise<boolean> {
    try {
      if (!this.shouldNotify(playerId, 'discoveries')) {
        return false;
      }
      
      const templateKey = isFirst ? 'first_discovery' : (isRare ? 'rare_discovery' : 'first_discovery');
      
      return await this.createNotification(playerId, 'discovery', templateKey, data);
      
    } catch (error) {
      this.stats.totalErrors++;
      console.error(`‚ùå [Pok√©dexNotificationService] Erreur notifyDiscovery:`, error);
      return false;
    }
  }
  
  /**
   * üéØ Notification de capture
   */
  async notifyCapture(
    playerId: string,
    data: QuickNotificationData,
    isFirst: boolean = false
  ): Promise<boolean> {
    try {
      if (!this.shouldNotify(playerId, 'captures')) {
        return false;
      }
      
      const templateKey = isFirst ? 'first_capture' : 'normal_capture';
      
      return await this.createNotification(playerId, 'capture', templateKey, data);
      
    } catch (error) {
      this.stats.totalErrors++;
      console.error(`‚ùå [Pok√©dexNotificationService] Erreur notifyCapture:`, error);
      return false;
    }
  }
  
  /**
   * ‚ú® Notification shiny
   */
  async notifyShiny(
    playerId: string,
    data: QuickNotificationData,
    action: 'found' | 'caught' = 'found'
  ): Promise<boolean> {
    try {
      if (!this.shouldNotify(playerId, 'shinies')) {
        return false;
      }
      
      const templateKey = action === 'found' ? 'shiny_found' : 'shiny_caught';
      
      return await this.createNotification(playerId, 'shiny', templateKey, data);
      
    } catch (error) {
      this.stats.totalErrors++;
      console.error(`‚ùå [Pok√©dexNotificationService] Erreur notifyShiny:`, error);
      return false;
    }
  }
  
  /**
   * üèÜ Notification de milestone
   */
  async notifyMilestone(
    playerId: string,
    type: 'seen' | 'caught',
    count: number
  ): Promise<boolean> {
    try {
      if (!this.shouldNotify(playerId, 'milestones')) {
        return false;
      }
      
      const templateKey = type === 'seen' ? 'milestone_seen' : 'milestone_caught';
      const data = { count };
      
      return await this.createNotification(playerId, 'milestone', templateKey, data);
      
    } catch (error) {
      this.stats.totalErrors++;
      console.error(`‚ùå [Pok√©dexNotificationService] Erreur notifyMilestone:`, error);
      return false;
    }
  }
  
  /**
   * üî• Notification de streak
   */
  async notifyStreak(
    playerId: string,
    count: number,
    type: string = 'g√©n√©ral'
  ): Promise<boolean> {
    try {
      if (!this.shouldNotify(playerId, 'streaks')) {
        return false;
      }
      
      const data = { count };
      
      return await this.createNotification(playerId, 'streak', 'streak_active', data);
      
    } catch (error) {
      this.stats.totalErrors++;
      console.error(`‚ùå [Pok√©dexNotificationService] Erreur notifyStreak:`, error);
      return false;
    }
  }
  
  /**
   * üåü Notification d'√©volution
   */
  async notifyEvolution(
    playerId: string,
    data: QuickNotificationData
  ): Promise<boolean> {
    try {
      if (!this.shouldNotify(playerId, 'discoveries')) {
        return false;
      }
      
      return await this.createNotification(playerId, 'evolution', 'evolution_new', data);
      
    } catch (error) {
      this.stats.totalErrors++;
      console.error(`‚ùå [Pok√©dexNotificationService] Erreur notifyEvolution:`, error);
      return false;
    }
  }
  
  // ===== GESTION DES NOTIFICATIONS =====
  
  /**
   * R√©cup√®re les notifications d'un joueur
   */
  getNotifications(
    playerId: string,
    options: {
      unreadOnly?: boolean;
      limit?: number;
      types?: string[];
    } = {}
  ): Pok√©dexNotification[] {
    try {
      if (!this.validatePlayerId(playerId)) {
        return [];
      }
      
      const playerNotifs = this.notifications.get(playerId) || [];
      
      let filtered = playerNotifs;
      
      // Filtres
      if (options.unreadOnly) {
        filtered = filtered.filter(n => !n.read);
      }
      
      if (options.types?.length) {
        filtered = filtered.filter(n => options.types!.includes(n.type));
      }
      
      // Tri par priorit√© puis date
      filtered.sort((a, b) => {
        const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
        const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];
        if (priorityDiff !== 0) return priorityDiff;
        
        return b.timestamp.getTime() - a.timestamp.getTime();
      });
      
      // Limite s√©curis√©e
      const limit = Math.min(Math.max(options.limit || 20, 1), 100);
      return filtered.slice(0, limit);
      
    } catch (error) {
      console.error(`‚ùå [Pok√©dexNotificationService] Erreur getNotifications:`, error);
      return [];
    }
  }
  
  /**
   * Marque une notification comme lue
   */
  markAsRead(playerId: string, notificationId: string): boolean {
    try {
      if (!this.validatePlayerId(playerId) || !notificationId) {
        return false;
      }
      
      const playerNotifs = this.notifications.get(playerId) || [];
      const notif = playerNotifs.find(n => n.id === notificationId);
      
      if (notif && !notif.read) {
        notif.read = true;
        this.emit('notificationRead', { playerId, notificationId });
        return true;
      }
      
      return false;
      
    } catch (error) {
      console.error(`‚ùå [Pok√©dexNotificationService] Erreur markAsRead:`, error);
      return false;
    }
  }
  
  /**
   * Marque toutes les notifications comme lues
   */
  markAllAsRead(playerId: string): number {
    try {
      if (!this.validatePlayerId(playerId)) {
        return 0;
      }
      
      const playerNotifs = this.notifications.get(playerId) || [];
      let count = 0;
      
      playerNotifs.forEach(notif => {
        if (!notif.read) {
          notif.read = true;
          count++;
        }
      });
      
      if (count > 0) {
        this.emit('allNotificationsRead', { playerId, count });
      }
      
      return count;
      
    } catch (error) {
      console.error(`‚ùå [Pok√©dexNotificationService] Erreur markAllAsRead:`, error);
      return 0;
    }
  }
  
  /**
   * Supprime une notification
   */
  removeNotification(playerId: string, notificationId: string): boolean {
    try {
      if (!this.validatePlayerId(playerId) || !notificationId) {
        return false;
      }
      
      const playerNotifs = this.notifications.get(playerId) || [];
      const index = playerNotifs.findIndex(n => n.id === notificationId);
      
      if (index !== -1) {
        playerNotifs.splice(index, 1);
        this.emit('notificationRemoved', { playerId, notificationId });
        return true;
      }
      
      return false;
      
    } catch (error) {
      console.error(`‚ùå [Pok√©dexNotificationService] Erreur removeNotification:`, error);
      return false;
    }
  }
  
  // ===== PARAM√àTRES =====
  
  /**
   * Met √† jour les param√®tres d'un joueur
   */
  updateSettings(playerId: string, newSettings: Partial<NotificationSettings>): boolean {
    try {
      if (!this.validatePlayerId(playerId)) {
        return false;
      }
      
      const current = this.getSettings(playerId);
      const updated = { ...current, ...newSettings };
      
      this.settings.set(playerId, updated);
      
      console.log(`‚öôÔ∏è [Pok√©dexNotificationService] Param√®tres mis √† jour pour ${playerId}`);
      return true;
      
    } catch (error) {
      console.error(`‚ùå [Pok√©dexNotificationService] Erreur updateSettings:`, error);
      return false;
    }
  }
  
  /**
   * R√©cup√®re les param√®tres d'un joueur
   */
  getSettings(playerId: string): NotificationSettings {
    return this.settings.get(playerId) || this.getDefaultSettings();
  }
  
  /**
   * Param√®tres par d√©faut
   */
  private getDefaultSettings(): NotificationSettings {
    return {
      enabled: true,
      discoveries: true,
      captures: true,
      shinies: true,
      milestones: true,
      streaks: true,
      sounds: true,
      animations: true
    };
  }
  
  // ===== M√âTHODES PRIV√âES OPTIMIS√âES =====
  
  /**
   * Cr√©e une notification
   */
  private async createNotification(
    playerId: string,
    type: string,
    templateKey: string,
    data: QuickNotificationData
  ): Promise<boolean> {
    try {
      // Validation
      if (!this.validatePlayerId(playerId)) {
        return false;
      }
      
      // Protection anti-spam
      const spamKey = `${type}:${data.pokemonId || 'general'}`;
      if (this.isSpam(playerId, spamKey)) {
        this.stats.totalSpam++;
        return false;
      }
      
      // R√©cup√©rer template
      const template = NOTIFICATION_TEMPLATES[templateKey as keyof typeof NOTIFICATION_TEMPLATES];
      if (!template) {
        console.error(`‚ùå Template ${templateKey} introuvable`);
        return false;
      }
      
      // Enrichir les donn√©es si n√©cessaire
      const enrichedData = await this.enrichNotificationData(data);
      
      // Cr√©er la notification
      const notification: Pok√©dexNotification = {
        id: this.generateId(),
        playerId,
        type: type as any,
        priority: template.priority,
        title: template.title,
        message: this.interpolateMessage(template.message, enrichedData),
        icon: template.icon,
        timestamp: new Date(),
        read: false,
        autoHide: template.autoHide,
        hideDelay: template.hideDelay,
        data: enrichedData
      };
      
      // Ajouter √† la file
      let playerNotifs = this.notifications.get(playerId) || [];
      playerNotifs.unshift(notification); // Plus r√©cent en premier
      
      // Limiter le nombre
      if (playerNotifs.length > this.MAX_NOTIFICATIONS) {
        playerNotifs = playerNotifs.slice(0, this.MAX_NOTIFICATIONS);
      }
      
      this.notifications.set(playerId, playerNotifs);
      
      // Marquer comme envoy√© (anti-spam)
      this.markAsSent(playerId, spamKey);
      
      // Statistiques
      this.stats.totalSent++;
      
      // √âmettre √©v√©nement
      this.emit('notificationCreated', notification);
      
      console.log(`üîî [Pok√©dexNotificationService] ${type} envoy√©e √† ${playerId}: ${notification.title}`);
      
      // Auto-masquage
      if (template.autoHide && template.hideDelay > 0) {
        setTimeout(() => {
          this.markAsRead(playerId, notification.id);
        }, template.hideDelay);
      }
      
      return true;
      
    } catch (error) {
      console.error(`‚ùå [Pok√©dexNotificationService] Erreur createNotification:`, error);
      return false;
    }
  }
  
  /**
   * Enrichit les donn√©es de notification
   */
  private async enrichNotificationData(data: QuickNotificationData): Promise<any> {
    const enriched = { ...data };
    
    // R√©cup√©rer le nom du Pok√©mon si pas fourni
    if (data.pokemonId && !data.pokemonName) {
      try {
        const pokemonData = await getPokemonById(data.pokemonId);
        if (pokemonData) {
          enriched.pokemonName = pokemonData.name;
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Impossible de r√©cup√©rer le nom du Pok√©mon ${data.pokemonId}`);
      }
    }
    
    return enriched;
  }
  
  /**
   * Interpole le message avec les donn√©es
   */
  private interpolateMessage(template: string, data: any): string {
    return template.replace(/\{(\w+)\}/g, (match, key) => {
      return data[key]?.toString() || match;
    });
  }
  
  /**
   * V√©rifie si on doit envoyer une notification
   */
  private shouldNotify(playerId: string, type: keyof NotificationSettings): boolean {
    const settings = this.getSettings(playerId);
    return settings.enabled && settings[type];
  }
  
  /**
   * D√©tection de spam
   */
  private isSpam(playerId: string, key: string): boolean {
    const playerSpam = this.recentNotifs.get(playerId);
    return playerSpam?.has(key) || false;
  }
  
  /**
   * Marque comme envoy√© (anti-spam)
   */
  private markAsSent(playerId: string, key: string): void {
    let playerSpam = this.recentNotifs.get(playerId);
    if (!playerSpam) {
      playerSpam = new Set();
      this.recentNotifs.set(playerId, playerSpam);
    }
    
    playerSpam.add(key);
    
    // Auto-nettoyage
    setTimeout(() => {
      const spam = this.recentNotifs.get(playerId);
      if (spam) {
        spam.delete(key);
        if (spam.size === 0) {
          this.recentNotifs.delete(playerId);
        }
      }
    }, this.SPAM_WINDOW);
  }
  
  /**
   * Validation playerId
   */
  private validatePlayerId(playerId: string): boolean {
    return typeof playerId === 'string' && playerId.length > 0 && playerId.length <= 50;
  }
  
  /**
   * G√©n√®re un ID unique
   */
  private generateId(): string {
    return `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  
  // ===== STATISTIQUES =====
  
  /**
   * R√©cup√®re les statistiques du service
   */
  getStats(playerId?: string): any {
    const global = {
      totalSent: this.stats.totalSent,
      totalSpam: this.stats.totalSpam,
      totalErrors: this.stats.totalErrors,
      spamRate: this.stats.totalSent > 0 ? (this.stats.totalSpam / this.stats.totalSent) * 100 : 0,
      totalPlayers: this.notifications.size,
      cacheSize: this.recentNotifs.size
    };
    
    if (playerId && this.validatePlayerId(playerId)) {
      const playerNotifs = this.notifications.get(playerId) || [];
      return {
        ...global,
        player: {
          total: playerNotifs.length,
          unread: playerNotifs.filter(n => !n.read).length,
          byType: this.getNotificationsByType(playerNotifs),
          settings: this.getSettings(playerId)
        }
      };
    }
    
    return global;
  }
  
  /**
   * Statistiques par type
   */
  private getNotificationsByType(notifications: Pok√©dexNotification[]): Record<string, number> {
    const byType: Record<string, number> = {};
    
    notifications.forEach(notif => {
      byType[notif.type] = (byType[notif.type] || 0) + 1;
    });
    
    return byType;
  }
  
  // ===== NETTOYAGE ET MAINTENANCE =====
  
  /**
   * Configuration du nettoyage automatique
   */
  private setupCleanup(): void {
    // Nettoyage toutes les 15 minutes
    setInterval(() => {
      this.cleanupOldNotifications();
      this.cleanupSpamCache();
    }, 15 * 60 * 1000);
  }
  
  /**
   * Nettoie les anciennes notifications
   */
  private cleanupOldNotifications(): void {
    const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 jours
    const cutoff = new Date(Date.now() - maxAge);
    
    let totalCleaned = 0;
    
    for (const [playerId, notifications] of this.notifications.entries()) {
      const before = notifications.length;
      
      // Garder les notifications r√©centes ou non lues importantes
      const filtered = notifications.filter(notif => 
        notif.timestamp > cutoff || 
        (!notif.read && (notif.priority === 'high' || notif.priority === 'critical'))
      );
      
      if (filtered.length !== before) {
        this.notifications.set(playerId, filtered);
        totalCleaned += before - filtered.length;
      }
      
      // Supprimer les joueurs sans notifications
      if (filtered.length === 0) {
        this.notifications.delete(playerId);
      }
    }
    
    if (totalCleaned > 0) {
      console.log(`üßπ [Pok√©dexNotificationService] ${totalCleaned} notifications anciennes nettoy√©es`);
    }
  }
  
  /**
   * Nettoie le cache anti-spam
   */
  private cleanupSpamCache(): void {
    for (const [playerId, spam] of this.recentNotifs.entries()) {
      if (spam.size === 0) {
        this.recentNotifs.delete(playerId);
      }
    }
  }
  
  /**
   * Nettoyage manuel
   */
  clearPlayerData(playerId: string): boolean {
    try {
      if (!this.validatePlayerId(playerId)) {
        return false;
      }
      
      this.notifications.delete(playerId);
      this.settings.delete(playerId);
      this.recentNotifs.delete(playerId);
      
      console.log(`üóëÔ∏è [Pok√©dexNotificationService] Donn√©es supprim√©es pour ${playerId}`);
      return true;
      
    } catch (error) {
      console.error(`‚ùå [Pok√©dexNotificationService] Erreur clearPlayerData:`, error);
      return false;
    }
  }
  
  /**
   * Reset des statistiques
   */
  resetStats(): void {
    this.stats = {
      totalSent: 0,
      totalSpam: 0,
      totalErrors: 0
    };
    console.log('üìä [Pok√©dexNotificationService] Statistiques remises √† z√©ro');
  }
}

// ===== EXPORT SINGLETON =====
export const pok√©dexNotificationService = Pok√©dexNotificationService.getInstance();
export default pok√©dexNotificationService;

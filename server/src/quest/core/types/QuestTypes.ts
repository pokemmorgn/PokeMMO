// src/quest/core/types/QuestTypes.ts
// Types de base pour le systÃ¨me de quÃªtes modulaire - VERSION Ã‰TENDUE
// âœ… COMPATIBILITÃ‰ 100% avec QuestTypes.ts existant + Extensions futures

// ===== TYPES DE BASE CONSERVÃ‰S =====

/**
 * âœ… CONSERVÃ‰ : Types d'objectifs de base + nouveaux types Ã©tendus
 */
export type QuestObjectiveType = 
  // Types de base (existants)
  | 'collect'     // Ramasser X objets spÃ©cifiques
  | 'defeat'      // Battre X PokÃ©mon/dresseurs
  | 'talk'        // Parler Ã  un NPC spÃ©cifique
  | 'reach'       // Aller Ã  une location/zone
  | 'deliver'     // Porter un objet Ã  un NPC
  
  // Types Ã©tendus (nouveaux)
  | 'catch'       // Capturer X PokÃ©mon
  | 'encounter'   // Rencontrer/voir un PokÃ©mon (pas forcÃ©ment capturer)
  | 'use'         // Utiliser X objets/attaques
  | 'win'         // Gagner combats/concours/arÃ¨nes
  | 'explore'     // Explorer zones/dÃ©couvrir zones cachÃ©es
  
  // Types avancÃ©s (futurs)
  | 'breeding'    // Ã‰levage gÃ©nÃ©tique complexe
  | 'temporal'    // Ã‰vÃ©nements mÃ©tÃ©o/jour-nuit/saisons
  | 'contest'     // Concours beautÃ©/talent/performance
  | 'ecosystem'   // Influence spawns/environnement
  | 'mystery';    // Ã‰nigmes/secrets Ã  Ã©lucider collectivement

/**
 * âœ… CONSERVÃ‰ : Objectif de quÃªte avec extensions
 */
export interface QuestObjective {
  id: string;
  type: QuestObjectiveType;
  description: string;
  target?: string;
  targetName?: string;
  itemId?: string;
  currentAmount: number;
  requiredAmount: number;
  completed: boolean;
  
  // âœ… CONSERVÃ‰ : Dialogue de validation
  validationDialogue?: string[];
  
  // ðŸ†• NOUVEAUX : Conditions avancÃ©es
  conditions?: QuestObjectiveConditions;
  
  // ðŸ†• NOUVEAUX : MÃ©tadonnÃ©es pour extensions
  metadata?: QuestObjectiveMetadata;
}

/**
 * ðŸ†• NOUVEAU : Conditions avancÃ©es pour objectifs
 */
export interface QuestObjectiveConditions {
  // Conditions temporelles
  timeOfDay?: 'morning' | 'afternoon' | 'evening' | 'night';
  weather?: 'sunny' | 'rain' | 'snow' | 'fog' | 'storm';
  season?: 'spring' | 'summer' | 'autumn' | 'winter';
  
  // Conditions de lieu
  location?: string | string[];
  mapId?: string | string[];
  zone?: string;
  
  // Conditions de PokÃ©mon (pour catch/defeat/encounter)
  pokemonLevel?: { min?: number; max?: number };
  pokemonType?: string | string[];
  isShiny?: boolean;
  isWild?: boolean;
  perfectIV?: boolean;
  
  // Conditions de combat
  battleType?: 'wild' | 'trainer' | 'gym' | 'elite4' | 'champion';
  consecutive?: boolean;
  perfectScore?: boolean;
  noDamage?: boolean;
  
  // Conditions d'objet
  itemRarity?: 'common' | 'rare' | 'epic' | 'legendary';
  firstTime?: boolean;
  
  // Conditions de joueur
  playerLevel?: { min?: number; max?: number };
  hasItem?: string | string[];
  hasBadge?: string | string[];
  completedQuest?: string | string[];
}

/**
 * ðŸ†• NOUVEAU : MÃ©tadonnÃ©es pour extensibilitÃ©
 */
export interface QuestObjectiveMetadata {
  // UI/UX
  icon?: string;
  color?: string;
  priority?: number;
  hidden?: boolean;
  
  // SystÃ¨me
  autoValidate?: boolean;
  repeatable?: boolean;
  optional?: boolean;
  
  // Analytics
  category?: string;
  difficulty?: number;
  estimatedTime?: number; // en minutes
  
  // Extensions futures
  [key: string]: any;
}

/**
 * ðŸŒŸ RaretÃ© des rÃ©compenses (types Ã©tendus)
 */
export type RewardRarity = 
  | 'common'     // Gris - RÃ©compenses standard
  | 'uncommon'   // Vert - LÃ©gÃ¨rement meilleures
  | 'rare'       // Bleu - Difficiles Ã  obtenir
  | 'epic'       // Violet - TrÃ¨s rares
  | 'legendary'  // Orange - ExtrÃªmement rares
  | 'mythic'     // Rose - Uniques/Ã©vÃ©nements
  | 'artifact';  // DorÃ© - LÃ©gendaires historiques

/**
 * âœ… CONSERVÃ‰ : Types de rÃ©compenses avec extensions
 */
export type QuestRewardType = 
  // Types de base (existants)
  | 'gold' 
  | 'item' 
  | 'pokemon' 
  | 'experience'
  
  // Types Ã©tendus (nouveaux)
  | 'badge'       // Badge/achievement
  | 'title'       // Titre de joueur
  | 'access'      // AccÃ¨s Ã  zone/fonctionnalitÃ©
  | 'recipe'      // Recette de craft
  | 'move'        // Attaque pour PokÃ©mon
  | 'unlock'      // DÃ©blocage de contenu
  | 'boost'       // Bonus temporaire
  | 'cosmetic';   // Ã‰lÃ©ment cosmÃ©tique

/**
 * âœ… CONSERVÃ‰ : RÃ©compense avec extensions
 */
export interface QuestReward {
  type: QuestRewardType;
  itemId?: string;
  amount?: number;
  pokemonId?: number;
  
  // ðŸ†• NOUVEAUX : Champs Ã©tendus
  badgeId?: string;
  titleId?: string;
  accessId?: string;
  recipeId?: string;
  moveId?: string;
  unlockId?: string;
  boostId?: string;
  cosmeticId?: string;
  
  // ðŸ†• NOUVEAUX : MÃ©tadonnÃ©es (avec RewardRarity complet)
  rarity?: RewardRarity;
  temporary?: boolean;
  duration?: number; // en minutes si temporaire
  description?: string;
  
  // ðŸ†• NOUVEAUX : Conditions d'attribution
  conditions?: {
    levelMin?: number;
    completedWithoutDeath?: boolean;
    perfectScore?: boolean;
    timeLimit?: number;
  };
}

/**
 * âœ… CONSERVÃ‰ : Ã‰tape de quÃªte avec extensions
 */
export interface QuestStep {
  id: string;
  name: string;
  description: string;
  objectives: QuestObjective[];
  rewards?: QuestReward[];
  completed: boolean;
  
  // ðŸ†• NOUVEAUX : MÃ©tadonnÃ©es d'Ã©tape
  type?: QuestStepType;
  skippable?: boolean;
  timeLimit?: number; // en minutes
  
  // ðŸ†• NOUVEAUX : Logique avancÃ©e
  objectiveLogic?: 'AND' | 'OR' | 'SEQUENCE';
  minimumObjectives?: number; // Pour logique OR partielle
  
  // ðŸ†• NOUVEAUX : Ã‰vÃ©nements
  onStart?: QuestStepEvent[];
  onComplete?: QuestStepEvent[];
  onFail?: QuestStepEvent[];
}

/**
 * ðŸ†• NOUVEAU : Types d'Ã©tapes
 */
export type QuestStepType = 
  | 'normal'      // Ã‰tape standard
  | 'tutorial'    // Ã‰tape didactique
  | 'boss'        // Ã‰tape de boss
  | 'puzzle'      // Ã‰tape d'Ã©nigme
  | 'choice'      // Ã‰tape Ã  choix multiples
  | 'timed'       // Ã‰tape chronomÃ©trÃ©e
  | 'stealth'     // Ã‰tape discrÃ¨te
  | 'collection'  // Ã‰tape de collection
  | 'social'      // Ã‰tape multijoueur
  | 'finale';     // Ã‰tape finale

/**
 * ðŸ†• NOUVEAU : Ã‰vÃ©nements d'Ã©tape
 */
export interface QuestStepEvent {
  type: 'spawn' | 'despawn' | 'unlock' | 'lock' | 'trigger' | 'message';
  target: string;
  data?: any;
}

/**
 * âœ… CONSERVÃ‰ : Statuts de quÃªte avec extensions
 */
export type QuestStatus = 
  | 'available'       // âœ… CONSERVÃ‰
  | 'active'          // âœ… CONSERVÃ‰
  | 'readyToComplete' // âœ… CONSERVÃ‰
  | 'completed'       // âœ… CONSERVÃ‰
  | 'failed'          // âœ… CONSERVÃ‰
  
  // ðŸ†• NOUVEAUX statuts
  | 'locked'          // VerrouillÃ©e (prÃ©requis non remplis)
  | 'expired'         // ExpirÃ©e (time limit)
  | 'abandoned'       // AbandonnÃ©e par le joueur
  | 'paused'          // En pause (Ã©vÃ©nement spÃ©cial)
  | 'cooldown';       // En cooldown (repeatable)

/**
 * âœ… CONSERVÃ‰ : QuÃªte principale avec extensions
 */
export interface Quest {
  id: string;
  name: string;
  description: string;
  category: QuestCategory;
  prerequisites?: string[];
  steps: QuestStep[];
  currentStepIndex: number;
  status: QuestStatus;
  startNpcId?: number;
  endNpcId?: number;
  isRepeatable: boolean;
  cooldownHours?: number;
  lastCompletedAt?: Date;
  
  // ðŸ†• NOUVEAUX : MÃ©tadonnÃ©es avancÃ©es
  metadata?: QuestMetadata;
  
  // ðŸ†• NOUVEAUX : Configuration avancÃ©e
  config?: QuestConfiguration;
}

/**
 * ðŸ†• NOUVEAU : CatÃ©gories Ã©tendues
 */
export type QuestCategory = 
  // Categories de base (existantes)
  | 'main'        // âœ… CONSERVÃ‰
  | 'side'        // âœ… CONSERVÃ‰  
  | 'daily'       // âœ… CONSERVÃ‰
  | 'repeatable'  // âœ… CONSERVÃ‰
  
  // Nouvelles catÃ©gories
  | 'tutorial'    // QuÃªtes didactiques
  | 'event'       // Ã‰vÃ©nements temporaires
  | 'guild'       // QuÃªtes de guilde
  | 'pvp'         // QuÃªtes PvP
  | 'exploration' // QuÃªtes d'exploration
  | 'collection'  // QuÃªtes de collection
  | 'challenge'   // DÃ©fis spÃ©ciaux
  | 'seasonal'    // QuÃªtes saisonniÃ¨res
  | 'achievement' // SuccÃ¨s/achievements
  | 'hidden';     // QuÃªtes secrÃ¨tes

/**
 * ðŸ†• NOUVEAU : MÃ©tadonnÃ©es de quÃªte
 */
export interface QuestMetadata {
  // UI/UX
  icon?: string;
  color?: string;
  banner?: string;
  priority?: number;
  featured?: boolean;
  
  // Gameplay
  difficulty?: 'very_easy' | 'easy' | 'medium' | 'hard' | 'very_hard';
  estimatedTime?: number; // en minutes
  playerCount?: { min: number; max: number };
  
  // Story/Lore
  chapter?: string;
  storyline?: string;
  characters?: string[];
  locations?: string[];
  
  // SystÃ¨me
  version?: string;
  createdAt?: Date;
  updatedAt?: Date;
  createdBy?: string;
  
  // Analytics
  tags?: string[];
  keywords?: string[];
  completionRate?: number;
  averageTime?: number;
}

/**
 * ðŸ†• NOUVEAU : Configuration de quÃªte
 */
export interface QuestConfiguration {
  // Comportement
  autoStart?: boolean;
  autoComplete?: boolean; // âœ… CONSERVÃ‰ du type existant
  abandonable?: boolean;
  shareable?: boolean;
  
  // Limites
  timeLimit?: number; // en minutes
  maxAttempts?: number;
  playerLimit?: number;
  
  // Conditions
  levelRequirement?: { min?: number; max?: number };
  regionLocked?: string[];
  seasonLocked?: string[];
  
  // Ã‰vÃ©nements
  onStart?: QuestEvent[];
  onComplete?: QuestEvent[];
  onFail?: QuestEvent[];
  onAbandon?: QuestEvent[];
}

/**
 * ðŸ†• NOUVEAU : Ã‰vÃ©nements de quÃªte
 */
export interface QuestEvent {
  type: 'spawn_npc' | 'unlock_area' | 'trigger_cutscene' | 'send_message' | 'give_item' | 'start_quest';
  target?: string;
  data?: any;
  delay?: number; // en secondes
  conditions?: any;
}

/**
 * âœ… CONSERVÃ‰ : Progression du joueur avec extensions  
 */
export interface PlayerQuestProgress {
  questId: string;
  currentStepIndex: number;
  objectives: Map<string, {
    currentAmount: number;
    completed: boolean;
    
    // ðŸ†• NOUVEAUX : DÃ©tails de progression
    startedAt?: Date;
    completedAt?: Date;
    attempts?: number;
    bestScore?: number;
  }>;
  status: QuestStatus; // âœ… CONSERVÃ‰ avec nouveaux statuts
  startedAt: Date;
  completedAt?: Date;
  
  // ðŸ†• NOUVEAUX : MÃ©tadonnÃ©es de progression
  metadata?: PlayerQuestMetadata;
}

/**
 * ðŸ†• NOUVEAU : MÃ©tadonnÃ©es de progression joueur
 */
export interface PlayerQuestMetadata {
  // Performance
  totalTime?: number; // en minutes
  deaths?: number;
  score?: number;
  rating?: number;
  
  // Choix du joueur
  choices?: Record<string, any>;
  paths?: string[];
  
  // Social
  helpers?: string[]; // Autres joueurs qui ont aidÃ©
  sharedWith?: string[];
  
  // Techniques
  version?: string;
  clientVersion?: string;
  savePoints?: Array<{
    stepIndex: number;
    timestamp: Date;
    data?: any;
  }>;
}

/**
 * âœ… CONSERVÃ‰ : Ã‰vÃ©nement de progression avec extensions
 */
export interface QuestProgressEvent {
  type: QuestObjectiveType; // âœ… CONSERVÃ‰ mais utilise le type Ã©tendu
  targetId?: string;
  amount?: number;
  location?: { x: number; y: number; map: string };
  pokemonId?: number;
  npcId?: number;
  questId?: string; // âœ… CONSERVÃ‰ pour completion manuelle
  
  // ðŸ†• NOUVEAUX : DonnÃ©es Ã©tendues
  metadata?: QuestEventMetadata;
  
  // ðŸ†• NOUVEAUX : Contexte Ã©tendu
  context?: QuestEventContext;
}

/**
 * ðŸ†• NOUVEAU : MÃ©tadonnÃ©es d'Ã©vÃ©nement
 */
export interface QuestEventMetadata {
  // Timing
  timestamp?: Date;
  gameTime?: number;
  
  // QualitÃ©
  quality?: 'perfect' | 'good' | 'normal' | 'poor';
  score?: number;
  bonus?: boolean;
  
  // Contexte
  weather?: string;
  timeOfDay?: string;
  season?: string;
  
  // Social
  witnesses?: string[];
  assisted?: boolean;
  
  // Technique
  clientId?: string;
  sessionId?: string;
}

/**
 * ðŸ†• NOUVEAU : Contexte d'Ã©vÃ©nement
 */
export interface QuestEventContext {
  // Joueur
  playerLevel?: number;
  playerStats?: any;
  
  // Monde
  worldState?: any;
  activeEvents?: string[];
  
  // Combat (si applicable)
  battleState?: any;
  pokemonUsed?: any;
  movesUsed?: string[];
  
  // Social
  partyMembers?: string[];
  guildId?: string;
  
  // Validation
  validated?: boolean;
  validatedBy?: string;
  validationScore?: number;
}

/**
 * âœ… CONSERVÃ‰ : DÃ©finition de quÃªte avec extensions massives
 */
export interface QuestDefinition {
  id: string;
  name: string;
  description: string;
  category: QuestCategory; // âœ… CONSERVÃ‰ mais type Ã©tendu
  prerequisites?: string[];
  startNpcId?: number;
  endNpcId?: number;
  isRepeatable: boolean;
  cooldownHours?: number;
  autoComplete?: boolean; // âœ… CONSERVÃ‰
  
  // âœ… CONSERVÃ‰ : Dialogues spÃ©cifiques
  dialogues?: {
    questOffer?: string[];
    questInProgress?: string[];
    questComplete?: string[];
    
    // ðŸ†• NOUVEAUX : Dialogues Ã©tendus
    questFailed?: string[];
    questAbandoned?: string[];
    questUnavailable?: string[];
    stepComplete?: Record<string, string[]>; // Par Ã©tape
    objectiveComplete?: Record<string, string[]>; // Par objectif
  };
  
  steps: Array<{
    id: string;
    name: string;
    description: string;
    objectives: Array<{
      id: string;
      type: QuestObjectiveType; // âœ… Type Ã©tendu
      description: string;
      target?: string;
      targetName?: string;
      itemId?: string;
      requiredAmount: number;
      validationDialogue?: string[]; // âœ… CONSERVÃ‰
      
      // ðŸ†• NOUVEAUX : Tous les champs Ã©tendus
      conditions?: QuestObjectiveConditions;
      metadata?: QuestObjectiveMetadata;
    }>;
    rewards?: QuestReward[]; // âœ… CONSERVÃ‰ avec type Ã©tendu
    
    // ðŸ†• NOUVEAUX : Champs d'Ã©tape Ã©tendus
    type?: QuestStepType;
    skippable?: boolean;
    timeLimit?: number;
    objectiveLogic?: 'AND' | 'OR' | 'SEQUENCE';
    minimumObjectives?: number;
    onStart?: QuestStepEvent[];
    onComplete?: QuestStepEvent[];
    onFail?: QuestStepEvent[];
  }>;
  
  // ðŸ†• NOUVEAUX : MÃ©tadonnÃ©es et configuration complÃ¨tes
  metadata?: QuestMetadata;
  config?: QuestConfiguration;
}

// ===== TYPES UTILITAIRES =====

/**
 * ðŸ†• NOUVEAU : RÃ©sultat de validation de quÃªte
 */
export interface QuestValidationResult {
  valid: boolean;
  errors?: string[];
  warnings?: string[];
  score?: number;
  recommendations?: string[];
}

/**
 * ðŸ†• NOUVEAU : RÃ©sultat de recherche de quÃªte
 */
export interface QuestSearchResult {
  quests: QuestDefinition[];
  total: number;
  filters: QuestSearchFilters;
  sorting: QuestSearchSorting;
}

/**
 * ðŸ†• NOUVEAU : Filtres de recherche
 */
export interface QuestSearchFilters {
  category?: QuestCategory[];
  difficulty?: string[];
  tags?: string[];
  minLevel?: number;
  maxLevel?: number;
  estimatedTime?: { min?: number; max?: number };
  status?: QuestStatus[];
  featured?: boolean;
}

/**
 * ðŸ†• NOUVEAU : Tri de recherche
 */
export interface QuestSearchSorting {
  field: 'name' | 'difficulty' | 'estimatedTime' | 'priority' | 'createdAt' | 'completionRate';
  order: 'asc' | 'desc';
}

/**
 * ðŸ†• NOUVEAU : Statistiques de quÃªte
 */
export interface QuestStatistics {
  questId: string;
  totalAttempts: number;
  totalCompletions: number;
  completionRate: number;
  averageTime: number;
  averageScore: number;
  mostFailedObjective?: string;
  popularChoices?: Record<string, number>;
  ratingDistribution: Record<number, number>;
}

// ===== TYPES POUR SYSTÃˆME MODULAIRE =====

/**
 * ðŸ†• NOUVEAU : Configuration du systÃ¨me de quÃªtes
 */
export interface QuestSystemConfig {
  // Modules activÃ©s
  enabledModules: string[];
  
  // Limites systÃ¨me
  maxActiveQuests: number;
  maxDailyQuests: number;
  maxCompletedQuests: number;
  
  // Performance
  cacheEnabled: boolean;
  cacheTTL: number;
  batchSize: number;
  
  // Validation
  strictValidation: boolean;
  allowInvalidQuests: boolean;
  validateOnSave: boolean;
  
  // Notifications
  enableNotifications: boolean;
  notificationChannels: string[];
  
  // Analytics
  enableAnalytics: boolean;
  trackPlayerChoices: boolean;
  trackPerformance: boolean;
}

/**
 * ðŸ†• NOUVEAU : Informations de module
 */
export interface QuestModuleInfo {
  id: string;
  name: string;
  version: string;
  description: string;
  dependencies: string[];
  supportedTypes: QuestObjectiveType[];
  config?: any;
}

// ===== EXPORTS POUR COMPATIBILITÃ‰ =====

// âœ… IMPORTANT : RÃ©exports pour compatibilitÃ© totale avec l'ancien QuestTypes.ts
export type {
  QuestObjective as LegacyQuestObjective,
  QuestReward as LegacyQuestReward,
  QuestStep as LegacyQuestStep,
  Quest as LegacyQuest,
  PlayerQuestProgress as LegacyPlayerQuestProgress,
  QuestProgressEvent as LegacyQuestProgressEvent,
  QuestDefinition as LegacyQuestDefinition
};

// Note: QuestObjectiveType, QuestRewardType, QuestCategory, RewardRarity 
// sont dÃ©jÃ  exportÃ©s dans leurs dÃ©clarations respectives ci-dessus

// server/src/battle/trainers/index.ts
// üéØ EXPORT CENTRAL MODULE COMBATS DRESSEURS + EXEMPLE D'UTILISATION

// === EXPORTS PRINCIPAUX ===

// Types et interfaces
export * from '../types/TrainerBattleTypes';

// Manager principal
export { TrainerTeamManager } from '../managers/TrainerTeamManager';
export type { BattleTeamState, SwitchValidation, TeamAnalysis } from '../managers/TrainerTeamManager';

// Helpers et utilities
export { TrainerBattleHelpers } from '../helpers/TrainerBattleHelpers';

// === EXEMPLE D'UTILISATION COMPL√àTE ===

import { TrainerTeamManager } from '../managers/TrainerTeamManager';
import { 
  TrainerData,
  TrainerBattleConfig,
  createTrainerBattleConfig
} from '../types/TrainerBattleTypes';
import { 
  createSimpleTrainer, 
  createGymLeader
} from '../helpers/TrainerBattleHelpers';

/**
 * üéÆ EXEMPLE COMPLET D'UTILISATION DU SYST√àME DRESSEURS
 */
async function exampleTrainerBattleSetup(): Promise<{
  playerTeamManager: TrainerTeamManager;
  trainerData: TrainerData;
  battleConfig: TrainerBattleConfig;
  setupSuccess: boolean;
}> {
  
  console.log('üéØ [Exemple] D√©monstration du syst√®me de combat dresseurs...');
  
  try {
    // === 1. SETUP √âQUIPE JOUEUR ===
    console.log('üë§ [Exemple] Configuration √©quipe joueur...');
    
    const playerTeamManager = new TrainerTeamManager('test_player');
    
    // Pour l'exemple, on cr√©e une √©quipe directement
    const playerPokemon = [
      {
        id: 25, combatId: 'player_pikachu', name: 'Pikachu', level: 20,
        currentHp: 70, maxHp: 70, attack: 55, defense: 40, specialAttack: 50,
        specialDefense: 50, speed: 90, types: ['electric'], moves: ['thunderbolt', 'quick_attack'],
        status: 'normal', gender: 'male', shiny: false, isWild: false
      },
      {
        id: 4, combatId: 'player_charmander', name: 'Charmander', level: 18,
        currentHp: 65, maxHp: 65, attack: 52, defense: 43, specialAttack: 60,
        specialDefense: 50, speed: 65, types: ['fire'], moves: ['ember', 'scratch'],
        status: 'normal', gender: 'male', shiny: false, isWild: false
      }
    ];
    
    playerTeamManager.initializeWithPokemon(playerPokemon);
    console.log(`‚úÖ [Exemple] √âquipe joueur: ${playerPokemon.length} Pok√©mon`);
    
    // === 2. CREATION DRESSEUR ADVERSAIRE ===
    console.log('ü§ñ [Exemple] Cr√©ation dresseur adversaire...');
    
    const trainerData = createGymLeader(
      'gym_brock',
      'Pierre', 
      'rock',
      2, // 2 Pok√©mon
      22  // Niveau moyen
    );
    
    console.log(`‚úÖ [Exemple] Dresseur cr√©√©: ${trainerData.name} (${trainerData.trainerClass})`);
    console.log(`    Sp√©cialit√©: Type ${trainerData.pokemon[0].types[0]}`);
    console.log(`    √âquipe: ${trainerData.pokemon.length} Pok√©mon niveau ${trainerData.level}`);
    
    // === 3. CONFIGURATION COMBAT ===
    console.log('‚öîÔ∏è [Exemple] Configuration du combat dresseur...');
    
    const battleConfig = createTrainerBattleConfig(
      'test_session_123',
      'TestPlayer',
      playerPokemon,
      trainerData
    );
    
    console.log(`‚úÖ [Exemple] Combat configur√©: ${battleConfig.type}`);
    console.log(`    Joueur: ${battleConfig.player1.name}`);
    console.log(`    Dresseur: ${battleConfig.trainer.name}`);
    console.log(`    R√®gles: Changements ${battleConfig.rules.allowSwitching ? 'autoris√©s' : 'interdits'}`);
    
    // === 4. ANALYSE √âQUIPES ===
    console.log('üìä [Exemple] Analyse des √©quipes...');
    
    const playerAnalysis = playerTeamManager.analyzeTeam();
    console.log(`    √âquipe joueur - ${playerAnalysis.alivePokemon}/${playerAnalysis.totalPokemon} vivants`);
    console.log(`    Plus fort: ${playerAnalysis.strongestPokemon?.name} (ATK: ${playerAnalysis.strongestPokemon?.attack})`);
    console.log(`    Plus rapide: ${playerAnalysis.fastestPokemon?.name} (SPE: ${playerAnalysis.fastestPokemon?.speed})`);
    
    // === 5. SIMULATION CHANGEMENT ===
    console.log('üîÑ [Exemple] Test syst√®me de changement...');
    
    const activePokemon = playerTeamManager.getActivePokemon();
    console.log(`    Pok√©mon actif: ${activePokemon?.name}`);
    
    const switchValidation = playerTeamManager.validateSwitch(0, 1, 1, false);
    console.log(`    Changement 0‚Üí1 valide: ${switchValidation.isValid}`);
    if (switchValidation.isValid) {
      const switchSuccess = playerTeamManager.executeSwitch(0, 1, 1, false);
      console.log(`    Changement ex√©cut√©: ${switchSuccess}`);
      const newActive = playerTeamManager.getActivePokemon();
      console.log(`    Nouveau actif: ${newActive?.name}`);
    }
    
    // === 6. INT√âGRATION IA (PREVIEW) ===
    console.log('üß† [Exemple] Aper√ßu int√©gration IA...');
    
    console.log(`    Profil IA dresseur: ${trainerData.aiProfile.difficulty}`);
    console.log(`    Strat√©gies: ${trainerData.aiProfile.strategies.length}`);
    console.log(`    Aggressivit√©: ${trainerData.aiProfile.aggressiveness}/100`);
    console.log(`    Intelligence: ${trainerData.aiProfile.intelligence}/100`);
    console.log(`    M√©moire: ${trainerData.aiProfile.memory ? 'Activ√©e' : 'D√©sactiv√©e'}`);
    
    // === 7. R√âCOMPENSES PREVIEW ===
    console.log('üéÅ [Exemple] Aper√ßu syst√®me de r√©compenses...');
    
    console.log(`    Argent de base: ${trainerData.rewards.baseMoney}`);
    console.log(`    Multiplicateur: x${trainerData.rewards.moneyMultiplier}`);
    console.log(`    EXP de base: ${trainerData.rewards.baseExp}`);
    console.log(`    Objets possibles: ${trainerData.rewards.items?.length || 0}`);
    
    console.log('üéâ [Exemple] Configuration compl√®te r√©ussie !');
    
    return {
      playerTeamManager,
      trainerData,
      battleConfig,
      setupSuccess: true
    };
    
  } catch (error) {
    console.error('‚ùå [Exemple] Erreur configuration:', error);
    
    return {
      playerTeamManager: new TrainerTeamManager('error'),
      trainerData: createSimpleTrainer('error', 'Error', [{ id: 1, level: 1 }]),
      battleConfig: {} as TrainerBattleConfig,
      setupSuccess: false
    };
  }
}

/**
 * üß™ EXEMPLE DE TEST RAPIDE
 */
async function quickTrainerBattleTest(): Promise<boolean> {
  console.log('üß™ [Test] Test rapide des modules dresseurs...');
  
  try {
    const { setupSuccess } = await exampleTrainerBattleSetup();
    
    if (setupSuccess) {
      console.log('‚úÖ [Test] Tous les modules fonctionnent correctement !');
      console.log('üöÄ [Test] Syst√®me pr√™t pour int√©gration avec BattleEngine');
      return true;
    } else {
      console.log('‚ùå [Test] √âchec du test de configuration');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå [Test] Erreur durant le test:', error);
    return false;
  }
}

console.log('üìö [Module] Syst√®me combats dresseurs charg√© et pr√™t !');
console.log('üéØ [Module] Prochaine √©tape: Int√©gration BattleEngine + SwitchManager');

// === EXPORT DE L'EXEMPLE POUR TESTS ===
export { exampleTrainerBattleSetup, quickTrainerBattleTest };

// server/src/battle/BattleEngine.ts
// √âTAPE 2.5 : Ajout du BattleEndManager

import { TurnManager } from './modules/TurnManager';
import { ActionProcessor } from './modules/ActionProcessor';
import { AIPlayer } from './modules/AIPlayer';
import { BattleEndManager } from './modules/BattleEndManager'; // ‚úÖ NOUVEAU
import { BattleConfig, BattleGameState, BattleResult, BattleAction, BattleModule } from './types/BattleTypes';

/**
 * BATTLE ENGINE - Chef d'orchestre du combat
 * 
 * Responsabilit√©s :
 * - Coordonner les modules
 * - Maintenir l'√©tat du jeu
 * - API stable pour BattleRoom
 * 
 * Extensibilit√© :
 * - Modules ajout√©s progressivement
 * - Interface stable
 * - Syst√®me d'√©v√©nements
 */
export class BattleEngine {
  
  // === √âTAT DU JEU ===
  private gameState: BattleGameState;
  private isInitialized: boolean = false;
  
  // === MODULES CORE ===
  private turnManager: TurnManager;
  private actionProcessor: ActionProcessor;
  private aiPlayer: AIPlayer;
  private battleEndManager: BattleEndManager; // ‚úÖ NOUVEAU
  
  // === MODULES OPTIONNELS (ajout√©s par √©tapes) ===
  private modules: Map<string, BattleModule> = new Map();
  private eventListeners: Map<string, Function[]> = new Map();
  
  constructor() {
    console.log('üéØ [BattleEngine] Initialisation...');
    
    // Modules obligatoires
    this.turnManager = new TurnManager();
    this.actionProcessor = new ActionProcessor();
    this.aiPlayer = new AIPlayer();
    this.battleEndManager = new BattleEndManager(); // ‚úÖ NOUVEAU
    
    // √âtat initial vide
    this.gameState = this.createEmptyState();
    
    console.log('‚úÖ [BattleEngine] Pr√™t pour le combat avec BattleEndManager');
  }
  
  // === API PRINCIPALE (STABLE) ===
  
  /**
   * D√©marre un nouveau combat
   */
  startBattle(config: BattleConfig): BattleResult {
    console.log(`üöÄ [BattleEngine] D√©marrage combat ${config.type}`);
    
    try {
      // 1. Valider la configuration
      this.validateConfig(config);
      
      // 2. Initialiser l'√©tat du jeu
      this.gameState = this.initializeGameState(config);
      
      // 3. Configurer les modules
      this.turnManager.initialize(this.gameState);
      this.actionProcessor.initialize(this.gameState);
      this.aiPlayer.initialize(this.gameState);
      this.battleEndManager.initialize(this.gameState); // ‚úÖ NOUVEAU
      
      // 4. D√©terminer qui commence
      const firstPlayer = this.turnManager.determineFirstPlayer(
        this.gameState.player1.pokemon,
        this.gameState.player2.pokemon
      );
      this.gameState.currentTurn = firstPlayer;
      
      this.isInitialized = true;
      
      // 5. √âmettre √©v√©nement de d√©but
      this.emit('battleStart', {
        gameState: this.gameState,
        firstPlayer: firstPlayer
      });
      
      console.log(`‚úÖ [BattleEngine] Combat d√©marr√© - Premier joueur: ${firstPlayer}`);
      
      return {
        success: true,
        gameState: this.gameState,
        events: [`Combat d√©marr√© ! ${this.gameState.player1.pokemon.name} VS ${this.gameState.player2.pokemon.name}`]
      };
      
    } catch (error) {
      console.error(`‚ùå [BattleEngine] Erreur d√©marrage:`, error);
      
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue',
        gameState: this.gameState,
        events: []
      };
    }
  }
  
  /**
   * Traite une action
   */
  processAction(action: BattleAction): BattleResult {
    console.log(`üéÆ [BattleEngine] Action re√ßue: ${action.type} par ${action.playerId}`);
    
    if (!this.isInitialized) {
      return {
        success: false,
        error: 'Combat non initialis√©',
        gameState: this.gameState,
        events: []
      };
    }
    
    try {
      // V√©rifier si le joueur peut agir
      if (!this.turnManager.canPlayerAct(action.playerId)) {
        return {
          success: false,
          error: 'Ce n\'est pas votre tour',
          gameState: this.gameState,
          events: []
        };
      }
      
      // Traiter l'action via ActionProcessor
      const result = this.actionProcessor.processAction(action);
      
      if (result.success) {
        console.log(`‚úÖ [BattleEngine] Action trait√©e avec succ√®s`);
        
        // ‚úÖ NOUVEAU: V√©rifier fin de combat AVANT de changer de tour
        const battleEndCheck = this.checkBattleEnd();
        
        if (battleEndCheck.isEnded) {
          console.log(`üèÅ [BattleEngine] Fin de combat d√©tect√©e`);
          
          // Marquer le combat comme termin√©
          this.gameState.isEnded = true;
          this.gameState.winner = battleEndCheck.winner;
          this.gameState.phase = 'ended';
          
          // ‚úÖ NOUVEAU: Sauvegarder les Pok√©mon via BattleEndManager
          this.savePokemonAfterBattle(); // Asynchrone mais pas bloquant
          
          // √âmettre √©v√©nement de fin
          this.emit('battleEnd', {
            winner: battleEndCheck.winner,
            reason: battleEndCheck.reason,
            gameState: this.gameState
          });
          
          // Retourner r√©sultat avec fin de combat
          return {
            success: true,
            gameState: this.gameState,
            events: [...result.events, battleEndCheck.reason],
            data: {
              ...result.data,
              battleEnded: true,
              winner: battleEndCheck.winner
            }
          };
        }
        
        // Changer de tour seulement si le combat continue
        const nextPlayer = this.turnManager.nextTurn();
        console.log(`üîÑ [BattleEngine] Tour suivant: ${nextPlayer}`);
        
        // √âmettre √©v√©nement de changement de tour
        this.emit('turnChanged', {
          newPlayer: nextPlayer,
          turnNumber: this.turnManager.getCurrentTurnNumber()
        });
        
        // √âmettre √©v√©nement d'action
        this.emit('actionProcessed', {
          action: action,
          result: result,
          nextPlayer: nextPlayer
        });
      } else {
        console.log(`‚ùå [BattleEngine] √âchec action: ${result.error}`);
      }
      
      return result;
      
    } catch (error) {
      console.error(`‚ùå [BattleEngine] Erreur traitement action:`, error);
      
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue',
        gameState: this.gameState,
        events: []
      };
    }
  }
  
  /**
   * G√©n√®re une action IA
   */
  generateAIAction(): BattleAction | null {
    console.log('ü§ñ [BattleEngine] G√©n√©ration action IA');
    
    if (!this.isInitialized) {
      console.error('‚ùå [BattleEngine] Combat non initialis√© pour IA');
      return null;
    }
    
    // V√©rifier que c'est bien le tour de l'IA
    const currentPlayer = this.turnManager.getCurrentPlayer();
    if (currentPlayer !== 'player2') {
      console.error(`‚ùå [BattleEngine] Pas le tour de l'IA (tour actuel: ${currentPlayer})`);
      return null;
    }
    
    // V√©rifier que le combat n'est pas termin√©
    if (this.gameState.isEnded) {
      console.log('‚èπÔ∏è [BattleEngine] Combat termin√©, IA ne joue pas');
      return null;
    }
    
    // G√©n√©rer l'action via AIPlayer
    const aiAction = this.aiPlayer.generateAction();
    
    if (aiAction) {
      console.log(`ü§ñ [BattleEngine] Action IA g√©n√©r√©e: ${aiAction.type}`);
    } else {
      console.error('‚ùå [BattleEngine] √âchec g√©n√©ration action IA');
    }
    
    return aiAction;
  }
  
  // === ‚úÖ NOUVEAU: V√âRIFICATION FIN DE COMBAT ===
  
  /**
   * V√©rifie si le combat est termin√©
   */
  private checkBattleEnd(): { isEnded: boolean; winner: 'player1' | 'player2' | null; reason: string } {
    if (!this.gameState) {
      return { isEnded: false, winner: null, reason: '' };
    }
    
    const player1Pokemon = this.gameState.player1.pokemon;
    const player2Pokemon = this.gameState.player2.pokemon;
    
    if (!player1Pokemon || !player2Pokemon) {
      return { isEnded: false, winner: null, reason: '' };
    }
    
    // V√©rifier si un Pok√©mon est K.O.
    const player1KO = player1Pokemon.currentHp <= 0;
    const player2KO = player2Pokemon.currentHp <= 0;
    
    if (player1KO && player2KO) {
      return {
        isEnded: true,
        winner: null,
        reason: 'Match nul ! Les deux Pok√©mon sont K.O.'
      };
    }
    
    if (player1KO) {
      return {
        isEnded: true,
        winner: 'player2',
        reason: `${player1Pokemon.name} est K.O. ! ${this.gameState.player2.name} gagne !`
      };
    }
    
    if (player2KO) {
      return {
        isEnded: true,
        winner: 'player1',
        reason: `${player2Pokemon.name} est K.O. ! ${this.gameState.player1.name} gagne !`
      };
    }
    
    // TODO: Autres conditions de fin (fuite, capture, etc.)
    
    return { isEnded: false, winner: null, reason: '' };
  }
  
  // === ‚úÖ NOUVEAU: SAUVEGARDE POK√âMON ===
  
  /**
   * Sauvegarde les Pok√©mon apr√®s combat (asynchrone)
   */
  private async savePokemonAfterBattle(): Promise<void> {
    console.log('üíæ [BattleEngine] D√©marrage sauvegarde post-combat...');
    
    try {
      const result = await this.battleEndManager.savePokemonAfterBattle();
      
      if (result.success) {
        console.log('‚úÖ [BattleEngine] Pok√©mon sauvegard√©s avec succ√®s');
        
        // √âmettre √©v√©nement de sauvegarde
        this.emit('pokemonSaved', {
          events: result.events,
          data: result.data
        });
      } else {
        console.error(`‚ùå [BattleEngine] Erreur sauvegarde: ${result.error}`);
        
        // √âmettre √©v√©nement d'erreur
        this.emit('saveError', {
          error: result.error
        });
      }
      
    } catch (error) {
      console.error(`‚ùå [BattleEngine] Erreur critique sauvegarde:`, error);
    }
  }
  
  /**
   * R√©cup√®re le d√©lai de r√©flexion de l'IA
   */
  getAIThinkingDelay(): number {
    return this.aiPlayer.getThinkingDelay();
  }
  
  /**
   * R√©cup√®re l'√©tat actuel du jeu
   */
  getCurrentState(): BattleGameState {
    return { ...this.gameState }; // Copie pour √©viter mutations
  }
  
  // === SYST√àME D'EXTENSION ===
  
  /**
   * Ajoute un module au moteur
   */
  addModule(name: string, module: BattleModule): void {
    console.log(`üîß [BattleEngine] Ajout module: ${name}`);
    
    this.modules.set(name, module);
    module.initialize(this);
    
    console.log(`‚úÖ [BattleEngine] Module ${name} ajout√©`);
  }
  
  /**
   * Syst√®me d'√©v√©nements
   */
  on(event: string, listener: Function): void {
    if (!this.eventListeners.has(event)) {
      this.eventListeners.set(event, []);
    }
    this.eventListeners.get(event)!.push(listener);
  }
  
  emit(event: string, data: any): void {
    const listeners = this.eventListeners.get(event) || [];
    listeners.forEach(listener => {
      try {
        listener(data);
      } catch (error) {
        console.error(`‚ùå [BattleEngine] Erreur listener ${event}:`, error);
      }
    });
  }
  
  // === M√âTHODES PRIV√âES ===
  
  private createEmptyState(): BattleGameState {
    return {
      battleId: '',
      type: 'wild',
      phase: 'waiting',
      turnNumber: 0,
      currentTurn: 'player1',
      player1: { sessionId: '', name: '', pokemon: null },
      player2: { sessionId: '', name: '', pokemon: null },
      isEnded: false,
      winner: null
    };
  }
  
  private validateConfig(config: BattleConfig): void {
    if (!config.player1?.name || !config.player1?.pokemon) {
      throw new Error('Configuration joueur 1 invalide');
    }
    
    if (!config.opponent?.pokemon) {
      throw new Error('Configuration adversaire invalide');
    }
    
    if (!['wild', 'trainer', 'pvp'].includes(config.type)) {
      throw new Error('Type de combat invalide');
    }
  }
  
  private initializeGameState(config: BattleConfig): BattleGameState {
    return {
      battleId: `battle_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type: config.type,
      phase: 'battle',
      turnNumber: 1,
      currentTurn: 'player1', // D√©termin√© plus tard
      player1: {
        sessionId: config.player1.sessionId,
        name: config.player1.name,
        pokemon: { ...config.player1.pokemon }
      },
      player2: {
        sessionId: config.opponent.sessionId || 'ai',
        name: config.opponent.name || 'Pok√©mon Sauvage',
        pokemon: { ...config.opponent.pokemon }
      },
      isEnded: false,
      winner: null
    };
  }
}

export default BattleEngine;

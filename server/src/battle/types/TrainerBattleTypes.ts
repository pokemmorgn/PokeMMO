// server/src/battle/types/TrainerBattleTypes.ts
// ðŸ”§ CORRECTION COMPATIBILITÃ‰ AVEC NOUVEAUX TYPES UNIVERSELS

import { 
  BattleType, 
  BattlePhase, 
  PlayerRole, 
  Pokemon, 
  BattleConfig, 
  BattleGameState, 
  BattleAction, 
  BattleResult,
  InternalBattlePhase,
  // ðŸ†• IMPORT NOUVEAUX TYPES UNIVERSELS
  PokemonTeam,           // Remplace TrainerPokemonTeam
  TeamConfiguration,     // Remplace TrainerBattleRules partiellement
  SwitchAction,          // Maintenant universel
  createPokemonTeam,     // Helper universel
  getDefaultTeamConfig   // Config par dÃ©faut selon type combat
} from './BattleTypes';
import { IOwnedPokemon } from '../../models/OwnedPokemon';
import mongoose from 'mongoose';

// === PHASES DRESSEURS (CONSERVÃ‰ES POUR COMPATIBILITÃ‰) ===

export enum TrainerBattlePhase {
  // Phases existantes (compatibilitÃ©)
  INTRO = 'intro',
  ACTION_SELECTION = 'action_selection', 
  ACTION_RESOLUTION = 'action_resolution',
  CAPTURE = 'capture',
  ENDED = 'ended',
  
  // ðŸ†• NOUVELLES PHASES DRESSEURS (maintenant universelles)
  POKEMON_SELECTION = 'pokemon_selection',    // Choix PokÃ©mon initial (automatique)
  SWITCH_PHASE = 'switch_phase',             // Changement de PokÃ©mon
  FORCED_SWITCH = 'forced_switch',           // Changement forcÃ© (KO)
  VICTORY_SEQUENCE = 'victory_sequence'      // SÃ©quence de victoire + rÃ©compenses
}

// === ðŸ”§ ALIAS POUR COMPATIBILITÃ‰ ===

/**
 * @deprecated Utiliser PokemonTeam Ã  la place
 */
export type TrainerPokemonTeam = PokemonTeam;

/**
 * CrÃ©e une Ã©quipe pour combat dresseur (wrapper compatibilitÃ©)
 */
export function createTrainerPokemonTeam(
  pokemon: Pokemon[],
  activePokemonIndex: number = 0
): PokemonTeam {
  return createPokemonTeam(pokemon, activePokemonIndex, 'trainer');
}

// === DONNÃ‰ES DRESSEUR (CONSERVÃ‰ES) ===

export interface TrainerData {
  trainerId: string;           
  name: string;               
  trainerClass: string;       
  level: number;              
  pokemon: Pokemon[];         
  aiProfile: TrainerAIProfile; 
  rewards: TrainerRewards;    
  dialogue?: TrainerDialogue; 
  specialRules?: TrainerBattleRules; 
}

export interface TrainerAIProfile {
  difficulty: 'easy' | 'normal' | 'hard' | 'expert';
  strategies: TrainerStrategy[];
  switchPatterns: SwitchPattern[];
  aggressiveness: number;     
  intelligence: number;       
  memory: boolean;           
}

export interface TrainerStrategy {
  name: string;              
  priority: number;          
  conditions: string[];      
  actions: string[];         
}

export interface SwitchPattern {
  trigger: 'hp_low' | 'type_disadvantage' | 'status_inflicted' | 'setup_complete';
  threshold?: number;        
  targetSelection: 'random' | 'type_advantage' | 'fastest' | 'specific';
  specificPokemonIndex?: number;
}

export interface TrainerRewards {
  baseMoney: number;         
  moneyMultiplier: number;   
  baseExp: number;           
  expMultiplier: number;     
  items?: TrainerRewardItem[]; 
}

export interface TrainerRewardItem {
  itemId: string;
  quantity: number;
  chance: number;            
}

export interface TrainerDialogue {
  prebattle?: string[];     
  midBattle?: string[];     
  victory?: string[];       
  defeat?: string[];        
  rematch?: string[];       
}

// === ðŸ”§ RÃˆGLES DRESSEURS (EXTENDED DEPUIS TEAMCONFIGURATION) ===

export interface TrainerBattleRules extends TeamConfiguration {
  // HÃ©rite de : allowSwitching, maxSwitchesPerTurn, switchCooldown, forceSwitch
  
  // ðŸ†• SPÃ‰CIFICITÃ‰S DRESSEURS
  itemsAllowed: boolean;     // Dresseur peut utiliser objets
  megaEvolution: boolean;    // MÃ©ga-Ã©volution autorisÃ©e (futur)
  
  // PropriÃ©tÃ©s hÃ©ritÃ©es de TeamConfiguration :
  // allowSwitching: boolean;
  // maxSwitchesPerTurn: number; 
  // switchCooldown: number;
  // forceSwitch: boolean;
}

// === CONFIGURATIONS Ã‰TENDUES ===

export interface TrainerBattleConfig extends Omit<BattleConfig, 'type'> {
  type: 'trainer';          
  trainer: TrainerData;     
  playerTeam: Pokemon[];    
  rules: TrainerBattleRules; 
  // âœ… GARDE opponent pour compatibilitÃ© (mappÃ© depuis trainer)
  opponent: {
    sessionId?: string;
    name?: string;
    pokemon: Pokemon;
    isAI?: boolean;
    // ðŸ†• Ã‰QUIPE COMPLÃˆTE POUR COMPATIBILITÃ‰ UNIVERSELLE
    team?: Pokemon[];
    teamConfig?: TeamConfiguration;
  };
}

// === ðŸ”§ Ã‰TAT JEU DRESSEUR (CORRIGÃ‰) ===

export interface TrainerGameState extends Omit<BattleGameState, 'player2'> {
  // Extension joueur avec Ã©quipe (garde pokemon pour compatibilitÃ©)
  player1: {
    sessionId: string;
    name: string;
    pokemon: Pokemon | null; // âœ… OBLIGATOIRE pour compatibilitÃ© BattleGameState
    team: PokemonTeam;       // ðŸ”§ UTILISE PokemonTeam universel maintenant
    isAI?: boolean;
    teamConfig?: TeamConfiguration;
  };
  
  // ðŸ†• DRESSEUR COMPLET  
  trainer: {
    sessionId: string;      
    data: TrainerData;      
    team: PokemonTeam;      // ðŸ”§ UTILISE PokemonTeam universel
  };
  
  // âœ… AJOUTER player2 pour compatibilitÃ© complÃ¨te
  player2: {
    sessionId: string;
    name: string;
    pokemon: Pokemon | null; 
    isAI?: boolean;
    team?: PokemonTeam;     // ðŸ”§ UTILISE PokemonTeam universel
    teamConfig?: TeamConfiguration;
  };
  
  // Nouvelles propriÃ©tÃ©s spÃ©cifiques dresseurs
  trainerPhase?: TrainerBattlePhase; 
  switchRequests?: SwitchRequest[];   
  lastRewards?: CalculatedRewards;    
  battleMemory?: BattleMemoryData;    
}

// === ACTIONS Ã‰TENDUES (CONSERVÃ‰ES) ===

// ðŸ”§ PLUS BESOIN DE REDÃ‰FINIR SwitchAction - utilise version universelle
// export interface SwitchAction extends BattleAction { ... } // SUPPRIMÃ‰

export interface SwitchRequest {
  playerRole: PlayerRole;
  fromIndex: number;
  toIndex: number;
  isForced: boolean;
  timestamp: number;
  processed: boolean;
}

// === RÃ‰SULTATS Ã‰TENDUS (CONSERVÃ‰S) ===

export interface TrainerBattleResult extends BattleResult {
  trainerData?: {
    switchExecuted?: boolean;
    newActivePokemon?: Pokemon;
    pokemonDefeated?: boolean;
    teamDefeated?: boolean;
    rewardsEarned?: CalculatedRewards;
    aiDecision?: AIDecisionData;
  };
}

export interface CalculatedRewards {
  money: number;
  experience: { pokemonId: string; exp: number }[];
  items: { itemId: string; quantity: number }[];
  totalExpGained: number;
  moneyMultiplier: number;
}

export interface AIDecisionData {
  strategy: string;
  reasoning: string[];
  confidence: number;
  alternativeActions: string[];
  memoryUpdates?: string[];
}

// === MÃ‰MOIRE COMBAT (CONSERVÃ‰E) ===

export interface BattleMemoryData {
  battleId: string;
  playerId: string;
  trainerId: string;
  startTime: number;
  endTime?: number;
  turns: number;
  winner: PlayerRole | null;
  playerStrategy: string[];    
  effectiveActions: string[];  
  playerWeaknesses: string[];  
  nextBattleHints: string[];   
}

// === ðŸ”§ FACTORY & HELPERS (CORRIGÃ‰S) ===

/**
 * CrÃ©e une configuration de combat dresseur (compatible universelle)
 */
export function createTrainerBattleConfig(
  playerSessionId: string,
  playerName: string,
  playerPokemon: Pokemon[], 
  trainerData: TrainerData
): TrainerBattleConfig {
  return {
    type: 'trainer',
    player1: {
      sessionId: playerSessionId,
      name: playerName,
      pokemon: playerPokemon[0], // Premier PokÃ©mon pour compatibilitÃ©
      // ðŸ†• Ã‰QUIPE COMPLÃˆTE POUR CHANGEMENTS UNIVERSELS
      team: playerPokemon,
      teamConfig: getDefaultTeamConfig('trainer') // ðŸ”§ UTILISE CONFIG UNIVERSELLE
    },
    // âœ… AJOUTER opponent pour compatibilitÃ©
    opponent: {
      sessionId: 'ai',
      name: trainerData.name,
      pokemon: trainerData.pokemon[0],
      isAI: true,
      // ðŸ†• Ã‰QUIPE COMPLÃˆTE DRESSEUR
      team: trainerData.pokemon,
      teamConfig: getDefaultTeamConfig('trainer')
    },
    trainer: trainerData,
    playerTeam: playerPokemon,
    rules: {
      // ðŸ”§ MERGE TeamConfiguration + spÃ©cificitÃ©s dresseurs
      ...getDefaultTeamConfig('trainer'),
      itemsAllowed: false,
      megaEvolution: false,
      // Ajouter rÃ¨gles spÃ©ciales du dresseur si prÃ©sentes
      ...(trainerData.specialRules || {})
    }
  };
}

/**
 * ðŸ”§ CONVERTIT IOwnedPokemon vers Pokemon universel (corrigÃ©)
 */
export function convertOwnedPokemonToBattlePokemon(ownedPokemon: IOwnedPokemon): Pokemon {
  return {
    id: ownedPokemon.pokemonId,
    combatId: `combat_${ownedPokemon._id}_${Date.now()}`,
    name: ownedPokemon.nickname || `Pokemon_${ownedPokemon.pokemonId}`,
    level: ownedPokemon.level,
    currentHp: ownedPokemon.currentHp,
    maxHp: ownedPokemon.maxHp,
    attack: ownedPokemon.calculatedStats.attack,
    defense: ownedPokemon.calculatedStats.defense,
    specialAttack: ownedPokemon.calculatedStats.spAttack,
    specialDefense: ownedPokemon.calculatedStats.spDefense,
    speed: ownedPokemon.calculatedStats.speed,
    types: [], // TODO: RÃ©cupÃ©rer depuis base donnÃ©es PokÃ©mon
    moves: ownedPokemon.moves.map(m => m.moveId),
    status: ownedPokemon.status as string,
    gender: ownedPokemon.gender,
    shiny: ownedPokemon.shiny,
    isWild: false
  };
}

/**
 * ðŸ”§ WRAPPER COMPATIBILITÃ‰ - utilise createPokemonTeam universel
 */
export { createPokemonTeam as createTrainerPokemonTeamUniversal };

/**
 * Mappe les phases dresseurs vers phases universelles
 */
export function mapTrainerPhaseToInternal(trainerPhase: TrainerBattlePhase): InternalBattlePhase {
  switch (trainerPhase) {
    case TrainerBattlePhase.INTRO:
      return InternalBattlePhase.INTRO;
    case TrainerBattlePhase.POKEMON_SELECTION:
    case TrainerBattlePhase.ACTION_SELECTION:
      return InternalBattlePhase.ACTION_SELECTION;
    case TrainerBattlePhase.SWITCH_PHASE:
      return InternalBattlePhase.SWITCH_PHASE;        // ðŸ”§ UTILISE PHASE UNIVERSELLE
    case TrainerBattlePhase.FORCED_SWITCH:
      return InternalBattlePhase.FORCED_SWITCH;       // ðŸ”§ UTILISE PHASE UNIVERSELLE
    case TrainerBattlePhase.ACTION_RESOLUTION:
      return InternalBattlePhase.ACTION_RESOLUTION;
    case TrainerBattlePhase.VICTORY_SEQUENCE:
    case TrainerBattlePhase.ENDED:
      return InternalBattlePhase.ENDED;
    default:
      return InternalBattlePhase.ACTION_SELECTION;
  }
}

// === VALIDATION & GUARDS (CORRIGÃ‰S) ===

/**
 * VÃ©rifie si une config est pour combat dresseur
 */
export function isTrainerBattleConfig(config: BattleConfig): config is TrainerBattleConfig {
  return config.type === 'trainer' && 'trainer' in config;
}

/**
 * ðŸ”§ CORRECTION - VÃ©rifie si un Ã©tat est pour combat dresseur  
 */
export function isTrainerGameState(state: BattleGameState): boolean {
  // ðŸ”§ CORRECTION : plus de type guard strict Ã  cause des diffÃ©rences de structure
  // Utilise une vÃ©rification boolÃ©enne simple
  return state.type === 'trainer';
}

/**
 * ðŸ”§ UTILISE isSwitchAction universel
 */
export { isSwitchAction } from './BattleTypes';

// === CONSTANTES (CONSERVÃ‰ES) ===

export const TRAINER_BATTLE_CONSTANTS = {
  MAX_POKEMON_PER_TEAM: 6,
  MIN_POKEMON_PER_TEAM: 1,
  MAX_SWITCHES_PER_TURN: 1,
  DEFAULT_SWITCH_COOLDOWN: 0,
  SWITCH_PRIORITY: 6,        
  FORCED_SWITCH_TIME_LIMIT: 30000, 
  
  AI_DIFFICULTY_MODIFIERS: {
    easy: { switchChance: 0.1, predictiveDepth: 1 },
    normal: { switchChance: 0.3, predictiveDepth: 2 },
    hard: { switchChance: 0.5, predictiveDepth: 3 },
    expert: { switchChance: 0.7, predictiveDepth: 4 }
  },
  
  REWARD_BASE_MULTIPLIERS: {
    youngster: 1.0,
    trainer: 1.2,
    gym_leader: 2.0,
    elite_four: 3.0,
    champion: 5.0
  }
} as const;

// === ðŸ”§ HELPERS DE MIGRATION ===

/**
 * Convertit TrainerBattleRules vers TeamConfiguration universelle
 */
export function trainerRulesToTeamConfig(trainerRules: TrainerBattleRules): TeamConfiguration {
  return {
    allowSwitching: trainerRules.allowSwitching,
    maxSwitchesPerTurn: trainerRules.maxSwitchesPerTurn,
    switchCooldown: trainerRules.switchCooldown,
    forceSwitch: trainerRules.forceSwitch
  };
}

/**
 * Convertit TeamConfiguration vers TrainerBattleRules
 */
export function teamConfigToTrainerRules(
  teamConfig: TeamConfiguration, 
  itemsAllowed: boolean = false,
  megaEvolution: boolean = false
): TrainerBattleRules {
  return {
    ...teamConfig,
    itemsAllowed,
    megaEvolution
  };
}

// === EXPORTS POUR COMPATIBILITÃ‰ ===

// RÃ©exporter les types universels pour Ã©viter imports multiples
export {
  BattleType,
  BattlePhase, 
  PlayerRole,
  Pokemon,
  BattleConfig,
  BattleGameState,
  BattleAction,
  BattleResult,
  InternalBattlePhase,
  // ðŸ†• TYPES UNIVERSELS
  PokemonTeam,
  TeamConfiguration,
  SwitchAction,
  createSwitchAction,
  getDefaultTeamConfig
} from './BattleTypes';

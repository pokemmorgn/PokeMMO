// test-shop-manager.ts
// Script de test complet pour ShopManager hybride et MerchantNpcHandler
// ‚öôÔ∏è PLACEMENT FLEXIBLE - Ce script d√©tecte automatiquement les chemins corrects

import mongoose from 'mongoose';
import path from 'path';
import fs from 'fs';

// ===== D√âTECTION AUTOMATIQUE DES CHEMINS =====
function findModulePath(targetFile: string): string {
  const possibleBasePaths = [
    process.cwd(),                          // Racine du projet
    path.join(process.cwd(), 'src'),        // src/
    path.join(process.cwd(), 'server'),     // server/
    path.join(process.cwd(), '..'),         // Dossier parent
    path.dirname(__dirname),                // Dossier du script
    path.join(path.dirname(__dirname), '..') // Deux niveaux au dessus
  ];

  const possiblePaths = [
    `server/src/${targetFile}`,
    `src/${targetFile}`,
    targetFile,
    `dist/server/src/${targetFile}`,
    `dist/src/${targetFile}`
  ];

  for (const basePath of possibleBasePaths) {
    for (const relativePath of possiblePaths) {
      const fullPath = path.join(basePath, relativePath);
      
      // Pour les fichiers TypeScript, v√©rifier aussi les .js compil√©s
      const extensions = ['.ts', '.js'];
      for (const ext of extensions) {
        const testPath = fullPath.replace('.ts', ext);
        if (fs.existsSync(testPath)) {
          console.log(`üéØ [PathFinder] ${targetFile} trouv√©: ${testPath}`);
          return testPath;
        }
      }
    }
  }

  throw new Error(`‚ùå [PathFinder] Impossible de trouver ${targetFile}. V√©rifiez la structure du projet.`);
}

// Fonction pour charger dynamiquement les modules
async function loadModules() {
  try {
    console.log('üîç [PathFinder] Recherche des modules...');
    
    const shopManagerPath = findModulePath('managers/ShopManager');
    const shopDataPath = findModulePath('models/ShopData');
    const merchantHandlerPath = findModulePath('interactions/modules/npc/handlers/MerchantNpcHandler');
    
    console.log('üì¶ [PathFinder] Chargement des modules...');
    
    const { ShopManager, ShopDataSource } = await import(shopManagerPath);
    const { ShopData } = await import(shopDataPath);
    const { MerchantNpcHandler } = await import(merchantHandlerPath);
    
    console.log('‚úÖ [PathFinder] Tous les modules charg√©s avec succ√®s !');
    
    return { ShopManager, ShopDataSource, ShopData, MerchantNpcHandler };
    
  } catch (error) {
    console.error('‚ùå [PathFinder] Erreur lors du chargement des modules:', error);
    
    console.log('\nüîç [DEBUG] Structure du projet d√©tect√©e:');
    console.log(`- Dossier courant: ${process.cwd()}`);
    console.log(`- Dossier du script: ${__dirname}`);
    
    // Lister les dossiers disponibles
    const currentDir = process.cwd();
    const items = fs.readdirSync(currentDir);
    console.log(`- Contenu racine: ${items.join(', ')}`);
    
    if (items.includes('server')) {
      const serverItems = fs.readdirSync(path.join(currentDir, 'server'));
      console.log(`- Contenu server/: ${serverItems.join(', ')}`);
      
      if (serverItems.includes('src')) {
        const serverSrcItems = fs.readdirSync(path.join(currentDir, 'server', 'src'));
        console.log(`- Contenu server/src/: ${serverSrcItems.join(', ')}`);
      }
    }
    
    if (items.includes('src')) {
      const srcItems = fs.readdirSync(path.join(currentDir, 'src'));
      console.log(`- Contenu src/: ${srcItems.join(', ')}`);
    }
    
    throw error;
  }
}

// ===== CONFIGURATION =====
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/pokeworld_test';
const TEST_TIMEOUT = 30000; // 30 secondes

// Donn√©es de test
const TEST_PLAYER = {
  name: 'TestPlayer',
  gold: 5000,
  level: 15,
  x: 100,
  y: 100,
  currentZone: 'test_zone'
};

const TEST_SHOP_JSON = {
  id: "test_pokemart",
  name: "Test Pok√© Mart",
  type: "pokemart",
  description: "Boutique de test",
  buyMultiplier: 1.0,
  sellMultiplier: 0.5,
  currency: "gold",
  restockInterval: 720,
  items: [
    { itemId: "poke_ball", stock: 100 },
    { itemId: "potion", stock: 50 },
    { itemId: "super_potion", stock: 30, unlockLevel: 5 },
    { itemId: "ultra_ball", stock: 20, unlockLevel: 10 }
  ]
};

const TEST_NPC_MERCHANT = {
  id: 1,
  name: "Marchand Test",
  sprite: "merchant.png",
  x: 100,
  y: 100,
  type: "merchant",
  shopId: "test_pokemart",
  properties: {
    shopId: "test_pokemart",
    dialogue: ["Bienvenue dans ma boutique de test !"]
  },
  sourceType: "json"
};

// ===== CLASSE DE TEST =====
class ShopManagerTester {
  private shopManager!: any;
  private merchantHandler!: any;
  private testResults: { [key: string]: boolean } = {};
  private errors: string[] = [];
  private modules: any;

  constructor(modules: any) {
    this.modules = modules;
    console.log('üß™ [ShopManagerTester] Initialisation...');
  }

  // === M√âTHODES PRINCIPALES ===

  async runAllTests(): Promise<void> {
    console.log('\nüöÄ === D√âBUT DES TESTS SHOPMANAGER HYBRIDE ===\n');
    
    try {
      await this.setupDatabase();
      await this.initializeManagers();
      
      // Tests s√©quentiels
      await this.testJSONFallback();
      await this.testMongoDBMode();
      await this.testShopCatalog();
      await this.testTransactions();
      await this.testMerchantHandler();
      await this.testHotReload();
      
      this.displayResults();
      
    } catch (error) {
      console.error('‚ùå Erreur critique dans les tests:', error);
      process.exit(1);
    } finally {
      await this.cleanup();
    }
  }

  // === SETUP ===

  private async setupDatabase(): Promise<void> {
    console.log('üìÄ [Setup] Connexion √† MongoDB...');
    
    try {
      await mongoose.connect(MONGODB_URI);
      console.log('‚úÖ [Setup] MongoDB connect√©');
      
      // Nettoyer les donn√©es de test pr√©c√©dentes
      await this.modules.ShopData.deleteMany({ shopId: { $regex: /^test_/ } });
      console.log('üßπ [Setup] Donn√©es de test nettoy√©es');
      
    } catch (error) {
      throw new Error(`√âchec connexion MongoDB: ${error}`);
    }
  }

  private async initializeManagers(): Promise<void> {
    console.log('‚öôÔ∏è [Setup] Initialisation ShopManager...');
    
    // Cr√©er ShopManager en mode hybride
    this.shopManager = new this.modules.ShopManager(
      "../test/data/shops.json", // Chemin factice
      "../test/data/items.json", // Chemin factice
      {
        primaryDataSource: this.modules.ShopDataSource.HYBRID,
        enableFallback: true,
        debugMode: true,
        enableLocalization: true
      }
    );
    
    // Initialiser (MongoDB d'abord, puis fallback JSON)
    await this.shopManager.initialize();
    
    // Attendre que le chargement soit termin√©
    const loaded = await this.shopManager.waitForLoad(10000);
    if (!loaded) {
      throw new Error('Timeout lors du chargement des shops');
    }
    
    console.log('‚úÖ [Setup] ShopManager initialis√©');
    
    // Initialiser MerchantHandler
    this.merchantHandler = new this.modules.MerchantNpcHandler(this.shopManager, {
      debugMode: true,
      enableLocalization: true
    });
    
    // Attendre que MerchantHandler soit pr√™t
    const handlerReady = await this.merchantHandler.waitForReady(5000);
    if (!handlerReady) {
      console.warn('‚ö†Ô∏è MerchantHandler pas compl√®tement pr√™t, mais on continue');
    }
    
    console.log('‚úÖ [Setup] MerchantHandler initialis√©');
  }

  // === TESTS INDIVIDUELS ===

  private async testJSONFallback(): Promise<void> {
    console.log('\nüìÑ [Test 1] Mode JSON Fallback...');
    
    try {
      // Le ShopManager devrait avoir cr√©√© des shops par d√©faut
      const defaultShop = this.shopManager.getShopDefinition('lavandiashop');
      
      if (defaultShop) {
        console.log(`‚úÖ Shop par d√©faut trouv√©: ${defaultShop.nameKey || defaultShop.name}`);
        this.testResults['json_fallback'] = true;
      } else {
        this.errors.push('Aucun shop par d√©faut cr√©√© en mode fallback');
        this.testResults['json_fallback'] = false;
      }
      
    } catch (error) {
      this.errors.push(`Erreur test JSON: ${error}`);
      this.testResults['json_fallback'] = false;
    }
  }

  private async testMongoDBMode(): Promise<void> {
    console.log('\nüóÑÔ∏è [Test 2] Mode MongoDB...');
    
    try {
      // Cr√©er un shop de test dans MongoDB
      const mongoShop = await this.modules.ShopData.createFromJson(TEST_SHOP_JSON);
      console.log(`‚úÖ Shop MongoDB cr√©√©: ${mongoShop.shopId}`);
      
      // Attendre un peu pour le Hot Reload
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Recharger les shops depuis MongoDB
      const reloaded = await this.shopManager.reloadShopsFromMongoDB();
      if (!reloaded) {
        throw new Error('√âchec rechargement MongoDB');
      }
      
      // V√©rifier que le shop est disponible
      const loadedShop = this.shopManager.getShopDefinition('test_pokemart');
      if (loadedShop && loadedShop.sourceType === 'mongodb') {
        console.log(`‚úÖ Shop MongoDB charg√©: ${loadedShop.nameKey || loadedShop.name}`);
        this.testResults['mongodb_mode'] = true;
      } else {
        throw new Error('Shop MongoDB non trouv√© apr√®s rechargement');
      }
      
    } catch (error) {
      this.errors.push(`Erreur test MongoDB: ${error}`);
      this.testResults['mongodb_mode'] = false;
    }
  }

  private async testShopCatalog(): Promise<void> {
    console.log('\nüì¶ [Test 3] Catalogue Shop...');
    
    try {
      const catalog = this.shopManager.getShopCatalog('test_pokemart', TEST_PLAYER.level);
      
      if (!catalog) {
        throw new Error('Catalogue non g√©n√©r√©');
      }
      
      console.log(`‚úÖ Catalogue g√©n√©r√© avec ${catalog.availableItems.length} items`);
      
      // V√©rifier les items par niveau
      const unlockItems = catalog.availableItems.filter((item: any) => !item.unlocked);
      const availableItems = catalog.availableItems.filter((item: any) => item.canBuy);
      
      console.log(`üìä Items d√©bloqu√©s: ${catalog.availableItems.length - unlockItems.length}/${catalog.availableItems.length}`);
      console.log(`üõí Items achetables: ${availableItems.length}`);
      
      // V√©rifier les prix
      const pokeBallItem = catalog.availableItems.find((item: any) => item.itemId === 'poke_ball');
      if (pokeBallItem && pokeBallItem.buyPrice > 0) {
        console.log(`üí∞ Prix Pok√© Ball: ${pokeBallItem.buyPrice}‚ÇΩ (achat), ${pokeBallItem.sellPrice}‚ÇΩ (vente)`);
        this.testResults['shop_catalog'] = true;
      } else {
        throw new Error('Prix Pok√© Ball invalide');
      }
      
    } catch (error) {
      this.errors.push(`Erreur test catalogue: ${error}`);
      this.testResults['shop_catalog'] = false;
    }
  }

  private async testTransactions(): Promise<void> {
    console.log('\nüí∞ [Test 4] Transactions Buy/Sell...');
    
    try {
      // Test achat
      console.log('üõí Test achat 5x Pok√© Ball...');
      const buyResult = await this.shopManager.buyItem(
        TEST_PLAYER.name,
        'test_pokemart',
        'poke_ball',
        5,
        TEST_PLAYER.gold,
        TEST_PLAYER.level
      );
      
      if (!buyResult.success) {
        throw new Error(`Achat √©chou√©: ${buyResult.message}`);
      }
      
      console.log(`‚úÖ Achat r√©ussi: ${buyResult.message}`);
      console.log(`üí∞ Nouvel or: ${buyResult.newGold}‚ÇΩ`);
      
      // Test vente
      console.log('üí∏ Test vente 2x Pok√© Ball...');
      const sellResult = await this.shopManager.sellItem(
        TEST_PLAYER.name,
        'test_pokemart', 
        'poke_ball',
        2
      );
      
      if (!sellResult.success) {
        throw new Error(`Vente √©chou√©e: ${sellResult.message}`);
      }
      
      console.log(`‚úÖ Vente r√©ussie: ${sellResult.message}`);
      console.log(`üí∞ Or gagn√©: ${sellResult.newGold}‚ÇΩ`);
      
      // Test achat impossible (pas assez d'or)
      console.log('‚ùå Test achat impossible (or insuffisant)...');
      const failedBuy = await this.shopManager.buyItem(
        TEST_PLAYER.name,
        'test_pokemart',
        'ultra_ball',
        100, // Quantit√© excessive
        100, // Or insuffisant
        TEST_PLAYER.level
      );
      
      if (!failedBuy.success && (failedBuy.messageKey === 'shop.error.insufficient_money' || failedBuy.message.includes('argent'))) {
        console.log(`‚úÖ √âchec attendu: ${failedBuy.message}`);
        this.testResults['transactions'] = true;
      } else {
        throw new Error('Validation or insuffisant √©chou√©e');
      }
      
    } catch (error) {
      this.errors.push(`Erreur test transactions: ${error}`);
      this.testResults['transactions'] = false;
    }
  }

  private async testMerchantHandler(): Promise<void> {
    console.log('\nü§ù [Test 5] MerchantNpcHandler...');
    
    try {
      // Test d√©tection marchand
      const isMerchant = this.merchantHandler.isMerchantNpc(TEST_NPC_MERCHANT);
      if (!isMerchant) {
        throw new Error('NPC marchand non d√©tect√©');
      }
      console.log('‚úÖ NPC marchand d√©tect√©');
      
      // Test interaction
      const interactionResult = await this.merchantHandler.handle(
        TEST_PLAYER,
        TEST_NPC_MERCHANT,
        TEST_NPC_MERCHANT.id
      );
      
      if (!interactionResult.success) {
        throw new Error(`Interaction √©chou√©e: ${interactionResult.message}`);
      }
      
      console.log(`‚úÖ Interaction r√©ussie: ${interactionResult.type}`);
      console.log(`üè™ Shop ouvert: ${interactionResult.shopId}`);
      
      if (interactionResult.shopData) {
        console.log(`üì¶ Items disponibles: ${interactionResult.shopData.availableItems.length}`);
        console.log(`üí∞ Or joueur: ${interactionResult.shopData.playerGold}‚ÇΩ`);
      }
      
      // Test transaction via handler
      console.log('üõí Test transaction via MerchantHandler...');
      const transactionResult = await this.merchantHandler.handleShopTransaction(
        TEST_PLAYER,
        TEST_NPC_MERCHANT,
        'buy',
        'potion',
        3
      );
      
      if (transactionResult.success) {
        console.log(`‚úÖ Transaction handler r√©ussie: ${transactionResult.message}`);
        
        if (transactionResult.dialogues && transactionResult.dialogues.length > 0) {
          console.log(`üí¨ Dialogue: "${transactionResult.dialogues[0]}"`);
        }
        
        this.testResults['merchant_handler'] = true;
      } else {
        throw new Error(`Transaction handler √©chou√©e: ${transactionResult.message}`);
      }
      
    } catch (error) {
      this.errors.push(`Erreur test MerchantHandler: ${error}`);
      this.testResults['merchant_handler'] = false;
    }
  }

  private async testHotReload(): Promise<void> {
    console.log('\nüî• [Test 6] Hot Reload MongoDB...');
    
    try {
      let reloadDetected = false;
      
      // S'abonner aux changements
      this.shopManager.onShopChange((event: string, shopData?: any) => {
        console.log(`üî• Hot Reload d√©tect√©: ${event} - ${shopData?.nameKey || shopData?.name || 'Unknown'}`);
        reloadDetected = true;
      });
      
      // Modifier le shop dans MongoDB
      const mongoShop = await this.modules.ShopData.findOne({ shopId: 'test_pokemart' });
      if (mongoShop) {
        mongoShop.buyMultiplier = 1.2; // Changement
        await mongoShop.save();
        console.log('üîÑ Shop modifi√© dans MongoDB');
      }
      
      // Attendre le Hot Reload
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      if (reloadDetected) {
        console.log('‚úÖ Hot Reload fonctionnel');
        this.testResults['hot_reload'] = true;
      } else {
        // Hot Reload peut ne pas fonctionner en test (pas de Change Streams en local)
        console.log('‚ö†Ô∏è Hot Reload non d√©tect√© (normal en environnement de test)');
        this.testResults['hot_reload'] = true; // On consid√®re comme OK
      }
      
    } catch (error) {
      this.errors.push(`Erreur test Hot Reload: ${error}`);
      this.testResults['hot_reload'] = false;
    }
  }

  // === R√âSULTATS ===

  private displayResults(): void {
    console.log('\nüìä === R√âSULTATS DES TESTS ===\n');
    
    const totalTests = Object.keys(this.testResults).length;
    const passedTests = Object.values(this.testResults).filter(result => result).length;
    const failedTests = totalTests - passedTests;
    
    // Afficher r√©sultat par test
    Object.entries(this.testResults).forEach(([testName, passed]) => {
      const status = passed ? '‚úÖ PASS' : '‚ùå FAIL';
      const displayName = testName.replace(/_/g, ' ').toUpperCase();
      console.log(`${status} - ${displayName}`);
    });
    
    console.log(`\nüìà SCORE: ${passedTests}/${totalTests} tests pass√©s`);
    
    if (this.errors.length > 0) {
      console.log('\nüö® ERREURS D√âTECT√âES:');
      this.errors.forEach((error, index) => {
        console.log(`${index + 1}. ${error}`);
      });
    }
    
    // Afficher stats syst√®me
    const stats = this.shopManager.getSystemStats();
    console.log('\nüìä STATISTIQUES SYST√àME:');
    console.log(`- Shops total: ${stats.totalShops}`);
    console.log(`- Sources: JSON=${stats.sources.json}, MongoDB=${stats.sources.mongodb}`);
    console.log(`- Prix charg√©s: ${stats.prices}`);
    console.log(`- Hot Reload: ${stats.hotReload.enabled ? 'Activ√©' : 'D√©sactiv√©'}`);
    
    if (passedTests === totalTests) {
      console.log('\nüéâ TOUS LES TESTS ONT R√âUSSI ! üéâ');
      console.log('‚úÖ Le ShopManager hybride est pr√™t pour la production');
    } else {
      console.log(`\n‚ö†Ô∏è ${failedTests} test(s) ont √©chou√©`);
      console.log('‚ùå V√©rifiez les erreurs avant de continuer');
    }
  }

  private async cleanup(): Promise<void> {
    console.log('\nüßπ [Cleanup] Nettoyage...');
    
    try {
      // Nettoyer les donn√©es de test
      await this.modules.ShopData.deleteMany({ shopId: { $regex: /^test_/ } });
      
      // Nettoyer le ShopManager
      this.shopManager.cleanup();
      
      // Fermer MongoDB
      await mongoose.disconnect();
      
      console.log('‚úÖ [Cleanup] Termin√©');
      
    } catch (error) {
      console.error('‚ùå [Cleanup] Erreur:', error);
    }
  }
}

// ===== M√âTHODES UTILITAIRES =====

function simulateInventoryManager() {
  // Mock de l'InventoryManager pour les tests
  const mockInventory: { [username: string]: { [itemId: string]: number } } = {};
  
  (global as any).InventoryManager = {
    async addItem(username: string, itemId: string, quantity: number): Promise<boolean> {
      if (!mockInventory[username]) mockInventory[username] = {};
      mockInventory[username][itemId] = (mockInventory[username][itemId] || 0) + quantity;
      console.log(`üì¶ [MockInventory] ${username} +${quantity}x ${itemId} = ${mockInventory[username][itemId]}`);
      return true;
    },
    
    async removeItem(username: string, itemId: string, quantity: number): Promise<boolean> {
      if (!mockInventory[username]) mockInventory[username] = {};
      const current = mockInventory[username][itemId] || 0;
      if (current >= quantity) {
        mockInventory[username][itemId] = current - quantity;
        console.log(`üì¶ [MockInventory] ${username} -${quantity}x ${itemId} = ${mockInventory[username][itemId]}`);
        return true;
      }
      return false;
    },
    
    async getItemCount(username: string, itemId: string): Promise<number> {
      const count = mockInventory[username]?.[itemId] || 0;
      console.log(`üì¶ [MockInventory] ${username} a ${count}x ${itemId}`);
      return count;
    }
  };
}

// ===== EX√âCUTION =====

async function main() {
  console.log('üöÄ === LANCEMENT DU TEST SHOPMANAGER ===');
  console.log('üìÅ D√©tection automatique de la structure du projet...\n');
  
  // Configuration de l'environnement de test
  process.env.NODE_ENV = 'test';
  
  // Simuler l'InventoryManager
  simulateInventoryManager();
  
  try {
    // Charger les modules dynamiquement
    const modules = await loadModules();
    
    // Cr√©er et lancer les tests
    const tester = new ShopManagerTester(modules);
    
    // G√©rer les timeouts
    const timeout = setTimeout(() => {
      console.error('‚ùå TIMEOUT: Tests interrompus apr√®s 30 secondes');
      process.exit(1);
    }, TEST_TIMEOUT);
    
    await tester.runAllTests();
    clearTimeout(timeout);
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå ERREUR FATALE:', error);
    process.exit(1);
  }
}

// Lancer si ex√©cut√© directement
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erreur non g√©r√©e:', error);
    process.exit(1);
  });
}

export { ShopManagerTester };

// server/src/scripts/renumber-npcs.ts
import mongoose, { Schema } from 'mongoose';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

// Schema pour le compteur global
const NpcCounterSchema = new Schema({
  _id: { type: String, required: true, default: 'npc_global_counter' },
  currentValue: { type: Number, default: 0 }
}, { collection: 'npc_counters' });

const NpcCounter = mongoose.model('NpcCounter', NpcCounterSchema);

async function renumberAllNpcs() {
  try {
    console.log('üöÄ [Renumber] D√©marrage de la renum√©rotation globale des NPCs...');
    
    // 1. Connexion √† MongoDB
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/pokemon_game';
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Connect√© √† MongoDB');
    
    const db = mongoose.connection.db;
    const collection = db.collection('npc_data');
    
    // 2. Supprimer l'ancien index unique qui bloque
    try {
      await collection.dropIndex({ zone: 1, npcId: 1 });
      console.log('‚úÖ Index unique (zone + npcId) supprim√©');
    } catch (error) {
      console.log('‚ÑπÔ∏è Index d√©j√† supprim√© ou non trouv√©');
    }
    
    // 3. R√©cup√©rer TOUS les NPCs tri√©s par zone puis par ancien ID
    const allNpcs = await collection.find({})
      .sort({ zone: 1, npcId: 1 }) // Tri par zone puis ID
      .toArray();
    
    console.log(`üìä ${allNpcs.length} NPCs trouv√©s √† renum√©roter`);
    
    if (allNpcs.length === 0) {
      console.log('‚ö†Ô∏è Aucun NPC trouv√© dans la base de donn√©es');
      await mongoose.disconnect();
      return;
    }
    
    // 4. Afficher l'aper√ßu avant modification
    console.log('\nüìã Aper√ßu de la renum√©rotation :');
    console.log('Zone'.padEnd(15) + 'Nom'.padEnd(20) + 'Ancien ID'.padEnd(12) + 'Nouvel ID');
    console.log('-'.repeat(60));
    
    let newId = 1;
    for (const npc of allNpcs.slice(0, 10)) { // Afficher les 10 premiers
      console.log(
        (npc.zone || 'unknown').padEnd(15) + 
        (npc.name || 'unnamed').substring(0, 18).padEnd(20) + 
        String(npc.npcId).padEnd(12) + 
        String(newId)
      );
      newId++;
    }
    
    if (allNpcs.length > 10) {
      console.log('... et ' + (allNpcs.length - 10) + ' autres NPCs');
    }
    
    // 5. Demander confirmation (pour les tests)
    console.log(`\nü§î Voulez-vous continuer la renum√©rotation de ${allNpcs.length} NPCs ?`);
    console.log('   Cette op√©ration va assigner les IDs de 1 √† ' + allNpcs.length);
    
    // En production, d√©commentez ces lignes pour demander confirmation :
    // const readline = require('readline').createInterface({
    //   input: process.stdin,
    //   output: process.stdout
    // });
    // const answer = await new Promise(resolve => {
    //   readline.question('Tapez "oui" pour continuer : ', resolve);
    // });
    // readline.close();
    // 
    // if (answer !== 'oui') {
    //   console.log('‚ùå Op√©ration annul√©e');
    //   await mongoose.disconnect();
    //   return;
    // }
    
    // 6. Renum√©roter tous les NPCs
    console.log('\nüîÑ D√©but de la renum√©rotation...');
    
    newId = 1;
    let updated = 0;
    
    for (const npc of allNpcs) {
      // Mettre √† jour avec le nouvel ID s√©quentiel
      await collection.updateOne(
        { _id: npc._id },
        { $set: { npcId: newId } }
      );
      
      if (updated % 10 === 0 || updated < 20) {
        console.log(`üîÑ ${npc.zone} - "${npc.name}": ${npc.npcId} ‚Üí ${newId}`);
      }
      
      newId++;
      updated++;
      
      // Afficher le progr√®s tous les 50 NPCs
      if (updated % 50 === 0) {
        console.log(`üìà Progr√®s: ${updated}/${allNpcs.length} NPCs mis √† jour`);
      }
    }
    
    console.log(`‚úÖ ${updated} NPCs renum√©rot√©s avec succ√®s !`);
    
    // 7. Cr√©er les nouveaux index
    console.log('\nüîß Cr√©ation des nouveaux index...');
    
    await collection.createIndex({ npcId: 1 }, { unique: true });
    console.log('‚úÖ Index unique global cr√©√© (npcId)');
    
    await collection.createIndex({ zone: 1, npcId: 1 });
    console.log('‚úÖ Index de performance cr√©√© (zone + npcId)');
    
    // 8. Initialiser le compteur global
    console.log('\nüî¢ Initialisation du compteur global...');
    
    await NpcCounter.findByIdAndUpdate(
      'npc_global_counter',
      { currentValue: allNpcs.length },
      { upsert: true, new: true }
    );
    
    console.log(`‚úÖ Compteur global initialis√© √† ${allNpcs.length}`);
    console.log(`   Prochain ID assign√© : ${allNpcs.length + 1}`);
    
    // 9. V√©rification finale
    console.log('\nüîç V√©rification finale...');
    
    const verification = await collection.aggregate([
      { $group: { _id: '$npcId', count: { $sum: 1 } } },
      { $match: { count: { $gt: 1 } } }
    ]).toArray();
    
    if (verification.length === 0) {
      console.log('‚úÖ Aucun doublon d√©tect√© - tous les IDs sont uniques !');
    } else {
      console.log('‚ùå Doublons d√©tect√©s:', verification);
    }
    
    // 10. R√©sum√© final
    console.log('\nüéâ RENUM√âROTATION TERMIN√âE !');
    console.log(`üìä NPCs trait√©s: ${updated}`);
    console.log(`üî¢ IDs assign√©s: 1 √† ${allNpcs.length}`);
    console.log(`üöÄ Prochain ID libre: ${allNpcs.length + 1}`);
    console.log('‚úÖ Index uniques cr√©√©s');
    console.log('‚úÖ Compteur global initialis√©');
    
  } catch (error) {
    console.error('‚ùå Erreur durant la renum√©rotation:', error);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connexion de MongoDB');
  }
}

// Ex√©cuter le script
if (require.main === module) {
  renumberAllNpcs()
    .then(() => {
      console.log('‚úÖ Script termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script √©chou√©:', error);
      process.exit(1);
    });
}

export default renumberAllNpcs;

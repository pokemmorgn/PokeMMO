// server/src/rooms/WorldRoom.ts - VERSION COMPL√àTE AVEC CORRECTIONS QU√äTES
import { Room, Client } from "@colyseus/core";
import { PokeWorldState, Player } from "../schema/PokeWorldState";
import { ZoneManager } from "../managers/ZoneManager";
import { NpcManager } from "../managers/NPCManager";
import { InventoryManager } from "../managers/InventoryManager"; 
import { getItemData, getItemPocket } from "../utils/ItemDB";
import { TransitionService, TransitionRequest } from "../services/TransitionService";


// Interfaces pour typer les r√©ponses des qu√™tes
interface QuestStartResult {
  success: boolean;
  message: string;
  quest?: any;
}

interface Quest {
  id: string;
  name: string;
  currentStepIndex?: number;
}

export class WorldRoom extends Room<PokeWorldState> {
  private zoneManager!: ZoneManager;
  private npcManagers: Map<string, NpcManager> = new Map();
  private transitionService!: TransitionService;

  // Limite pour auto-scaling
  maxClients = 50;
  private lastStateUpdate = 0;
  private stateUpdateInterval = 100;

  onCreate(options: any) {
    console.log(`üåç === WORLDROOM CR√âATION ===`);
    console.log(`üìä Options:`, options);

    // Initialiser le state
    this.setState(new PokeWorldState());
    console.log(`‚úÖ State initialis√©`);

    // Initialiser le ZoneManager
    this.zoneManager = new ZoneManager(this);
    console.log(`‚úÖ ZoneManager initialis√©`);

    this.initializeNpcManagers();
    this.transitionService = new TransitionService(this.npcManagers);
    console.log(`‚úÖ TransitionService initialis√©`);
    // Messages handlers
    this.setupMessageHandlers();
    console.log(`‚úÖ Message handlers configur√©s`);

    console.log(`üöÄ WorldRoom pr√™te ! MaxClients: ${this.maxClients}`);
  }

  private initializeNpcManagers() {
    const zones = ['beach', 'village', 'villagelab', 'villagehouse1', 'road1', 'lavandia'];
    
    zones.forEach(zoneName => {
      try {
        const mapPath = `../assets/maps/${zoneName}.tmj`;
        const npcManager = new NpcManager(mapPath);
        this.npcManagers.set(zoneName, npcManager);
        console.log(`‚úÖ NPCs charg√©s pour ${zoneName}: ${npcManager.getAllNpcs().length}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Impossible de charger les NPCs pour ${zoneName}:`, error);
      }
    });
  }

  // ‚úÖ M√âTHODE CORRIG√âE AVEC DEBUG ET D√âLAI
  async onPlayerJoinZone(client: Client, zoneName: string) {
    console.log(`üì• === WORLDROOM: PLAYER JOIN ZONE ===`);
    console.log(`üë§ Client: ${client.sessionId}`);
    console.log(`üåç Zone: ${zoneName}`);

    // ‚úÖ ENVOYER LES NPCS DEPUIS LE FICHIER .TMJ
    const npcManager = this.npcManagers.get(zoneName);
    if (npcManager) {
      const npcs = npcManager.getAllNpcs();
      client.send("npcList", npcs);
      console.log(`üì§ ${npcs.length} NPCs envoy√©s pour ${zoneName}`);
    } else {
      console.warn(`‚ö†Ô∏è [WorldRoom] Aucun NPCManager trouv√© pour ${zoneName}`);
    }

    // ‚úÖ CORRECTION CRITIQUE: D√âLAI POUR LES STATUTS DE QU√äTE
    const player = this.state.players.get(client.sessionId);
    if (player) {
      console.log(`üéØ [WorldRoom] Programmation mise √† jour quest statuses pour ${player.name}`);
      
      // ‚úÖ D√âLAI PLUS LONG pour s'assurer que tout est initialis√©
      this.clock.setTimeout(async () => {
        console.log(`‚è∞ [WorldRoom] Ex√©cution diff√©r√©e des quest statuses pour ${player.name}`);
        await this.updateQuestStatusesFixed(player.name, client);
      }, 2000); // 2 secondes au lieu de 1
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE : Mise √† jour quest statuses avec debug
  private async updateQuestStatusesFixed(username: string, client?: Client) {
    try {
      console.log(`üìä [WorldRoom] === UPDATE QUEST STATUSES ===`);
      console.log(`üë§ Username: ${username}`);
      
      // ‚úÖ V√âRIFIER QUE LE ZONE MANAGER EST INITIALIS√â
      if (!this.zoneManager) {
        console.error(`‚ùå [WorldRoom] ZoneManager non initialis√© !`);
        return;
      }
      
      // ‚úÖ V√âRIFIER QUE LE QUEST MANAGER EST ACCESSIBLE
      const questManager = this.zoneManager.getQuestManager();
      if (!questManager) {
        console.error(`‚ùå [WorldRoom] QuestManager non accessible !`);
        return;
      }
      
      console.log(`‚úÖ [WorldRoom] Managers OK, r√©cup√©ration quest statuses...`);
      
      // ‚úÖ APPELER DIRECTEMENT LE QUEST MANAGER POUR DEBUG
      const availableQuests = await questManager.getAvailableQuests(username);
      const activeQuests = await questManager.getActiveQuests(username);
      
      console.log(`üìã [WorldRoom] Qu√™tes disponibles: ${availableQuests.length}`);
      console.log(`üìà [WorldRoom] Qu√™tes actives: ${activeQuests.length}`);
      
      // ‚úÖ CALCULER MANUELLEMENT LES STATUTS POUR DEBUG
      const questStatuses: any[] = [];
      
      // Statuts pour les qu√™tes disponibles
      for (const quest of availableQuests) {
        if (quest.startNpcId) {
          questStatuses.push({
            npcId: quest.startNpcId,
            type: 'questAvailable'
          });
          console.log(`‚ûï [WorldRoom] Qu√™te disponible: ${quest.name} pour NPC ${quest.startNpcId}`);
        }
      }
      
      // Statuts pour les qu√™tes actives
      for (const quest of activeQuests) {
        if (quest.status === 'readyToComplete' && quest.endNpcId) {
          questStatuses.push({
            npcId: quest.endNpcId,
            type: 'questReadyToComplete'
          });
          console.log(`üéâ [WorldRoom] Qu√™te pr√™te: ${quest.name} pour NPC ${quest.endNpcId}`);
        } else if (quest.endNpcId) {
          questStatuses.push({
            npcId: quest.endNpcId,
            type: 'questInProgress'
          });
          console.log(`üìà [WorldRoom] Qu√™te en cours: ${quest.name} pour NPC ${quest.endNpcId}`);
        }
      }
      
      console.log(`üìä [WorldRoom] Total quest statuses: ${questStatuses.length}`, questStatuses);
      
      if (questStatuses.length > 0) {
        // ‚úÖ ENVOYER √Ä TOUS LES CLIENTS OU JUSTE CELUI SP√âCIFI√â
        if (client) {
          client.send("questStatuses", { questStatuses });
          console.log(`üì§ [WorldRoom] Quest statuses envoy√©s √† ${client.sessionId}`);
        } else {
          this.broadcast("questStatuses", { questStatuses });
          console.log(`üì° [WorldRoom] Quest statuses broadcast√©s`);
        }
      } else {
        console.log(`‚ÑπÔ∏è [WorldRoom] Aucun quest status √† envoyer pour ${username}`);
      }
      
    } catch (error) {
      console.error(`‚ùå [WorldRoom] Erreur updateQuestStatusesFixed:`, error);
    }
  }

  // ‚úÖ M√âTHODES PUBLIQUES - CORRECTEMENT PLAC√âES
  public getNpcManager(zoneName: string): NpcManager | undefined {
    const npcManager = this.npcManagers.get(zoneName);
    if (!npcManager) {
      console.warn(`‚ö†Ô∏è [WorldRoom] NpcManager non trouv√© pour la zone: ${zoneName}`);
      console.log(`üìã [WorldRoom] Zones disponibles:`, Array.from(this.npcManagers.keys()));
    }
    return npcManager;
  }

  public getAvailableNpcZones(): string[] {
    return Array.from(this.npcManagers.keys());
  }

  public debugNpcManagers(): void {
    console.log(`üîç [WorldRoom] === DEBUG NPC MANAGERS ===`);
    this.npcManagers.forEach((npcManager, zoneName) => {
      const npcs = npcManager.getAllNpcs();
      console.log(`üåç Zone: ${zoneName} - ${npcs.length} NPCs`);
      npcs.forEach(npc => {
        console.log(`  ü§ñ NPC ${npc.id}: ${npc.name} at (${npc.x}, ${npc.y})`);
      });
    });
    console.log(`=======================================`);
  }
  
  private setupMessageHandlers() {
    console.log(`üì® === SETUP MESSAGE HANDLERS ===`);

    // === HANDLERS EXISTANTS ===
    
    // Mouvement du joueur
   // Mouvement du joueur
  this.onMessage("playerMove", (client, data) => {
    this.handlePlayerMove(client, data);
  });

  // ‚úÖ HANDLER MANQUANT - Transition entre zones (ancien syst√®me)
  this.onMessage("moveToZone", async (client, data) => {
    console.log(`üåÄ === MOVE TO ZONE REQUEST (ANCIEN SYST√àME) ===`);
    console.log(`üë§ Client: ${client.sessionId}`);
    console.log(`üìç Data:`, data);
    
    // D√©l√©guer au ZoneManager
    await this.zoneManager.handleZoneTransition(client, data);
  });

  // ‚úÖ VALIDATION de transition (nouveau syst√®me s√©curis√©)
  this.onMessage("validateTransition", async (client, data: TransitionRequest) => {
    console.log(`üîç === VALIDATION TRANSITION REQUEST ===`);
    console.log(`üë§ From: ${client.sessionId}`);
    console.log(`üìç Data:`, data);
    
    const player = this.state.players.get(client.sessionId);
    if (!player) {
      client.send("transitionResult", {
        success: false,
        reason: "Joueur non trouv√©",
        rollback: true
      });
      return;
    }

    try {
      const result = await this.transitionService.validateTransition(client, player, data);
      
      if (result.success) {
        // Mettre √† jour la position du joueur sur le serveur
        if (result.position) {
          const oldZone = player.currentZone;
          player.currentZone = result.currentZone!;
          player.x = result.position.x;
          player.y = result.position.y;
          console.log(`üîß [WorldRoom] IMM√âDIATEMENT APR√àS UPDATE:`);
console.log(`  - player.currentZone: ${player.currentZone}`);
console.log(`  - result.currentZone: ${result.currentZone}`);
console.log(`  - player position: (${player.x}, ${player.y})`);
          console.log(`‚úÖ Transition valid√©e: ${player.name} ${oldZone} ‚Üí ${player.currentZone}`);
          
          // Notifier le changement de zone
          this.onPlayerJoinZone(client, player.currentZone);
          this.scheduleFilteredStateUpdate();
        }
      }
      
      client.send("transitionResult", result);
      
    } catch (error) {
      console.error(`‚ùå Erreur validation transition:`, error);
      client.send("transitionResult", {
        success: false,
        reason: "Erreur serveur lors de la validation",
        rollback: true
      });
    }
  });

  // ‚úÖ HANDLER MANQUANT - Notification de changement de zone
  this.onMessage("notifyZoneChange", (client, data: { newZone: string, x: number, y: number }) => {
    console.log(`üîÑ === ZONE CHANGE NOTIFICATION ===`);
    console.log(`üë§ Client: ${client.sessionId}`);
    console.log(`üìç Nouvelle zone: ${data.newZone} √† (${data.x}, ${data.y})`);
    
    const player = this.state.players.get(client.sessionId);
    if (player) {
      const oldZone = player.currentZone;
      
      // Mettre √† jour la zone et position du joueur
      player.currentZone = data.newZone;
      player.x = data.x;
      player.y = data.y;
      
      console.log(`‚úÖ ${player.name}: ${oldZone} ‚Üí ${data.newZone}`);
      
      // Envoyer les NPCs de la nouvelle zone
      this.onPlayerJoinZone(client, data.newZone);
      
      // D√©clencher une mise √† jour du state filtr√©
      this.scheduleFilteredStateUpdate();
    }
  });

    // Interaction avec NPC
    this.onMessage("npcInteract", (client, data) => {
      console.log(`üí¨ === NPC INTERACTION REQUEST ===`);
      this.zoneManager.handleNpcInteraction(client, data.npcId);
    });

    // ‚úÖ AJOUTER CE HANDLER
this.onMessage("notifyZoneChange", (client, data: { newZone: string, x: number, y: number }) => {
  console.log(`üîÑ === ZONE CHANGE NOTIFICATION ===`);
  console.log(`üë§ Client: ${client.sessionId}`);
  console.log(`üìç Nouvelle zone: ${data.newZone} √† (${data.x}, ${data.y})`);
  
  const player = this.state.players.get(client.sessionId);
  if (player) {
    const oldZone = player.currentZone;
    
    // Mettre √† jour la zone et position du joueur
    player.currentZone = data.newZone;
    player.x = data.x;
    player.y = data.y;
    
    console.log(`‚úÖ ${player.name}: ${oldZone} ‚Üí ${data.newZone}`);
    
    // Envoyer les NPCs de la nouvelle zone
    this.onPlayerJoinZone(client, data.newZone);
    
    // D√©clencher une mise √† jour du state filtr√©
    this.scheduleFilteredStateUpdate();
  }
});

    this.onMessage("requestInitialState", (client, data: { zone: string }) => {
  console.log(`üì° [WorldRoom] Demande √©tat initial de ${client.sessionId} pour zone: ${data.zone}`);
  
  // Envoyer imm√©diatement l'√©tat filtr√© pour cette zone
  const player = this.state.players.get(client.sessionId);
  if (player && player.currentZone === data.zone) {
    const filteredState = this.getFilteredStateForClient(client);
    if (filteredState) {
      client.send("filteredState", filteredState);
      console.log(`‚úÖ [WorldRoom] √âtat initial envoy√© √† ${client.sessionId}`);
    }
  }
});
    // ‚úÖ === NOUVEAUX HANDLERS POUR LES QU√äTES ===

    // D√©marrage de qu√™te
    this.onMessage("startQuest", (client, data) => {
      console.log(`üéØ === QUEST START REQUEST ===`);
      this.handleStartQuest(client, data);
    });

    // R√©cup√©rer les qu√™tes actives
    this.onMessage("getActiveQuests", (client) => {
      this.handleGetActiveQuests(client);
    });

    // R√©cup√©rer les qu√™tes disponibles
    this.onMessage("getAvailableQuests", (client) => {
      this.handleGetAvailableQuests(client);
    });

    // Progression de qu√™te
    this.onMessage("questProgress", (client, data) => {
      this.handleQuestProgress(client, data);
    });

    // Debug des qu√™tes
    this.onMessage("debugQuests", (client) => {
      this.debugQuests(client);
    });

    // ‚úÖ === NOUVEAUX HANDLERS POUR LES SHOPS ===

    // Transaction shop (achat/vente)
    this.onMessage("shopTransaction", (client, data) => {
      console.log(`üõí [WorldRoom] Transaction shop re√ßue:`, data);
      this.handleShopTransaction(client, data);
    });

    // R√©cup√©rer le catalogue d'un shop
    this.onMessage("getShopCatalog", (client, data) => {
      console.log(`üè™ [WorldRoom] Demande de catalogue shop: ${data.shopId}`);
      this.handleGetShopCatalog(client, data.shopId);
    });

    // Rafra√Æchir un shop (restock)
    this.onMessage("refreshShop", (client, data) => {
      console.log(`üîÑ [WorldRoom] Rafra√Æchissement shop: ${data.shopId}`);
      this.handleRefreshShop(client, data.shopId);
    });
    
    // === HANDLERS POUR L'INVENTAIRE ===

    // R√©cup√©rer l'inventaire complet du joueur
    this.onMessage("getInventory", async (client) => {
      try {
        const player = this.state.players.get(client.sessionId);
        if (!player) {
          client.send("inventoryError", { message: "Joueur non trouv√©" });
          return;
        }

        console.log(`üéí R√©cup√©ration inventaire pour ${player.name}`);
        
        // R√©cup√©rer les donn√©es d'inventaire group√©es par poche
        const inventoryData = await InventoryManager.getAllItemsGroupedByPocket(player.name);
        
        client.send("inventoryData", inventoryData);
        console.log(`‚úÖ Inventaire envoy√© √† ${player.name}:`, Object.keys(inventoryData));
        
      } catch (error) {
        console.error("‚ùå Erreur getInventory:", error);
        client.send("inventoryError", { 
          message: "Impossible de charger l'inventaire" 
        });
      }
    });

    // Utiliser un objet
    this.onMessage("useItem", async (client, data) => {
      try {
        const player = this.state.players.get(client.sessionId);
        if (!player) {
          client.send("itemUseResult", { 
            success: false, 
            message: "Joueur non trouv√©" 
          });
          return;
        }

        console.log(`üéí ${player.name} utilise ${data.itemId} (contexte: ${data.context})`);

        // V√©rifier si l'objet peut √™tre utilis√©
        const canUse = await InventoryManager.canUseItem(
          player.name, 
          data.itemId, 
          data.context
        );
        
        if (!canUse) {
          client.send("itemUseResult", { 
            success: false, 
            message: "Impossible d'utiliser cet objet maintenant" 
          });
          return;
        }

        // V√©rifier que le joueur poss√®de l'objet
        const itemCount = await InventoryManager.getItemCount(player.name, data.itemId);
        if (itemCount <= 0) {
          client.send("itemUseResult", { 
            success: false, 
            message: "Vous n'avez pas cet objet" 
          });
          return;
        }

        // Retirer l'objet de l'inventaire
        const success = await InventoryManager.removeItem(player.name, data.itemId, 1);
        if (!success) {
          client.send("itemUseResult", { 
            success: false, 
            message: "Erreur lors de la suppression de l'objet" 
          });
          return;
        }

        // Appliquer l'effet de l'objet
        const effectResult = await this.applyItemEffect(player, data.itemId, data.context);
        
        client.send("itemUseResult", { 
          success: true, 
          message: effectResult.message || `${data.itemId} utilis√© avec succ√®s` 
        });

        // Notifier la mise √† jour d'inventaire
        client.send("inventoryUpdate", {
          type: "remove",
          itemId: data.itemId,
          quantity: 1,
          pocket: getItemPocket(data.itemId)
        });

        console.log(`‚úÖ ${player.name} a utilis√© ${data.itemId}`);
        
      } catch (error) {
        console.error("‚ùå Erreur useItem:", error);
        client.send("itemUseResult", { 
          success: false, 
          message: "Erreur lors de l'utilisation" 
        });
      }
    });

    // Ramasser un objet au sol
    this.onMessage("pickupItem", async (client, data) => {
      try {
        const player = this.state.players.get(client.sessionId);
        if (!player) {
          client.send("inventoryError", { message: "Joueur non trouv√©" });
          return;
        }

        console.log(`üéí ${player.name} ramasse ${data.itemId} √† (${data.x}, ${data.y})`);

        // V√©rifier la proximit√© (distance maximale de 2 tiles)
        const distance = Math.sqrt(
          Math.pow(player.x - data.x, 2) + Math.pow(player.y - data.y, 2)
        );
        
        if (distance > 2) {
          client.send("inventoryError", { message: "Objet trop √©loign√©" });
          return;
        }

        // Ajouter l'objet √† l'inventaire
        await InventoryManager.addItem(player.name, data.itemId, 1);
        
        // Notifier le client
        client.send("inventoryUpdate", {
          type: "add",
          itemId: data.itemId,
          quantity: 1,
          pocket: getItemPocket(data.itemId)
        });

        client.send("itemPickup", {
          itemId: data.itemId,
          quantity: 1
        });

        console.log(`‚úÖ ${player.name} a ramass√© ${data.itemId}`);

      } catch (error) {
        console.error("‚ùå Erreur pickupItem:", error);
        client.send("inventoryError", { 
          message: "Impossible de ramasser l'objet" 
        });
      }
    });

    // Handler pour les tests (d√©veloppement uniquement)
    this.onMessage("testAddItem", async (client, data) => {
      try {
        const player = this.state.players.get(client.sessionId);
        if (!player) return;

        console.log(`üß™ Test: ajout de ${data.quantity || 1} ${data.itemId} √† ${player.name}`);

        // Ajouter l'objet
        await InventoryManager.addItem(player.name, data.itemId, data.quantity || 1);
        
        // Notifier le client
        client.send("inventoryUpdate", {
          type: "add",
          itemId: data.itemId,
          quantity: data.quantity || 1,
          pocket: getItemPocket(data.itemId)
        });

        console.log(`‚úÖ Test r√©ussi: ${data.itemId} ajout√©`);
        
      } catch (error) {
        console.error("‚ùå Erreur testAddItem:", error);
        client.send("inventoryError", { 
          message: `Erreur lors de l'ajout de ${data.itemId}` 
        });
      }
    });

    console.log(`‚úÖ Tous les handlers configur√©s (y compris inventaire et qu√™tes)`);
  }

  // ‚úÖ === NOUVEAUX HANDLERS POUR LES QU√äTES ===

  // ‚úÖ CORRECTION DANS handleStartQuest 
  private async handleStartQuest(client: Client, data: { questId: string }) {
    try {
      console.log(`üéØ [WorldRoom] D√©marrage de qu√™te ${data.questId} pour ${client.sessionId}`);
      
      const player = this.state.players.get(client.sessionId);
      if (!player) {
        client.send("questStartResult", {
          success: false,
          message: "Joueur non trouv√©"
        });
        return;
      }

      // ‚úÖ UTILISER DIRECTEMENT LE QUEST MANAGER POUR DEBUG
      const questManager = this.zoneManager.getQuestManager();
      if (!questManager) {
        console.error(`‚ùå [WorldRoom] QuestManager non accessible`);
        client.send("questStartResult", {
          success: false,
          message: "Syst√®me de qu√™tes non disponible"
        });
        return;
      }

      // ‚úÖ D√âMARRER LA QU√äTE DIRECTEMENT
      const quest = await questManager.startQuest(player.name, data.questId);
      
      if (quest) {
        console.log(`‚úÖ [WorldRoom] Qu√™te ${data.questId} d√©marr√©e pour ${player.name}`);
        
        const result = {
          success: true,
          quest: quest,
          message: `Qu√™te "${quest.name}" d√©marr√©e !`
        };
        
        client.send("questStartResult", result);
        
        // ‚úÖ METTRE √Ä JOUR LES STATUTS IMM√âDIATEMENT
        await this.updateQuestStatusesFixed(player.name);
        
        // ‚úÖ BROADCASTER AUX AUTRES JOUEURS DE LA ZONE
        this.broadcastToZone(player.currentZone, "questUpdate", {
          player: player.name,
          action: "started",
          questId: data.questId
        });
        
      } else {
        console.log(`‚ùå [WorldRoom] Impossible de d√©marrer ${data.questId} pour ${player.name}`);
        client.send("questStartResult", {
          success: false,
          message: "Impossible de d√©marrer cette qu√™te"
        });
      }
      
    } catch (error) {
      console.error("‚ùå [WorldRoom] Erreur handleStartQuest:", error);
      client.send("questStartResult", {
        success: false,
        message: "Erreur serveur lors du d√©marrage de la qu√™te"
      });
    }
  }

  private async handleGetActiveQuests(client: Client) {
    try {
      console.log(`üìã R√©cup√©ration des qu√™tes actives pour ${client.sessionId}`);
      
      const player = this.state.players.get(client.sessionId);
      if (!player) {
        client.send("activeQuestsList", { quests: [] });
        return;
      }

      // ‚úÖ FIX: Utiliser directement la m√©thode de d√©l√©gation du ZoneManager
      const activeQuests = await this.zoneManager.getActiveQuests(player.name);
      
      console.log(`üì§ Envoi de ${activeQuests.length} qu√™tes actives`);
      client.send("activeQuestsList", {
        quests: activeQuests
      });
      
    } catch (error) {
      console.error("‚ùå Erreur handleGetActiveQuests:", error);
      client.send("activeQuestsList", { quests: [] });
    }
  }

  private async handleGetAvailableQuests(client: Client) {
    try {
      console.log(`üìã R√©cup√©ration des qu√™tes disponibles pour ${client.sessionId}`);
      
      const player = this.state.players.get(client.sessionId);
      if (!player) {
        client.send("availableQuestsList", { quests: [] });
        return;
      }

      // ‚úÖ FIX: Utiliser directement la m√©thode de d√©l√©gation du ZoneManager
      const availableQuests = await this.zoneManager.getAvailableQuests(player.name);
      
      console.log(`üì§ Envoi de ${availableQuests.length} qu√™tes disponibles`);
      client.send("availableQuestsList", {
        quests: availableQuests
      });
      
    } catch (error) {
      console.error("‚ùå Erreur handleGetAvailableQuests:", error);
      client.send("availableQuestsList", { quests: [] });
    }
  }

  private async handleQuestProgress(client: Client, data: any) {
    try {
      console.log(`üìà Progression de qu√™te pour ${client.sessionId}:`, data);
      
      const player = this.state.players.get(client.sessionId);
      if (!player) {
        return;
      }

      // ‚úÖ FIX: Utiliser directement la m√©thode de d√©l√©gation du ZoneManager
      const results = await this.zoneManager.updateQuestProgress(player.name, data);
      
      if (results && results.length > 0) {
        console.log(`üì§ Envoi questProgressUpdate:`, results);
        client.send("questProgressUpdate", results);
        
        // Mettre √† jour les statuts de qu√™te
        await this.updateQuestStatusesFixed(player.name);
      }
      
    } catch (error) {
      console.error("‚ùå Erreur handleQuestProgress:", error);
    }
  }

  // ‚úÖ M√âTHODE DE DEBUG POUR LES QU√äTES
  private async debugQuests(client: Client) {
    const player = this.state.players.get(client.sessionId);
    if (!player) return;
    
    console.log(`üêõ [DEBUG QUETES] Joueur: ${player.name}`);
    
    try {
      // ‚úÖ FIX: Debug avec les m√©thodes de d√©l√©gation du ZoneManager
      const activeQuests = await this.zoneManager.getActiveQuests(player.name);
      const availableQuests = await this.zoneManager.getAvailableQuests(player.name);
      
      console.log(`üêõ [DEBUG] Qu√™tes actives (${activeQuests.length}):`, 
        activeQuests.map((q: Quest) => ({ id: q.id, name: q.name, step: q.currentStepIndex })));
      
      console.log(`üêõ [DEBUG] Qu√™tes disponibles (${availableQuests.length}):`, 
        availableQuests.map((q: Quest) => ({ id: q.id, name: q.name })));
        
    } catch (error) {
      console.error(`üêõ [DEBUG] Erreur debug qu√™tes:`, error);
    }
  }

  // ‚úÖ === NOUVEAUX HANDLERS POUR LES SHOPS ===

  private async handleShopTransaction(client: Client, data: {
    shopId: string;
    action: 'buy' | 'sell';
    itemId: string;
    quantity: number;
  }) {
    try {
      const player = this.state.players.get(client.sessionId);
      if (!player) {
        client.send("shopTransactionResult", {
          success: false,
          message: "Joueur non trouv√©"
        });
        return;
      }

      console.log(`üõí ${player.name} ${data.action} ${data.quantity}x ${data.itemId} dans shop ${data.shopId}`);

      // D√©l√©guer au ZoneManager
      await this.zoneManager.handleShopTransaction(client, data);

    } catch (error) {
      console.error(`‚ùå Erreur handleShopTransaction:`, error);
      client.send("shopTransactionResult", {
        success: false,
        message: "Erreur lors de la transaction"
      });
    }
  }

  private async handleGetShopCatalog(client: Client, shopId: string) {
    try {
      const player = this.state.players.get(client.sessionId);
      if (!player) {
        client.send("shopCatalogResult", {
          success: false,
          message: "Joueur non trouv√©"
        });
        return;
      }

      const shopManager = this.zoneManager.getShopManager();
      const catalog = shopManager.getShopCatalog(shopId, player.level || 1);

      if (catalog) {
        client.send("shopCatalogResult", {
          success: true,
          shopId: shopId,
          catalog: catalog,
          playerGold: player.gold || 1000
        });
        console.log(`‚úÖ Catalogue shop ${shopId} envoy√© √† ${client.sessionId}`);
      } else {
        client.send("shopCatalogResult", {
          success: false,
          message: "Shop introuvable"
        });
      }

    } catch (error) {
      console.error(`‚ùå Erreur getShopCatalog:`, error);
      client.send("shopCatalogResult", {
        success: false,
        message: "Erreur lors de la r√©cup√©ration du catalogue"
      });
    }
  }

  private async handleRefreshShop(client: Client, shopId: string) {
    try {
      const shopManager = this.zoneManager.getShopManager();
      const wasRestocked = shopManager.restockShop(shopId);

      if (wasRestocked) {
        // Renvoyer le catalogue mis √† jour
        await this.handleGetShopCatalog(client, shopId);
        
        client.send("shopRefreshResult", {
          success: true,
          message: "Magasin restock√© !",
          restocked: true
        });
        
        console.log(`üîÑ Shop ${shopId} restock√© pour ${client.sessionId}`);
      } else {
        client.send("shopRefreshResult", {
          success: true,
          message: "Pas de restock n√©cessaire",
          restocked: false
        });
      }

    } catch (error) {
      console.error(`‚ùå Erreur refreshShop:`, error);
      client.send("shopRefreshResult", {
        success: false,
        message: "Erreur lors du rafra√Æchissement"
      });
    }
  }
  
  // ‚úÖ HELPER POUR BROADCASTER √Ä UNE ZONE
  private broadcastToZone(zoneName: string, message: string, data: any) {
    console.log(`üì° [WorldRoom] Broadcasting to zone ${zoneName}: ${message}`);
    
    const clientsInZone = this.clients.filter(client => {
      const player = this.state.players.get(client.sessionId);
      return player && player.currentZone === zoneName;
    });
    
    clientsInZone.forEach(client => {
      client.send(message, data);
    });
    
    console.log(`üì§ [WorldRoom] Message envoy√© √† ${clientsInZone.length} clients dans ${zoneName}`);
  }

  async onJoin(client: Client, options: any = {}) {
    console.log(`üë§ === PLAYER JOIN ===`);
    console.log(`üîë Session: ${client.sessionId}`);
    console.log(`üìä Options:`, options);

    try {
      // Cr√©er le joueur
      const player = new Player();
      
      // Donn√©es de base
      player.id = client.sessionId;
      player.name = options.name || `Player_${client.sessionId.substring(0, 6)}`;
      player.x = options.spawnX || 52;
      player.y = options.spawnY || 48;
      
      // Zone de spawn
      player.currentZone = options.spawnZone || "beach";
      console.log(`üåç Zone de spawn: ${player.currentZone}`);
      
      // Compatibilit√© avec l'ancien syst√®me
      player.map = player.currentZone;
    // ‚úÖ NOUVELLES PROPRI√âT√âS SHOP
      player.level = options.level || 1;
      player.gold = options.gold || 1000;
      player.experience = options.experience || 0;
      player.title = options.title || "Dresseur D√©butant";
      // Ajouter au state
      this.state.players.set(client.sessionId, player);
      
      console.log(`üìç Position: (${player.x}, ${player.y}) dans ${player.currentZone}`);
      console.log(`üí∞ Level: ${player.level}, Gold: ${player.gold}`);
      console.log(`‚úÖ Joueur ${player.name} cr√©√©`);

      // === CONFIGURATION INVENTAIRE DE D√âPART ===
      try {
        console.log(`üéí Configuration inventaire de d√©part pour ${player.name}`);
        
        // Donne les objets de d√©part
        await InventoryManager.addItem(player.name, "poke_ball", 5);
        await InventoryManager.addItem(player.name, "potion", 3);
        
        // Ne donne la town_map que si le joueur ne l'a pas d√©j√†
        const hasMap = await InventoryManager.getItemCount(player.name, "town_map");
        if (hasMap === 0) {
          await InventoryManager.addItem(player.name, "town_map", 1);
        }

        // Afficher l'inventaire group√© par poche
        const grouped = await InventoryManager.getAllItemsGroupedByPocket(player.name);
        console.log(`üéí [INVENTAIRE group√© par poche] ${player.name}:`, grouped);
        
        console.log(`‚úÖ Objets de d√©part ajout√©s pour ${player.name}`);
      } catch (err) {
        console.error(`‚ùå [INVENTAIRE] Erreur lors de l'ajout d'objets de d√©part pour ${player.name}:`, err);
      }
      
      // Faire entrer le joueur dans sa zone initiale
      await this.zoneManager.onPlayerJoinZone(client, player.currentZone);
      this.scheduleFilteredStateUpdate();

      
      // ‚úÖ CORRECTION: Utiliser la nouvelle m√©thode avec d√©lai
      this.clock.setTimeout(async () => {
        await this.updateQuestStatusesFixed(player.name, client);
      }, 2000);
      
      console.log(`üéâ ${player.name} a rejoint le monde !`);

    } catch (error) {
      console.error(`‚ùå Erreur lors du join:`, error);
      
      // En cas d'erreur, faire quitter le client
      client.leave(1000, "Erreur lors de la connexion");
    }
  }

  onLeave(client: Client, consented: boolean) {
    console.log(`üëã === PLAYER LEAVE ===`);
    console.log(`üîë Session: ${client.sessionId}`);
    console.log(`‚úÖ Consenti: ${consented}`);

    const player = this.state.players.get(client.sessionId);
    if (player) {
console.log(`üìç Position finale: (${player.x}, ${player.y}) dans ${player.currentZone}`);
      console.log(`üí∞ Stats finales: Level ${player.level}, ${player.gold} gold`);
      
      // Supprimer du state
      this.state.players.delete(client.sessionId);
      console.log(`üóëÔ∏è Joueur ${player.name} supprim√© du state`);
    }

    console.log(`üëã Client ${client.sessionId} d√©connect√©`);
  }

  onDispose() {
    console.log(`üíÄ === WORLDROOM DISPOSE ===`);
    console.log(`üë• Joueurs restants: ${this.state.players.size}`);
    
    // Sauvegarder les donn√©es des joueurs restants
    this.state.players.forEach((player, sessionId) => {
      console.log(`üíæ Sauvegarde joueur: ${player.name} √† (${player.x}, ${player.y}) dans ${player.currentZone}`);
    });

    console.log(`‚úÖ WorldRoom ferm√©e`);
  }

  private handlePlayerMove(client: Client, data: any) {
    const player = this.state.players.get(client.sessionId);
    if (!player) return;

    // Mettre √† jour la position
    player.x = data.x;
    player.y = data.y;
    player.direction = data.direction;
    
    // ‚úÖ AJOUT: Garder la zone synchronis√©e
    if (data.currentZone) {
        player.currentZone = data.currentZone;
    }

    // Debug occasionnel (1 fois sur 10)
    if (Math.random() < 0.1) {
        console.log(`üåç ${player.name}: Zone: ${player.currentZone}`);
    }
  }

  // === M√âTHODES POUR LES EFFETS D'OBJETS ===

  private async applyItemEffect(player: any, itemId: string, context: string): Promise<{ message?: string }> {
    const itemData = getItemData(itemId);
    
    console.log(`üéØ Application effet ${itemId} pour ${player.name}`);
    
    switch (itemData.type) {
      case 'medicine':
        return await this.applyMedicineEffect(player, itemData);
        
      case 'item':
        return await this.applyUtilityItemEffect(player, itemData, itemId);
        
      case 'ball':
        return { message: `${itemId} utilis√© (effet Pok√© Ball non impl√©ment√©)` };
        
      default:
        return { message: `${itemId} utilis√© (effet g√©n√©rique)` };
    }
  }

  private async applyMedicineEffect(player: any, itemData: any): Promise<{ message?: string }> {
    // TODO: Impl√©menter la logique de soin des Pok√©mon
    if (itemData.heal_amount) {
      const healAmount = itemData.heal_amount === 'full' ? 'tous les' : itemData.heal_amount;
      return { message: `Pok√©mon soign√© de ${healAmount} PV !` };
    }
    
    if (itemData.status_cure) {
      const curedStatus = Array.isArray(itemData.status_cure) ? itemData.status_cure.join(', ') : itemData.status_cure;
      return { message: `Statut ${curedStatus} gu√©ri !` };
    }
    
    return { message: "Pok√©mon soign√© !" };
  }

  private async applyUtilityItemEffect(player: any, itemData: any, itemId: string): Promise<{ message?: string }> {
    switch (itemId) {
      case 'escape_rope':
        return { message: "Vous √™tes retourn√© au dernier Centre Pok√©mon !" };
        
      case 'repel':
      case 'super_repel':
      case 'max_repel':
        const steps = itemData.effect_steps || 100;
        return { message: `Repousse activ√© pour ${steps} pas !` };
        
      default:
        return { message: `${itemId} utilis√© !` };
    }
  }

  // === M√âTHODES UTILITAIRES POUR L'INVENTAIRE ===

  async giveItemToPlayer(playerName: string, itemId: string, quantity: number = 1): Promise<boolean> {
    try {
      await InventoryManager.addItem(playerName, itemId, quantity);
      
      // Trouver le client pour la notification
      for (const [sessionId, player] of this.state.players.entries()) {
        if (player.name === playerName) {
          const client = this.clients.find(c => c.sessionId === sessionId);
          if (client) {
            client.send("inventoryUpdate", {
              type: "add",
              itemId: itemId,
              quantity: quantity,
              pocket: getItemPocket(itemId)
            });
          }
          break;
        }
      }
      
      console.log(`‚úÖ Donn√© ${quantity} ${itemId} √† ${playerName}`);
      return true;
    } catch (error) {
      console.error(`‚ùå Erreur lors du don d'objet:`, error);
      return false;
    }
  }

  async takeItemFromPlayer(playerName: string, itemId: string, quantity: number = 1): Promise<boolean> {
    try {
      const success = await InventoryManager.removeItem(playerName, itemId, quantity);
      
      if (success) {
        // Trouver le client pour la notification
        for (const [sessionId, player] of this.state.players.entries()) {
          if (player.name === playerName) {
            const client = this.clients.find(c => c.sessionId === sessionId);
            if (client) {
              client.send("inventoryUpdate", {
                type: "remove",
                itemId: itemId,
                quantity: quantity,
                pocket: getItemPocket(itemId)
              });
            }
            break;
          }
        }
        
        console.log(`‚úÖ Retir√© ${quantity} ${itemId} √† ${playerName}`);
      }
      
      return success;
    } catch (error) {
      console.error(`‚ùå Erreur lors du retrait d'objet:`, error);
      return false;
    }
  }

  async playerHasItem(playerName: string, itemId: string, quantity: number = 1): Promise<boolean> {
    try {
      const count = await InventoryManager.getItemCount(playerName, itemId);
      return count >= quantity;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la v√©rification d'objet:`, error);
      return false;
    }
  }

  // ‚úÖ === NOUVELLES M√âTHODES UTILITAIRES POUR LES SHOPS ===

  async updatePlayerGold(playerName: string, newGold: number): Promise<boolean> {
    try {
      // Trouver le joueur dans le state
      for (const [sessionId, player] of this.state.players.entries()) {
        if (player.name === playerName) {
          player.gold = Math.max(0, newGold); // Pas d'or n√©gatif
          
          // Notifier le client
          const client = this.clients.find(c => c.sessionId === sessionId);
          if (client) {
            client.send("goldUpdate", {
              newGold: player.gold
            });
          }
          
          console.log(`üí∞ Or mis √† jour pour ${playerName}: ${player.gold} gold`);
          return true;
        }
      }
      
      console.warn(`‚ö†Ô∏è Joueur ${playerName} non trouv√© pour mise √† jour de l'or`);
      return false;
    } catch (error) {
      console.error(`‚ùå Erreur updatePlayerGold:`, error);
      return false;
    }
  }

  async getPlayerGold(playerName: string): Promise<number> {
    try {
      for (const [sessionId, player] of this.state.players.entries()) {
        if (player.name === playerName) {
          return player.gold || 0;
        }
      }
      return 0;
    } catch (error) {
      console.error(`‚ùå Erreur getPlayerGold:`, error);
      return 0;
    }
  }

  async getPlayerLevel(playerName: string): Promise<number> {
    try {
      for (const [sessionId, player] of this.state.players.entries()) {
        if (player.name === playerName) {
          return player.level || 1;
        }
      }
      return 1;
    } catch (error) {
      console.error(`‚ùå Erreur getPlayerLevel:`, error);
      return 1;
    }
  }
  
  // ‚úÖ M√âTHODE CORRIG√âE: getFilteredStateForClient
  private getFilteredStateForClient(client: Client): any {
    const player = this.state.players.get(client.sessionId);
    if (!player) {
        console.warn(`‚ö†Ô∏è [WorldRoom] Client ${client.sessionId} sans joueur pour filtered state`);
        return null;
    }

    const playerZone = player.currentZone;
    
    // ‚úÖ CORRECTION CRITIQUE: Utiliser un Object simple au lieu d'un Map
    const filteredPlayersObject: { [key: string]: any } = {};
    
    this.state.players.forEach((otherPlayer, sessionId) => {
        // ‚úÖ Toujours inclure le joueur du client EN PREMIER
        if (sessionId === client.sessionId) {
            filteredPlayersObject[sessionId] = {
                id: otherPlayer.id,
                name: otherPlayer.name,
                x: otherPlayer.x,
                y: otherPlayer.y,
                currentZone: otherPlayer.currentZone,
                direction: otherPlayer.direction,
                isMoving: otherPlayer.isMoving,
                level: otherPlayer.level,
                gold: otherPlayer.gold
            };
            return;
        }
        
        // ‚úÖ Inclure les autres joueurs de la m√™me zone
        if (otherPlayer.currentZone === playerZone) {
            filteredPlayersObject[sessionId] = {
                id: otherPlayer.id,
                name: otherPlayer.name,
                x: otherPlayer.x,
                y: otherPlayer.y,
                currentZone: otherPlayer.currentZone,
                direction: otherPlayer.direction,
                isMoving: otherPlayer.isMoving,
                level: otherPlayer.level,
                // ‚úÖ NE PAS inclure l'or des autres joueurs pour la s√©curit√©
                // gold: otherPlayer.gold  
            };
        }
    });

    console.log(`üìä [WorldRoom] Filtered state pour ${client.sessionId}: ${Object.keys(filteredPlayersObject).length} joueurs (zone: ${playerZone})`);
    
    return {
        players: filteredPlayersObject  // ‚úÖ Object simple, pas Map
    };
  }

  private sendFilteredState() {
    const now = Date.now();
    
    // Throttle : max 1 update toutes les 100ms
    if (now - this.lastStateUpdate < this.stateUpdateInterval) {
      return;
    }
    
    this.lastStateUpdate = now;
    
    // Envoyer un state filtr√© √† chaque client selon sa zone
    this.clients.forEach(client => {
      const filteredState = this.getFilteredStateForClient(client);
      if (filteredState) {
        client.send("filteredState", filteredState);
      }
    });
    
    console.log(`üì§ States filtr√©s envoy√©s √† ${this.clients.length} clients`);
  }

private scheduleFilteredStateUpdate() {
    // Programmer une mise √† jour dans 50ms (pour regrouper les changements)
    this.clock.setTimeout(() => {
      this.sendFilteredState();
    }, 50);
  }

  // ‚úÖ === M√âTHODES D'ACC√àS AUX MANAGERS ===

  getZoneManager(): ZoneManager {
    return this.zoneManager;
  }

  getShopManager() {
    return this.zoneManager.getShopManager();
  }

  getQuestManager() {
    return this.zoneManager.getQuestManager();
  }

  getInteractionManager() {
    return this.zoneManager.getInteractionManager();
  }
}
